[{"title":"HTTP/1.1 与 HTTP/2 的核心区别","description":"","answer":"<ul>\n<li><strong>多路复用</strong>：HTTP/2 允许在一个 TCP 连接上并行传输多个请求/响应，解决队头阻塞问题12。</li>\n<li><strong>二进制分帧</strong>：数据以二进制帧传输，提升解析效率16。</li>\n<li><strong>头部压缩</strong>：HPACK 算法减少冗余头部传输16。</li>\n<li><strong>服务器推送</strong>：服务端可主动推送资源（如 CSS/JS），减少请求延迟16。</li>\n</ul>\n"},{"title":"HTTP 2.0 和 3.0 有什么区别？","description":"","answer":"<ul>\n<li>HTTP/2.0 采用二进制格式传输数据，采用多路复用技术，可以只通过一个 TCP 连接传输所有的请求数据。采用头部压缩技术，解决了 HTTP/1.0 的 header 里携带的内容过大的问题。但是如果在传输的过程中存在丢包的情况的话，那么整个 TCP 就得重新传输，后面资源就会被阻塞。</li>\n<li>HTTP/3.0 放弃了 TCP 协议而是改用了 QUIC 协议，此协议基于传输层 UDP 协议。UDP 协议无需三次握手四次挥手，所以传输速率更高。并且它改善了多路复用产生的问题，如果出现丢包的情况，不需要整个重新发送，只需要重发丢掉的包就可以。HTTP/3.0 具有更低的延迟，效率甚至要比 HTTP/1.1 快 3 倍以上。</li>\n</ul>\n"},{"title":"你知道哪些常见的网络协议？","description":"","answer":""},{"title":"解释 HTTP/3 的底层协议 QUIC 的核心优势","description":"","answer":""},{"title":"HTTP 和 HTTPS 有什么区别？","description":"","answer":"<ol>\n<li>\n<p><code>HTTPS</code> 协议需要到 <code>CA</code> （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。</p>\n</li>\n<li>\n<p><code>HTTP</code> 是超文本传输协议，信息是明文传输，<code>HTTPS</code> 则是具有安全性的 <code>SSL</code> 加密传输协议。</p>\n</li>\n<li>\n<p><code>HTTP</code> 和 <code>HTTPS</code> 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是<code>443</code>。</p>\n</li>\n<li>\n<p><code>HTTP</code> 的连接很简单，是无状态的。<code>HTTPS</code> 协议是由 <code>SSL+HTTP</code> 协议构建的可进行加密传输、身份认证的网络协议，比 <code>HTTP</code> 协议安全。</p>\n</li>\n</ol>\n"},{"title":"简述 HTTPS 的加密原理和优点","description":"<p>HTTPS 通过 <strong>SSL/TLS 协议</strong>实现传输层加密，采用<strong>混合加密机制</strong>（非对称加密交换密钥 + 对称加密传输数据），确保数据机密性、完整性和身份认证，解决 HTTP 明文传输的安全风险。</p>\n<p><strong>加密原理</strong></p>\n<ol>\n<li>\n<p><strong>混合加密机制</strong>：</p>\n<ul>\n<li><strong>非对称加密</strong>（如 RSA/ECC）：\n<ul>\n<li>客户端通过服务器公钥加密随机生成的<strong>对称密钥</strong>，安全传输给服务器；</li>\n<li>服务器用私钥解密获取对称密钥，后续通信使用该密钥对称加密数据。</li>\n</ul>\n</li>\n<li><strong>对称加密</strong>（如 AES）：\n<ul>\n<li>双方使用共享密钥加解密数据，效率高，适合大数据量传输。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>数字证书与身份认证</strong>：</p>\n<ul>\n<li><strong>CA 证书</strong>：服务器向权威机构（CA）申请证书，包含公钥、域名、有效期等信息；</li>\n<li><strong>证书验证</strong>：客户端验证证书合法性（是否过期、域名匹配、CA 签名可信），防止中间人攻击。</li>\n</ul>\n</li>\n<li>\n<p><strong>完整性校验</strong>：</p>\n<ul>\n<li>使用 <strong>HMAC</strong> 或 <strong>消息摘要算法</strong>（如 SHA-256）生成数据指纹，确保传输内容未被篡改。</li>\n</ul>\n</li>\n</ol>\n<p><strong>TLS 握手流程（简化版）</strong></p>\n<ol>\n<li><strong>Client Hello</strong>：客户端发送支持的加密套件列表和随机数；</li>\n<li><strong>Server Hello</strong>：服务器选择加密套件并返回证书和随机数；</li>\n<li><strong>密钥交换</strong>：客户端验证证书，生成预主密钥并用服务器公钥加密发送；</li>\n<li><strong>生成会话密钥</strong>：双方基于随机数和预主密钥生成对称密钥；</li>\n<li><strong>加密通信</strong>：使用对称密钥加密后续数据传输。</li>\n</ol>\n<p><strong>核心优点</strong></p>\n<ol>\n<li><strong>数据机密性</strong>：加密传输防止窃听（如抓包工具无法解析敏感信息）；</li>\n<li><strong>身份认证</strong>：CA 证书验证服务器身份，避免钓鱼网站；</li>\n<li><strong>数据完整性</strong>：校验机制确保数据未被篡改（如植入广告或恶意代码）；</li>\n<li><strong>SEO 优化</strong>：搜索引擎优先收录 HTTPS 网站；</li>\n<li><strong>合规要求</strong>：满足 GDPR、PCI DSS 等数据安全法规。</li>\n</ol>\n<p><strong>对比 HTTP 的改进</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>维度</strong></th>\n<th><strong>HTTP</strong></th>\n<th><strong>HTTPS</strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"对称加密和非对称加密的区别","description":"","answer":""},{"title":"https 的证书验证过程是什么样的","description":"","answer":"<p>HTTPS 的证书验证过程是确保用户与服务器之间的安全通信的关键步骤。</p>\n<p>以下是证书验证过程的详细步骤：</p>\n<p><strong>1. 客户端发起连接</strong></p>\n<ol>\n<li><strong>客户端请求</strong>：\n<ul>\n<li>客户端（如浏览器）发起一个 HTTPS 请求，连接到服务器。</li>\n</ul>\n</li>\n</ol>\n<p><strong>2. 服务器响应</strong></p>\n<ol>\n<li><strong>服务器发送证书</strong>：\n<ul>\n<li>服务器将 SSL/TLS 证书发送给客户端。证书包含了服务器的公钥和由受信任的证书颁发机构（CA）签名的信息。</li>\n</ul>\n</li>\n</ol>\n<p><strong>3. 客户端验证证书</strong></p>\n<ol>\n<li><strong>验证证书链</strong>：\n<ul>\n<li><strong>检查证书有效性</strong>：\n<ul>\n<li>客户端检查证书是否在有效期内。</li>\n</ul>\n</li>\n<li><strong>验证证书签名</strong>：\n<ul>\n<li>客户端使用 CA 的公钥验证证书的签名，以确保证书未被篡改。</li>\n</ul>\n</li>\n<li><strong>检查证书颁发机构</strong>：\n<ul>\n<li>客户端检查证书是否由受信任的 CA 颁发。浏览器内置了受信任的 CA 列表，用于验证证书的有效性。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证证书用途</strong>：\n<ul>\n<li><strong>检查证书用途</strong>：\n<ul>\n<li>客户端检查证书是否适用于其目的（例如服务器身份验证）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证域名</strong>：\n<ul>\n<li><strong>域名匹配</strong>：\n<ul>\n<li>客户端检查证书中的域名是否与请求的域名匹配。证书中的“主体”字段（Common Name）或“主题备用名称”字段（Subject Alternative Name）应与请求的 URL 匹配。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>4. 生成和交换密钥</strong></p>\n<ol>\n<li><strong>密钥交换</strong>：\n<ul>\n<li><strong>客户端生成密钥</strong>：\n<ul>\n<li>客户端生成一个对称密钥（Session Key），用于加密会话数据。</li>\n</ul>\n</li>\n<li><strong>加密密钥</strong>：\n<ul>\n<li>客户端用服务器的公钥加密生成的对称密钥，并将其发送到服务器。</li>\n</ul>\n</li>\n<li><strong>服务器解密密钥</strong>：\n<ul>\n<li>服务器用私钥解密客户端发送的对称密钥。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>5. 加密通信</strong></p>\n<ol>\n<li><strong>建立安全通道</strong>：\n<ul>\n<li><strong>数据加密</strong>：\n<ul>\n<li>服务器和客户端使用对称密钥加密和解密数据，确保通信内容的机密性和完整性。</li>\n</ul>\n</li>\n<li><strong>数据传输</strong>：\n<ul>\n<li>所有后续的通信数据都通过加密的通道传输。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>6. 完成握手</strong></p>\n<ol>\n<li><strong>握手完成</strong>：\n<ul>\n<li>一旦安全通道建立，客户端和服务器就可以安全地交换数据，握手过程结束。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"HTTPS 加密算法和加解密过程是啥？","description":"","answer":"<p>HTTPS 使用 SSL/TLS 协议来加密传输的数据，确保数据的机密性和完整性。HTTPS 的加解密过程主要包括以下几个步骤和算法：</p>\n<p><strong>1. 加密算法和密钥类型</strong></p>\n<ul>\n<li><strong>对称加密算法</strong>：使用相同的密钥进行加密和解密。常见的对称加密算法包括 AES（Advanced Encryption Standard）和 3DES（Triple Data Encryption Standard）。</li>\n<li><strong>非对称加密算法</strong>：使用一对密钥（公钥和私钥），公钥用于加密，私钥用于解密。常见的非对称加密算法包括 RSA（Rivest-Shamir-Adleman）和 ECC（Elliptic Curve Cryptography）。</li>\n<li><strong>哈希算法</strong>：用于生成数据的摘要，以确保数据完整性。常见的哈希算法包括 SHA-256（Secure Hash Algorithm 256-bit）和 MD5（Message Digest Algorithm 5，虽然 MD5 不再安全）。</li>\n</ul>\n<p><strong>2. SSL/TLS 握手过程</strong></p>\n<p><strong>握手阶段</strong></p>\n<ol>\n<li><strong>客户端发起连接</strong>\n<ul>\n<li>客户端发送一个 “ClientHello” 消息，包含客户端支持的 TLS 版本、加密套件（加密算法组合）、压缩方法和其他信息。</li>\n</ul>\n</li>\n<li><strong>服务器响应</strong>\n<ul>\n<li>服务器回应一个 “ServerHello” 消息，选择客户端支持的加密套件和 TLS 版本。</li>\n<li>服务器发送其数字证书给客户端。数字证书包含服务器的公钥，由证书颁发机构（CA）签名。</li>\n</ul>\n</li>\n<li><strong>证书验证</strong>\n<ul>\n<li>客户端验证服务器的数字证书的有效性和真实性。如果证书有效，客户端继续执行。</li>\n<li>客户端生成一个随机的“pre-master secret”并用服务器的公钥加密，然后发送给服务器。这个“pre-master secret”将在后续的步骤中用于生成对称加密密钥。</li>\n</ul>\n</li>\n<li><strong>密钥交换</strong>\n<ul>\n<li>服务器使用其私钥解密“pre-master secret”并生成一个对称加密密钥（session key）。</li>\n<li>客户端和服务器使用“pre-master secret”生成相同的对称加密密钥（session key），用于加密后续的通信数据。</li>\n</ul>\n</li>\n<li><strong>完成握手</strong>\n<ul>\n<li>双方用对称加密密钥加密并交换“Finished”消息，表示握手过程完成。</li>\n<li>从这一点开始，客户端和服务器使用对称加密密钥加密和解密数据。</li>\n</ul>\n</li>\n</ol>\n<p><strong>3. 数据加密和传输</strong></p>\n<ul>\n<li><strong>对称加密</strong>：客户端和服务器使用之前生成的对称加密密钥来加密和解密数据。对称加密算法确保数据在传输过程中是机密的。</li>\n<li><strong>数据完整性</strong>：除了加密，TLS 还使用消息认证码（MAC）来确保数据在传输过程中没有被篡改。常见的 MAC 算法包括 HMAC（Hash-based Message Authentication Code）。</li>\n</ul>\n<p><strong>4. 连接关闭</strong></p>\n<ul>\n<li><strong>优雅关闭</strong>：当通信完成时，客户端和服务器通过发送“close_notify”消息来优雅地关闭连接，确保所有的数据都被正确传输。</li>\n</ul>\n<p><strong>常见的加密套件</strong></p>\n<p>在 TLS 握手过程中，客户端和服务器会协商一个加密套件（cipher suite），这是一个加密算法的组合。常见的加密套件包括：</p>\n<ul>\n<li><strong>TLS_AES_128_GCM_SHA256</strong>：使用 AES 进行对称加密，GCM（Galois/Counter Mode）用于加密模式，SHA-256 用于消息认证。</li>\n<li><strong>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</strong>：使用 ECDHE（Elliptic Curve Diffie-Hellman Ephemeral）进行密钥交换，RSA 进行身份验证，AES-256-GCM 进行对称加密，SHA-384 进行消息认证。</li>\n</ul>\n"},{"title":"请简述 HTTP 请求的过程","description":"","answer":"<p>HTTP 请求的过程包括从客户端发起请求到服务器响应的完整流程。以下是简述的步骤：</p>\n<p><strong>1. DNS 解析</strong></p>\n<p>客户端将域名（如 <code>www.example.com</code>）解析为 IP 地址。这个过程通常通过 DNS（域名系统）完成。</p>\n<p><strong>2. 建立 TCP 连接</strong></p>\n<p>客户端与服务器建立 TCP 连接，通常通过三次握手过程（SYN, SYN-ACK, ACK）。</p>\n<p><strong>3. 发送 HTTP 请求</strong></p>\n<p>客户端通过 TCP 连接向服务器发送 HTTP 请求。HTTP 请求包括以下部分：</p>\n<ul>\n<li>\n<p><strong>请求行</strong>：包含 HTTP 方法（如 GET、POST）、请求的资源路径和 HTTP 版本。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>GET /index.html HTTP/1.1</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>请求头</strong>：包含关于客户端、请求的内容和其他元数据的信息。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>Host: www.example.com</span></span>\n<span class=\"line\"><span>User-Agent: Mozilla/5.0</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>请求体（可选</strong>）：在某些方法（如 POST）中包含要发送到服务器的数据。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>{\"name\": \"John\", \"age\": 30}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>4. 服务器处理请求</strong></p>\n<p>服务器接收到 HTTP 请求后，解析请求行和请求头，处理请求，并根据请求的资源生成响应。这个过程包括：</p>\n<ul>\n<li>解析请求头</li>\n<li>执行相关的逻辑（如访问数据库、处理数据）</li>\n<li>生成响应内容</li>\n</ul>\n<p><strong>5. 服务器发送 HTTP 响应</strong></p>\n<p>服务器通过 TCP 连接将 HTTP 响应返回给客户端。HTTP 响应包括以下部分：</p>\n<ul>\n<li>\n<p><strong>状态行</strong>：包含 HTTP 版本、状态码和状态描述。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>HTTP/1.1 200 OK</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>响应头</strong>：包含关于响应的元数据（如内容类型、内容长度等）。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>Content-Type: text/html</span></span>\n<span class=\"line\"><span>Content-Length: 1234</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>响应体</strong>：包含实际的响应数据（如 HTML 页面、JSON 数据等）。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>&#x3C;html>...&#x3C;/html></span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>6. 关闭 TCP 连接（或保持连接）</strong></p>\n<p>客户端和服务器可以选择关闭 TCP 连接（如果 HTTP 版本是 1.0 或未设置 <code>Connection: keep-alive</code>）或保持连接以供后续请求（如果 HTTP 版本是 1.1 或设置了 <code>Connection: keep-alive</code>）。</p>\n<p><strong>7. 客户端处理响应</strong></p>\n<p>客户端接收到 HTTP 响应后，解析状态行、响应头和响应体，进行进一步处理（如更新页面内容）。</p>\n"},{"title":"HTTP Header 中有哪些信息？","description":"","answer":"<p><strong>请求头（Request Headers）</strong></p>\n<ol>\n<li><strong>Accept</strong>：指定客户端能够接受的内容类型。例如：<code>Accept: application/json, text/html</code>.</li>\n<li><strong>Accept-Encoding</strong>：指定客户端能够接受的编码格式。例如：<code>Accept-Encoding: gzip, deflate</code>.</li>\n<li><strong>Accept-Language</strong>：指定客户端能够接受的语言。例如：<code>Accept-Language: en-US, en;q=0.9</code>.</li>\n<li><strong>Authorization</strong>：用于身份验证的头部。例如：<code>Authorization: Bearer &lt;token&gt;</code>.</li>\n<li><strong>Cookie</strong>：发送给服务器的 cookie 信息。例如：<code>Cookie: sessionId=abc123</code>.</li>\n<li><strong>Host</strong>：指定请求的目标主机和端口。例如：<code>Host: www.example.com</code>.</li>\n<li><strong>User-Agent</strong>：标识发出请求的用户代理（通常是浏览器）。例如：<code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</code>.</li>\n</ol>\n<p><strong>响应头（Response Headers）</strong></p>\n<ol>\n<li><strong>Content-Type</strong>：响应体的内容类型。例如：<code>Content-Type: text/html; charset=UTF-8</code>.</li>\n<li><strong>Content-Length</strong>：响应体的长度（字节数）。例如：<code>Content-Length: 1234</code>.</li>\n<li><strong>Date</strong>：响应被发送的日期和时间。例如：<code>Date: Mon, 16 Aug 2024 12:00:00 GMT</code>.</li>\n<li><strong>Server</strong>：服务器的软件信息。例如：<code>Server: Apache/2.4.41 (Ubuntu)</code>.</li>\n<li><strong>Set-Cookie</strong>：用于在客户端设置 cookie。例如：<code>Set-Cookie: sessionId=abc123; Path=/; HttpOnly</code>.</li>\n<li><strong>Cache-Control</strong>：指定缓存策略。例如：<code>Cache-Control: no-cache, no-store, must-revalidate</code>.</li>\n</ol>\n<p><strong>通用头（General Headers）</strong></p>\n<ol>\n<li><strong>Connection</strong>：指定是否保持连接或关闭连接。例如：<code>Connection: keep-alive</code>.</li>\n<li><strong>Upgrade</strong>：用于升级协议。例如：<code>Upgrade: websocket</code>.</li>\n<li><strong>Via</strong>：标识请求/响应经过的中间代理。例如：<code>Via: 1.1 example.com</code>.</li>\n</ol>\n<p><strong>其他头部信息</strong></p>\n<ol>\n<li><strong>Location</strong>：在重定向响应中，指定重定向的目标 URL。例如：<code>Location: https://www.example.com/new-page</code>.</li>\n<li><strong>ETag</strong>：资源的标识符，用于缓存控制。例如：<code>ETag: &quot;12345&quot;</code>.</li>\n<li><strong>If-Modified-Since</strong>：请求中指定的时间，服务器只在资源在此时间之后被修改时才返回资源。例如：<code>If-Modified-Since: Mon, 16 Aug 2024 10:00:00 GMT</code>.</li>\n</ol>\n"},{"title":"HTTP 报文结构是怎样的？","description":"","answer":""},{"title":"为什么说 HTTP 是无状态的协议？","description":"","answer":""},{"title":"请求 Header 中的 Content-Type ，有哪些常见的值?","description":"","answer":"<p>请求头中的 <code>Content-Type</code> 用于指明请求体中数据的格式，以下是常见的 <code>Content-Type</code> 值：</p>\n<ol>\n<li><strong>application/json</strong>\n<ul>\n<li><strong>用途</strong>：传输 JSON 格式的数据，是前后端交互的常见选择。</li>\n<li><strong>示例</strong>：<code>{ &quot;key&quot;: &quot;value&quot; }</code></li>\n</ul>\n</li>\n<li><strong>application/x-www-form-urlencoded</strong>\n<ul>\n<li><strong>用途</strong>：表单数据的默认格式，将数据以键值对的形式传递，通常在简单表单提交中使用。</li>\n<li><strong>格式</strong>：<code>key1=value1&amp;key2=value2</code></li>\n</ul>\n</li>\n<li><strong>multipart/form-data</strong>\n<ul>\n<li><strong>用途</strong>：上传文件时常用的格式，允许在一个请求中包含文本字段和文件字段。</li>\n<li><strong>格式</strong>：数据被分段发送，每段包含字段信息，适合文件和表单混合数据的提交。</li>\n</ul>\n</li>\n<li><strong>text/plain</strong>\n<ul>\n<li><strong>用途</strong>：发送未经编码的纯文本内容，适用于简单的文本数据传输。</li>\n<li><strong>示例</strong>：<code>plain text</code></li>\n</ul>\n</li>\n<li><strong>application/xml</strong>\n<ul>\n<li><strong>用途</strong>：用于传输 XML 格式的数据，通常用于某些旧系统或特定接口。</li>\n<li><strong>示例</strong>：<code>&lt;note&gt;&lt;to&gt;User&lt;/to&gt;&lt;/note&gt;</code></li>\n</ul>\n</li>\n<li><strong>application/octet-stream</strong>\n<ul>\n<li><strong>用途</strong>：用于传输任意的二进制数据，常用于文件下载或上传，表示未知的文件类型。</li>\n<li><strong>特点</strong>：数据以字节流的形式传递，适合音视频、图片等多媒体数据。</li>\n</ul>\n</li>\n<li><strong>application/javascript</strong>\n<ul>\n<li><strong>用途</strong>：用于传输 JavaScript 代码或脚本内容。</li>\n<li><strong>场景</strong>：在接口返回的响应头中更常见，适合动态生成和执行的脚本数据。</li>\n</ul>\n</li>\n<li><strong>text/html</strong>\n<ul>\n<li><strong>用途</strong>：传输 HTML 文档，适合网页内容的传输。</li>\n<li><strong>特点</strong>：常用于返回页面内容，浏览器会将其识别为 HTML 并渲染。</li>\n</ul>\n</li>\n<li><strong>image/png</strong>、<strong>image/jpeg</strong>、<strong>image/gif</strong>\n<ul>\n<li><strong>用途</strong>：传输图像文件，<code>Content-Type</code> 中会包含图像的具体格式。</li>\n<li><strong>场景</strong>：用于直接访问图片 URL 或上传图像。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"说说网络分层里七层模型是哪七层","description":"","answer":"<p>网络七层模型（OSI）是国际标准化组织定义的网络通信分层框架，从物理传输到应用服务逐层抽象。</p>\n<p><strong>具体分层</strong>：</p>\n<ol>\n<li><strong>物理层</strong>：传输原始比特流（如网线、光纤）；</li>\n<li><strong>数据链路层</strong>：帧传输与MAC地址寻址（如交换机）；</li>\n<li><strong>网络层</strong>：IP寻址与路由选择（如路由器）；</li>\n<li><strong>传输层</strong>：端到端连接与可靠性（TCP/UDP）；</li>\n<li><strong>会话层</strong>：建立/管理会话（如RPC）；</li>\n<li><strong>表示层</strong>：数据格式转换与加密（如SSL/TLS）；</li>\n<li><strong>应用层</strong>：用户接口与协议（HTTP/FTP）。</li>\n</ol>\n<p>前端开发主要关注<strong>应用层（HTTP/WebSocket）<strong>和</strong>传输层（TCP）</strong>。</p>\n"},{"title":"说说对 TCP/IP 协议的了解","description":"","answer":"<p><code>TCP/IP</code>（<code>Transmission Control Protocol/Internet Protocol</code>，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由 <code>FTP、SMTP、TCP、UDP、IP</code>等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p>\n<p>TCP/IP传输协议是在网络的使用中的最基本的通信协议。TCP/IP传输协议对互联网中各部分进行通信的标准和方法进行了规定。并且，TCP/IP传输协议是保证网络数据信息及时、完整传输的两个重要的协议。TCP/IP传输协议是严格来说是一个四层的体系结构，<strong>应用层</strong> 、<strong>传输层</strong>、<strong>网络层</strong> 和 <strong>数据链路层</strong> 都包含其中。</p>\n<p>TCP/IP通讯协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为:</p>\n<ul>\n<li>应用层:应用程序间沟通的层，如简单电子邮件传输(SMTP)、文件传输协议(FTP)、网络远程访问协议(Telnet)等。</li>\n<li>传输层:在此层中，它提供了节点间的数据传送，应用程序之间的通信服务，主要功能是数据格式化、数据确认和丢失重传等。如传输控制协议(TCP)、用户数据报协议(UDP)等，TCP和UDP给数据包加入传输数据并把它传输到下一层中，这一层负责传送数据，并且确定数据已被送达并接收。</li>\n<li>网络层:负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机(但不检查是否被正确接收)，如网际协议(IP)。</li>\n<li>数据链路层(主机-网络层):接收IP数据报并进行传输，从网络上接收物理帧，抽取IP数据报转交给下一层，对实际的网络媒体的管理，定义如何使用实际网络(如Ethernet、Serial Line等)来传送数据。</li>\n</ul>\n"},{"title":"TCP 和 UDP 有什么区别？","description":"","answer":"<p>TCP和UDP的核心区别在于<strong>可靠性、连接方式及传输效率</strong>，分别适用于不同场景。</p>\n<p><strong>具体差异</strong>：</p>\n<ol>\n<li>\n<p><strong>连接性</strong>：</p>\n<ul>\n<li><strong>TCP</strong>：面向连接（三次握手/四次挥手），确保可靠传输。</li>\n<li><strong>UDP</strong>：无连接，直接发送数据包，无连接开销。</li>\n</ul>\n</li>\n<li>\n<p><strong>可靠性</strong>：</p>\n<ul>\n<li><strong>TCP</strong>：保证数据顺序、完整性，自动重传丢包。</li>\n<li><strong>UDP</strong>：不保证送达，可能丢包或乱序。</li>\n</ul>\n</li>\n<li>\n<p><strong>传输效率</strong>：</p>\n<ul>\n<li><strong>TCP</strong>：因校验、重传、拥塞控制等机制，延迟较高。</li>\n<li><strong>UDP</strong>：无额外控制，传输速度快，实时性高。</li>\n</ul>\n</li>\n<li>\n<p><strong>头部开销</strong>：</p>\n<ul>\n<li><strong>TCP</strong>：头部较大（20-60字节），包含序列号、确认号等字段。</li>\n<li><strong>UDP</strong>：头部固定8字节，仅含端口和长度。</li>\n</ul>\n</li>\n</ol>\n<p><strong>应用场景</strong>：</p>\n<ul>\n<li><strong>TCP</strong>：HTTP/HTTPS、文件传输（FTP）、邮件（SMTP）等需可靠性的场景。</li>\n<li><strong>UDP</strong>：视频通话（如WebRTC）、直播流、DNS查询、在线游戏等实时性优先的场景。</li>\n</ul>\n<p><strong>总结</strong>：需要可靠传输选TCP，追求实时高效选UDP。</p>\n"},{"title":"TCP 粘包是什么？","description":"","answer":"<p>TCP 粘包（TCP packet sticking）是一种在 TCP 协议中常见的现象，指的是接收方在读取数据时，可能会将来自多个发送包的数据合并在一起，或者将一个发送包的数据拆分成多个接收包进行读取。这种现象与 TCP 的数据传输机制有关，而 TCP 协议本身并不保留消息边界，只关心字节流的可靠传输。</p>\n<p><strong>粘包和拆包的原因</strong></p>\n<ol>\n<li><strong>流式协议</strong>：\n<ul>\n<li>TCP 是一个流式协议，数据在网络上传输时被看作一个连续的字节流，没有明确的消息边界。这意味着发送的数据包在接收端可能会被合并，也可能被拆分。</li>\n</ul>\n</li>\n<li><strong>网络延迟和缓冲</strong>：\n<ul>\n<li>TCP 可能会将多个小的数据包合并成一个较大的数据包发送，或者将一个较大的数据包拆分成多个小的包进行发送。这取决于网络状况和 TCP 实现的缓冲策略。</li>\n</ul>\n</li>\n<li><strong>发送和接收缓冲区</strong>：\n<ul>\n<li>发送方的缓冲区可能会在发送数据时合并多个数据块，而接收方的缓冲区可能会将这些数据块合并成一个完整的消息进行读取。</li>\n</ul>\n</li>\n</ol>\n<p><strong>解决方案</strong></p>\n<ol>\n<li><strong>协议设计</strong>：\n<ul>\n<li>在应用层设计协议时，通常会在数据流中添加分隔符或消息长度字段，以明确消息的边界。例如，可以在每个消息前面加上固定长度的消息头，表示消息的长度。</li>\n</ul>\n</li>\n<li><strong>数据标识</strong>：\n<ul>\n<li>在数据传输过程中使用特定的标识符或分隔符来区分不同的消息。这种方法可以帮助接收方识别和处理不同的数据包。</li>\n</ul>\n</li>\n<li><strong>分段和重组</strong>：\n<ul>\n<li>在应用层进行分段和重组操作，确保从 TCP 流中提取出完整的消息。例如，可以使用协议来处理粘包和拆包问题，确保接收到的数据能够被正确解析。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"一个 TCP 连接能发几个 http 请求？","description":"","answer":"<p>一个 TCP 连接可以发多个 HTTP 请求，具体取决于使用的 HTTP 版本：</p>\n<p><strong>1. HTTP/1.0</strong></p>\n<ul>\n<li><strong>每个请求独立</strong>：HTTP/1.0 默认使用非持久连接（每个请求都需要建立新的 TCP 连接）。因此，每个 HTTP 请求需要一个新的 TCP 连接。</li>\n</ul>\n<p><strong>2. HTTP/1.1</strong></p>\n<ul>\n<li><strong>持久连接</strong>：HTTP/1.1 引入了持久连接（Connection: keep-alive），使得一个 TCP 连接可以发送多个 HTTP 请求和响应。在默认情况下，一个 TCP 连接可以支持多个 HTTP 请求，直到连接被关闭。</li>\n<li><strong>并发请求</strong>：HTTP/1.1 还支持管道化（pipelining），允许在等待响应的同时发送多个请求。但是，管道化有一些限制，如请求顺序和响应顺序。</li>\n</ul>\n<p><strong>3. HTTP/2</strong></p>\n<ul>\n<li><strong>多路复用</strong>：HTTP/2 使用多路复用（multiplexing）技术，允许多个请求和响应在一个 TCP 连接上并发进行，而不会阻塞彼此。每个请求和响应通过流（stream）进行管理，可以有效地减少延迟和提高性能。</li>\n</ul>\n<p><strong>4. HTTP/3</strong></p>\n<ul>\n<li><strong>基于 QUIC 协议</strong>：HTTP/3 使用 QUIC 协议，它在用户数据报协议（UDP）上实现了类似于 HTTP/2 的多路复用功能。它在一个连接上支持多个请求和响应，进一步优化了网络性能。</li>\n</ul>\n"},{"title":"HTTP状态码及其含义","description":"","answer":"<p>HTTP状态码用于表示请求的处理结果，分为五类，通过三位数字快速定位问题类型。</p>\n<p><strong>常见状态码</strong>：</p>\n<ol>\n<li><strong>1xx（信息）</strong>：请求已接收，继续处理（如101协议切换）。</li>\n<li><strong>2xx（成功）</strong>：请求正常处理（200 OK，201 Created）。</li>\n<li><strong>3xx（重定向）</strong>：需额外操作完成请求（301永久重定向，304缓存未修改）。</li>\n<li><strong>4xx（客户端错误）</strong>：请求有误（400参数错误，401未授权，403禁止访问，404未找到资源）。</li>\n<li><strong>5xx（服务端错误）</strong>：服务器处理失败（500内部错误，502网关错误，503服务不可用）。</li>\n</ol>\n<p><strong>前端关注重点</strong>：</p>\n<ul>\n<li><strong>200</strong>：成功获取资源；</li>\n<li><strong>304</strong>：缓存生效，减少请求；</li>\n<li><strong>404/403</strong>：检查资源路径/权限；</li>\n<li><strong>500/503</strong>：提示用户或重试。</li>\n</ul>\n"},{"title":"304 状态码用于什么场景","description":"","answer":"<p><strong>304 状态码</strong>表示“未修改”（Not Modified），用于缓存机制中。它告知客户端缓存的资源仍然有效，无需重新下载。</p>\n<p><strong>场景</strong>：</p>\n<ul>\n<li><strong>缓存优化</strong>：当客户端请求一个资源时，服务器可以通过 <code>If-Modified-Since</code> 或 <code>If-None-Match</code> 头部判断该资源是否被修改。如果资源未修改，服务器返回 304 状态码，客户端继续使用缓存中的资源。</li>\n</ul>\n<p><strong>好处</strong>：</p>\n<ol>\n<li><strong>减少带宽消耗</strong>：避免重复传输未改变的资源，节省了网络带宽。</li>\n<li><strong>提高加载速度</strong>：客户端可以使用缓存资源，减少了服务器的响应时间。</li>\n<li><strong>降低服务器负载</strong>：减少了对服务器的请求处理，降低了负载。</li>\n</ol>\n<p><strong>坏处</strong>：</p>\n<ol>\n<li><strong>缓存问题</strong>：如果缓存策略设置不当，可能会导致客户端获取到过时的资源。</li>\n<li><strong>复杂性</strong>：需要正确配置缓存头部和验证机制，增加了开发和维护的复杂性。</li>\n<li><strong>可能的延迟</strong>：在一些网络环境中，验证资源是否修改的请求和响应可能导致额外的延迟，尽管这个延迟通常较小。</li>\n</ol>\n"},{"title":"强缓存和协商缓存分别是什么？","description":"","answer":"<p>这里说的缓存是指浏览器（客户端）在本地磁盘中对访问过的资源保存的副本文件。</p>\n<p>浏览器缓存主要有以下几个优点：</p>\n<ul>\n<li>减少重复数据请求，避免通过网络再次加载资源，节省流量。</li>\n<li>降低服务器的压力，提升网站性能。</li>\n<li>加快客户端加载网页的速度， 提升用户体验。</li>\n</ul>\n<p>浏览器缓存分为强缓存和协商缓存，两者有两个比较明显的区别：</p>\n<ul>\n<li>如果浏览器命中强缓存，则不需要给服务器发请求；而协商缓存最终由服务器来决定是否使用缓存，即客户端与服务器之间存在一次通信。</li>\n<li>在 chrome 中强缓存（虽然没有发出真实的 http 请求）的请求状态码返回是 200 (from cache)；而协商缓存如果命中走缓存的话，请求的状态码是 304 (not modified)。 不同浏览器的策略不同，在 Fire Fox中，from cache 状态码是 304.</li>\n</ul>\n<p><strong>请求流程</strong></p>\n<p>浏览器在第一次请求后缓存资源，再次请求时，会进行下面两个步骤：</p>\n<ul>\n<li>浏览器会获取该缓存资源的 header 中的信息，根据 response header 中的 expires 和 cache-control 来判断是否命中强缓存，如果命中则直接从缓存中获取资源。</li>\n<li>如果没有命中强缓存，浏览器就会发送请求到服务器，这次请求会带上 IF-Modified-Since 或者 IF-None-Match, 它们的值分别是第一次请求返回 Last-Modified或者 Etag，由服务器来对比这一对字段来判断是否命中。如果命中，则服务器返回 304 状态码，并且不会返回资源内容，浏览器会直接从缓存获取；否则服务器最终会返回资源的实际内容，并更新 header 中的相关缓存字段。</li>\n</ul>\n<p><strong>强缓存</strong></p>\n<p>强缓存是根据返回头中的 Expires 或者 Cache-Control 两个字段来控制的，都是表示资源的缓存有效时间。</p>\n<ul>\n<li>Expires 是 http 1.0 的规范，值是一个GMT 格式的时间点字符串，比如 Expires:Mon,18 Oct 2066 23:59:59 GMT 。这个时间点代表资源失效的时间，如果当前的时间戳在这个时间之前，则判定命中缓存。有一个缺点是，失效时间是一个绝对时间，如果服务器时间与客户端时间偏差较大时，就会导致缓存混乱。而服务器的时间跟用户的实际时间是不一样是很正常的，所以 Expires 在实际使用中会带来一些麻烦。</li>\n<li>Cache-Control这个字段是 http 1.1 的规范，一般常用该字段的 max-age 值来进行判断，它是一个相对时间，比如 .Cache-Control:max-age=3600 代表资源的有效期是 3600 秒。并且返回头中的 Date 表示消息发送的时间，表示当前资源在 Date ~ Date +3600s 这段时间里都是有效的。不过我在实际使用中常常遇到设置了 max-age 之后，在 max-age 时间内重新访问资源却会返回 304 not modified ，这是由于服务器的时间与本地的时间不同造成的。当然 Cache-Control 还有其他几个值可以设置， 不过相对来说都很少用了：\n<ul>\n<li>no-cache 不使用本地缓存。需要使用协商缓存。</li>\n<li>no-store直接禁止浏览器缓存数据，每次请求资源都会向服务器要完整的资源， 类似于 network 中的 disabled cache。</li>\n<li>public 可以被所有用户缓存，包括终端用户和 cdn 等中间件代理服务器。</li>\n<li>private 只能被终端用户的浏览器缓存。</li>\n</ul>\n</li>\n</ul>\n<p>如果 Cache-Control与 Expires 同时存在的话， Cache-Control 的优先级高于 Expires 。</p>\n<p><strong>协商缓存</strong></p>\n<p>协商缓存是由服务器来确定缓存资源是否可用。 主要涉及到两对属性字段，都是成对出现的，即第一次请求的响应头带上某个字, Last-Modified 或者 Etag，则后续请求则会带上对应的请求字段 If-Modified-Since或者 If-None-Match，若响应头没有 Last-Modified 或者 Etag 字段，则请求头也不会有对应的字段。</p>\n<ul>\n<li>Last-Modified/If-Modified-Since 二者的值都是 GMT 格式的时间字符串， Last-Modified 标记最后文件修改时间， 下一次请求时，请求头中会带上 If-Modified-Since 值就是 Last-Modified 告诉服务器我本地缓存的文件最后修改的时间，在服务器上根据文件的最后修改时间判断资源是否有变化， 如果文件没有变更则返回 304 Not Modified ，请求不会返回资源内容，浏览器直接使用本地缓存。当服务器返回 304 Not Modified 的响应时，response header 中不会再添加的 Last-Modified 去试图更新本地缓存的 Last-Modified， 因为既然资源没有变化，那么 Last-Modified 也就不会改变；如果资源有变化，就正常返回返回资源内容，新的 Last-Modified 会在 response header 返回，并在下次请求之前更新本地缓存的 Last-Modified，下次请求时，If-Modified-Since会启用更新后的 Last-Modified。</li>\n<li>Etag/If-None-Match， 值都是由服务器为每一个资源生成的唯一标识串，只要资源有变化就这个值就会改变。服务器根据文件本身算出一个哈希值并通过 ETag字段返回给浏览器，接收到 If-None-Match 字段以后，服务器通过比较两者是否一致来判定文件内容是否被改变。与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于在服务器上ETag 重新计算过，response header中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。</li>\n</ul>\n<p>HTTP 中并没有指定如何生成 ETag，可以由开发者自行生成，哈希是比较理想的选择。</p>\n"},{"title":"说是 TCP 的三次握手四次挥手","description":"","answer":"<p>TCP的三次握手和四次挥手是建立与断开可靠连接的核心机制，确保数据传输的完整性和有序性。</p>\n<p><strong>三次握手（建立连接）</strong>：</p>\n<ol>\n<li><strong>SYN</strong>：客户端发送SYN（同步）报文，包含初始序列号（Seq=x）。</li>\n<li><strong>SYN-ACK</strong>：服务端响应SYN+ACK（确认）报文，确认号=x+1，携带自身序列号（Seq=y）。</li>\n<li><strong>ACK</strong>：客户端发送ACK（确认）报文，确认号=y+1，双方进入连接状态。</li>\n</ol>\n<p><strong>四次挥手（断开连接）</strong>：</p>\n<ol>\n<li><strong>FIN</strong>：主动方（如客户端）发送FIN（结束）报文，进入FIN_WAIT_1状态。</li>\n<li><strong>ACK</strong>：被动方（如服务端）返回ACK确认，进入CLOSE_WAIT状态；主动方收到后进入FIN_WAIT_2状态。</li>\n<li><strong>FIN</strong>：被动方处理完数据后发送FIN报文，进入LAST_ACK状态。</li>\n<li><strong>ACK</strong>：主动方回复ACK确认，进入TIME_WAIT（等待2MSL确保对方收到），双方关闭连接。</li>\n</ol>\n<p><strong>关键点</strong>：</p>\n<ul>\n<li><strong>三次握手</strong>：防止历史重复连接初始化（两次无法确认双方收发能力）。</li>\n<li><strong>四次挥手</strong>：TCP全双工特性需双向独立关闭，且确保数据完整传输（如服务端可能仍有数据发送）。</li>\n</ul>\n<p><strong>通俗易懂版：</strong></p>\n<p>TCP的三次握手和四次挥手就像两个人打电话时的沟通流程，确保双方都能正常交流后再开始对话，以及礼貌地结束通话后再挂断。</p>\n<p><strong>三次握手（建立连接）</strong></p>\n<ol>\n<li>\n<p><strong>第一次握手</strong>：</p>\n<ul>\n<li>客户端发送“打招呼”信号（SYN）：“我要和你通话，能听到吗？”</li>\n<li>好比你打电话给朋友，先问：“喂，你在吗？”</li>\n</ul>\n</li>\n<li>\n<p><strong>第二次握手</strong>：</p>\n<ul>\n<li>服务端回复“收到”（SYN-ACK）：“我听到了！你能听到我吗？”</li>\n<li>朋友回答：“我在！你能听到我吗？”</li>\n</ul>\n</li>\n<li>\n<p><strong>第三次握手</strong>：</p>\n<ul>\n<li>客户端确认“收到回复”（ACK）：“能听到，开始聊吧！”</li>\n<li>你回应：“能听到，说吧！”</li>\n<li><strong>连接建立</strong>，双方开始传输数据。</li>\n</ul>\n</li>\n</ol>\n<p><strong>为什么是三次？</strong></p>\n<ul>\n<li>避免网络延迟导致的“重复拨号”。比如你第一次问“在吗？”没回应，又重复问，如果对方只回一次，两次握手可能误判连接已建立。</li>\n</ul>\n<p><strong>四次挥手（断开连接）</strong></p>\n<p>假设客户端主动挂断：</p>\n<ol>\n<li>\n<p><strong>第一次挥手</strong>：</p>\n<ul>\n<li>客户端说：“我说完了，准备挂电话了。”（FIN）</li>\n<li>比如你说：“今天先聊到这，我挂了啊。”</li>\n</ul>\n</li>\n<li>\n<p><strong>第二次挥手</strong>：</p>\n<ul>\n<li>服务端回复：“好的，知道了。”（ACK）</li>\n<li>朋友说：“行，等我确认一下还有没有要说的。”</li>\n</ul>\n</li>\n<li>\n<p><strong>第三次挥手</strong>：</p>\n<ul>\n<li>服务端确认后也说：“我也说完了，可以挂了。”（FIN）</li>\n<li>朋友补充：“对了，最后一点…好了，挂吧！”</li>\n</ul>\n</li>\n<li>\n<p><strong>第四次挥手</strong>：</p>\n<ul>\n<li>客户端最后确认：“收到，拜拜！”（ACK）</li>\n<li>你回答：“好的，拜拜！”</li>\n<li><strong>连接关闭</strong>，双方结束通话。</li>\n</ul>\n</li>\n</ol>\n<p><strong>为什么是四次？</strong></p>\n<ul>\n<li>因为挂电话要双方都确认。比如你说完挂断意图后，对方可能还有话要说，需要等对方说完再互相确认。</li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>三次握手</strong>：互相确认“能听清吗？”，防止自说自话。</li>\n<li><strong>四次挥手</strong>：互相确认“都说完了吗？”，防止突然挂断漏话。</li>\n</ul>\n<p>这种机制确保网络传输像真实对话一样可靠，不丢数据、不乱顺序。</p>\n"},{"title":"什么是 HTTP 的队头阻塞?","description":"","answer":""},{"title":"为什么 TCP 需要三次握手，两次可以吗？","description":"","answer":""},{"title":"常见的HTTP请求方法","description":"","answer":"<ol>\n<li><strong>GET</strong>：请求指定的页面信息，并返回实体主体。这是最常用的请求方法，通常用于请求服务器发送资源（如HTML页面）。GET请求的数据会附加在URL之后（即“查询字符串”），以<code>?</code>分隔URL和传输数据，多个参数用<code>&amp;</code>连接。</li>\n<li><strong>POST</strong>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。POST请求的数据被包含在请求体中。POST请求相比GET请求，更适合发送大量数据。</li>\n<li><strong>PUT</strong>：向指定资源位置上传其最新内容（即更新资源）。PUT请求通常用于上传或更新服务器上的资源。</li>\n<li><strong>DELETE</strong>：请求服务器删除指定的页面。DELETE请求通常用于删除服务器上的资源。</li>\n<li><strong>HEAD</strong>：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。HEAD请求常用于检查资源的最新状态或是否存在，而不传输实际内容。</li>\n<li><strong>OPTIONS</strong>：允许客户端查看服务器的性能。它描述了服务器支持的通信选项。例如，它可以被用来确定服务器支持哪些HTTP方法或者是否支持某些特定类型的“内容协商”。</li>\n<li><strong>CONNECT</strong>：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的连接（经由非加密的HTTP代理服务器）。</li>\n<li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试或诊断。然而，由于安全原因（它可能暴露敏感信息），许多服务器默认禁用TRACE请求。</li>\n<li><strong>PATCH</strong>：是对资源进行部分修改。与PUT请求不同，PATCH请求用于对资源进行局部更新，而不是替换整个资源。</li>\n</ol>\n"},{"title":"**HTTP GET 和 POST 请求有什么区别？**","description":"","answer":"<p>HTTP GET 和 POST 请求的核心区别在于<strong>用途、数据传输方式及安全性</strong>，分别适用于获取资源和提交数据。</p>\n<p><strong>具体差异</strong>：</p>\n<ol>\n<li>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><strong>GET</strong>：获取资源（如加载网页、查询数据），<strong>幂等且可缓存</strong>。</li>\n<li><strong>POST</strong>：提交资源（如表单提交、文件上传），<strong>非幂等且不缓存</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据传输</strong>：</p>\n<ul>\n<li><strong>GET</strong>：参数通过URL拼接（如 <code>?key=value</code>），<strong>长度受限</strong>（约2048字符）。</li>\n<li><strong>POST</strong>：数据放在请求体（Body）中，<strong>支持更大数据量和多种格式</strong>（JSON、文件等）。</li>\n</ul>\n</li>\n<li>\n<p><strong>安全性</strong>：</p>\n<ul>\n<li><strong>GET</strong>：参数暴露在URL中，易被记录或泄露（如浏览器历史、日志）。</li>\n<li><strong>POST</strong>：数据隐藏于Body，<strong>相对安全</strong>（但未加密时仍可被截获）。</li>\n</ul>\n</li>\n<li>\n<p><strong>幂等性</strong>：</p>\n<ul>\n<li><strong>GET</strong>：多次请求结果相同（如刷新页面）。</li>\n<li><strong>POST</strong>：多次提交可能产生副作用（如重复下单）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>应用场景</strong>：</p>\n<ul>\n<li><strong>GET</strong>：搜索、分页、静态资源加载。</li>\n<li><strong>POST</strong>：登录、注册、支付等敏感操作。</li>\n</ul>\n<p><strong>总结</strong>：取数据用GET，传数据用POST；敏感信息避免GET，大数据量优先POST。</p>\n"},{"title":"get 和 post 请求在缓存方面有什么区别？","description":"","answer":""},{"title":"get 请求是否限制了传参长度？","description":"","answer":"<ol>\n<li>HTTP 协议未规定 GET 和 POST 的长度限制</li>\n<li>GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度</li>\n<li>不同的浏览器和 WEB 服务器，限制的最大长度不一样</li>\n<li>要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte</li>\n</ol>\n"},{"title":"解释 RESTful API 的设计原则","description":"","answer":""},{"title":"介绍下 WebSocket","description":"","answer":"<ol>\n<li><strong>WebSocket 是什么</strong></li>\n</ol>\n<p>WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>\n<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p>\n<p><strong>WebSocket原理</strong> ：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。</p>\n<p><strong>2. WebSocket 特点</strong></p>\n<ul>\n<li>支持双向通信，实时性更强</li>\n<li>可以发送文本，也可以发送二进制数据‘’</li>\n<li>建立在TCP协议之上，服务端的实现比较容易</li>\n<li>数据格式比较轻量，性能开销小，通信高效</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li>\n<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n</ul>\n"},{"title":"Websoket 和 HTTP 有什么区别？","description":"","answer":"<p>WebSocket 和 HTTP 的核心区别在于<strong>通信模式与实时性</strong>，前者支持全双工实时交互，后者基于短连接的请求-响应模式。</p>\n<p><strong>具体差异</strong>：</p>\n<ol>\n<li>\n<p><strong>连接方式</strong>：</p>\n<ul>\n<li><strong>HTTP</strong>：短连接，每次请求需重新建立TCP连接（HTTP/1.1后支持Keep-Alive，但本质仍是串行请求）。</li>\n<li><strong>WebSocket</strong>：长连接，一次握手后保持连接，双方可主动推送数据。</li>\n</ul>\n</li>\n<li>\n<p><strong>通信模式</strong>：</p>\n<ul>\n<li><strong>HTTP</strong>：客户端发起请求 → 服务端响应（单向，实时性差）。</li>\n<li><strong>WebSocket</strong>：客户端/服务端均可主动发送消息（双向实时通信）。</li>\n</ul>\n</li>\n<li>\n<p><strong>头部开销</strong>：</p>\n<ul>\n<li><strong>HTTP</strong>：每次请求携带完整头部（如Cookie、User-Agent），冗余开销大。</li>\n<li><strong>WebSocket</strong>：建立连接后数据帧头部仅2~14字节，传输效率高。</li>\n</ul>\n</li>\n<li>\n<p><strong>适用场景</strong>：</p>\n<ul>\n<li><strong>HTTP</strong>：静态资源加载、RESTful API、传统网页交互。</li>\n<li><strong>WebSocket</strong>：实时聊天、在线游戏、股票行情推送、协同编辑。</li>\n</ul>\n</li>\n<li>\n<p><strong>协议关系</strong>：</p>\n<ul>\n<li><strong>WebSocket</strong>：基于HTTP协议升级（握手阶段使用HTTP），建立后独立于HTTP运行。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong>：需实时双向通信（如消息推送）用WebSocket，传统数据交互用HTTP。</p>\n"},{"title":"即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？","description":"","answer":"<p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>\n<p><strong>短轮询的基本思路是</strong> 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>\n<p><strong>长轮询的基本思路是</strong> 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>\n<p><strong>SSE 的基本思想是</strong> 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>\n<p><strong>WebSocket</strong> 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>\n<p><strong>上面的四个通信协议，前三个都是基于HTTP协议的。</strong> 对于这四种即使通信协议，从性能的角度来看： <strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong> 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： <strong>短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket</strong> 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>\n"},{"title":"http 中的 post 请求发生了两次（多了一次 options 请求）的原因","description":"","answer":"<p>浏览器在发送某些跨域POST请求前会先发送<strong>OPTIONS预检请求</strong>，以确认服务器是否允许实际请求的方法和头信息，这是由CORS（跨域资源共享）安全机制触发的。</p>\n<p><strong>具体原因</strong>：</p>\n<ol>\n<li>\n<p><strong>非简单请求</strong>：当POST请求满足以下任一条件时，触发预检：</p>\n<ul>\n<li>自定义头部（如<code>Authorization</code>、<code>X-Custom-Header</code>）；</li>\n<li><code>Content-Type</code>非简单值（如<code>application/json</code>）；</li>\n<li>其他非安全方法或配置（如<code>DELETE</code>请求）。</li>\n</ul>\n</li>\n<li>\n<p><strong>预检流程</strong>：</p>\n<ul>\n<li><strong>OPTIONS请求</strong>：浏览器自动发送，询问服务器是否支持实际请求的方法和头；</li>\n<li><strong>服务器响应</strong>：需返回<code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code>等CORS头；</li>\n<li><strong>正式POST请求</strong>：预检通过后，浏览器发送真实POST请求。</li>\n</ul>\n</li>\n</ol>\n<p><strong>解决方案</strong>：</p>\n<ul>\n<li><strong>服务器配置</strong>：正确处理OPTIONS请求，返回允许的跨域头；</li>\n<li><strong>简化请求</strong>：避免自定义头，使用简单<code>Content-Type</code>（如<code>application/x-www-form-urlencoded</code>）。</li>\n</ul>\n"},{"title":"介绍下 HTTPS 中间人攻击","description":"","answer":"<p>HTTPS中间人攻击（MITM）是攻击者伪装成通信双方拦截并篡改数据的行为，其核心绕过HTTPS的安全机制窃取敏感信息。</p>\n<p><strong>攻击过程与防御</strong>：</p>\n<ol>\n<li>\n<p><strong>攻击步骤</strong>：</p>\n<ul>\n<li><strong>劫持连接</strong>：攻击者通过ARP欺骗、恶意WiFi等手段成为通信中间代理。</li>\n<li><strong>伪造证书</strong>：使用自签名证书或非法CA证书欺骗客户端（如用户忽略浏览器警告）。</li>\n<li><strong>解密中转</strong>：拦截客户端与服务端的TLS握手，分别建立加密连接，明文获取数据。</li>\n</ul>\n</li>\n<li>\n<p><strong>HTTPS防御机制</strong>：</p>\n<ul>\n<li><strong>证书链校验</strong>：浏览器验证证书是否由可信CA签发，域名是否匹配，是否过期或被吊销。</li>\n<li><strong>加密传输</strong>：通过非对称加密交换密钥，后续数据由对称加密保护（如AES-256）。</li>\n</ul>\n</li>\n<li>\n<p><strong>前端注意事项</strong>：</p>\n<ul>\n<li><strong>禁用混合内容</strong>：确保页面内所有资源（图片、脚本）均为HTTPS，避免降级攻击。</li>\n<li><strong>启用HSTS</strong>：通过HTTP头<code>Strict-Transport-Security</code>强制浏览器仅使用HTTPS。</li>\n<li><strong>用户教育</strong>：提示用户切勿在浏览器证书告警页面继续访问。</li>\n</ul>\n</li>\n</ol>\n<p><strong>真实案例</strong>：公共WiFi中攻击者伪造银行网站，诱导用户输入账号密码。HTTPS若正确配置可拦截此类攻击，但用户主动忽略证书错误仍会中招。</p>\n"},{"title":"DNS 协议了解多少？","description":"","answer":"<p>DNS协议是互联网中将域名转换为IP地址的核心系统，确保用户通过易记的域名访问网络资源。</p>\n<p><strong>核心要点</strong>：</p>\n<ol>\n<li>\n<p><strong>核心功能</strong>：</p>\n<ul>\n<li><strong>域名解析</strong>：将<code>www.example.com</code>转换为<code>93.184.216.34</code>（IPv4）或<code>2606:2800:220:1:248:1893:25c8:1946</code>（IPv6）。</li>\n<li><strong>分层结构</strong>：\n<ul>\n<li><strong>根域名服务器</strong>：全球13组，指向顶级域（如<code>.com</code>）。</li>\n<li><strong>顶级域（TLD）服务器</strong>：管理<code>.com</code>、<code>.org</code>等后缀。</li>\n<li><strong>权威域名服务器</strong>：托管具体域名的IP记录（如<code>example.com</code>）。</li>\n<li><strong>本地DNS服务器</strong>：由ISP或企业提供，缓存查询结果。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>查询流程</strong>（以访问<code>www.example.com</code>为例）：</p>\n<ul>\n<li><strong>递归查询</strong>（客户端→本地DNS）：\n<ol>\n<li>客户端向本地DNS请求解析。</li>\n<li>本地DNS依次查询根→<code>.com</code>→<code>example.com</code>权威服务器，最终返回IP。</li>\n</ol>\n</li>\n<li><strong>迭代查询</strong>（本地DNS自主完成多级查询）。</li>\n</ul>\n</li>\n<li>\n<p><strong>记录类型</strong>：</p>\n<ul>\n<li><strong>A记录</strong>：IPv4地址。</li>\n<li><strong>AAAA记录</strong>：IPv6地址。</li>\n<li><strong>CNAME</strong>：域名别名（如将<code>blog.example.com</code>指向<code>example.com</code>）。</li>\n<li><strong>MX记录</strong>：邮件服务器地址（如<code>mail.example.com</code>）。</li>\n<li><strong>TXT记录</strong>：文本信息（如SPF反垃圾邮件配置）。</li>\n</ul>\n</li>\n<li>\n<p><strong>协议细节</strong>：</p>\n<ul>\n<li><strong>传输协议</strong>：默认UDP 53端口（快速），数据超512字节或区域传输时用TCP。</li>\n<li><strong>缓存机制</strong>：TTL（生存时间）控制缓存有效期，减少重复查询。</li>\n</ul>\n</li>\n<li>\n<p><strong>安全性</strong>：</p>\n<ul>\n<li><strong>DNS劫持</strong>：篡改解析结果（如恶意WiFi）。</li>\n<li><strong>DNSSEC</strong>：通过数字签名验证响应真实性，防篡改。</li>\n<li><strong>DoH/DoT</strong>：DNS over HTTPS/TLS加密查询，防窃听。</li>\n</ul>\n</li>\n</ol>\n<p><strong>前端相关</strong>：</p>\n<ul>\n<li><strong>性能优化</strong>：减少DNS查询次数（合并域名、预解析<code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code>）。</li>\n<li><strong>CDN加速</strong>：通过智能DNS解析用户至最近节点。</li>\n</ul>\n<p><strong>示例命令</strong>：</p>\n<pre><code class=\"language-shell\"><div class=\"language-shell \"><span class=\"lang\">shell</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">nslookup</span><span style=\"color:#B56959\"> www.example.com</span><span style=\"color:#A0ADA0\">      # 查询A记录  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">dig</span><span style=\"color:#B56959\"> example.com</span><span style=\"color:#B56959\"> MX</span><span style=\"color:#A0ADA0\">            # 查询MX记录  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong>：DNS是互联网的“电话簿”，其高效解析依赖分层架构与缓存，安全性需结合DNSSEC和加密协议保障。</p>\n"},{"title":"什么是 DNS 预解析？如何实现？","description":"","answer":"<p><strong>DNS优化</strong></p>\n<p>在介绍<code>dns-prefetch</code>之前，先要提下当前对于DNS优化主流方法。</p>\n<p>一般来说，一次DNS解析需要耗费 20-120ms，所以为了优化DNS，我们可以考虑两个方向：</p>\n<ol>\n<li>减少DNS请求次数</li>\n<li>缩短DNS解析时间<code>dns-prefetch</code></li>\n</ol>\n<p><strong>什么是dns-prefetch？</strong></p>\n<p><code>dns-prefetch</code>(<strong>DNS预获取</strong>)是前端网络性能优化的一种措施。它根据浏览器定义的规则，<strong>提前解析</strong>之后可能会用到的域名，使解析结果<strong>缓存到系统缓存</strong>中，缩短DNS解析时间，进而提高网站的访问速度。</p>\n<p><strong>为什么要用dns-prefetch？</strong></p>\n<p>每当浏览器从（第三方）服务器发送一次请求时，都要先通过<strong>DNS解析</strong>将该跨域域名解析为 IP地址，然后浏览器才能发出请求。</p>\n<p>如果某一时间内，有多个请求都发送给同一个服务器，那么DNS解析会多次并且重复触发。这样会导致整体的网页加载有延迟的情况。</p>\n<p>我们知道，虽然DNS解析占用不了多大带宽，但是它会产生很高的延迟，尤其是对于移动网络会更为明显。</p>\n<p>因此，为了减少DNS解析产生的延迟，我们可以通过<code>dns-prefetch</code>预解析技术有效地缩短DNS解析时间。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>&#x3C;link rel=\"dns-prefetch\" href=\"https://baidu.com/\"> </span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>dns-prefetch背后原理</strong></p>\n<p>当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。 在解析过程中，按照:</p>\n<ul>\n<li>浏览器缓存</li>\n<li>系统缓存</li>\n<li>路由器缓存</li>\n<li>ISP(运营商)DNS缓存</li>\n<li>根域名服务器</li>\n<li>顶级域名服务器</li>\n<li>主域名服务器</li>\n</ul>\n<p>的顺序逐步读取缓存，直到拿到IP地址。</p>\n<p><code>dns-prefetch</code>就是在<strong>将解析后的IP缓存在系统中</strong>。</p>\n<p>这样，<code>dns-prefetch</code>就有效地缩短了DNS解析时间。因为，在本地操作系统做了DNS缓存，使得DNS在解析的过程中，提前在系统缓存中找到了对应IP。</p>\n<p>这样一来， 后续的解析步骤就不用执行了，进而也就缩短了DNS解析时间。</p>\n<p>假如浏览器<strong>首次将一个域名解析为IP地址</strong>，并<strong>缓存至操作系统</strong>，那么下一次DNS解析时间可以低至<strong>0-1ms</strong>。</p>\n<p>倘若结果不缓存在系统，那么就需要读取<strong>路由器的缓存</strong>，进而后续的解析时间最小也要约<strong>15ms</strong>。</p>\n<p>如果路由器缓存也不存在，则需要读取<strong>ISP（运营商）DNS缓存</strong>，一般像<code>taobao.com</code>、<code>baidu.com</code>这些常见的域名，读取ISP（运营商）DNS缓存需要的时间在<strong>80-120ms</strong>，如果是不常见的域名，平均需要<strong>200-300ms</strong>。</p>\n<p>一般来说，大部分的网站到运营商这块都能找到IP。</p>\n<p>那也就是说，<code>dns-prefetch</code>可以给DNS解析过程带来15-300ms的提升，尤其是一些大量引用很多其他域名资源的网站，提升效果就更加明显了</p>\n<p><strong>浏览器DNS缓存与dns-prefetch</strong></p>\n<p>现代浏览器为了优化DNS解析，也设有了浏览器DNS缓存。</p>\n<p>每当在首次DNS解析后会对其IP进行缓存。至于缓存时长，每种浏览器都不一样，比如Chrome的过期时间是1分钟，在这个期限内不会重新请求DNS。</p>\n<blockquote>\n<p>Tip:\n每当Chrome浏览器启动的时候，就会自动的快速解析浏览器最近一次启动时记录的前10个域名。所以经常访问的网址就不存在DNS解析的延迟，进而打开速度更快。</p>\n</blockquote>\n<p>而<code>dns-prefetch</code> 相当于在浏览器缓存之后，在本地操作系统中做了DNS缓存，个人理解，为的是给浏览器缓存做保障，尽量让DNS解析出本地，以此来做了又一层DNS解析优化。</p>\n<p>一般来说，DNS在系统的缓存时间是大于浏览器的。</p>\n<p><strong>浏览器与系统DNS缓存时间</strong></p>\n<blockquote>\n<p>TTL(Time-To-Live)，就是一条域名解析记录在DNS服务器中的存留时间</p>\n</blockquote>\n<ul>\n<li><strong>浏览器DNS缓存的时间跟DNS服务器返回的TTL值无关</strong>, 它的缓存时间取决于浏览器自身设置。</li>\n<li><strong>系统缓存会参考DNS服务器响应的TTL值，但是不完全等于TTL值</strong>。</li>\n</ul>\n<p>国内和国际上很多平台的TTL值都是以秒为单位的，很多的默认值都是3600，也就是默认缓存1小时。</p>\n<p><strong><code>dns-prefetch</code>缺点</strong></p>\n<p><code>dns-prefetch</code>最大的缺点就是使用它太多。</p>\n<p>过多的预获取会导致过量的DNS解析，对网络是一种负担。</p>\n<p><strong>最佳实践</strong></p>\n<p>请记住以下三点：</p>\n<ol>\n<li><code>dns-prefetch</code> 仅对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">跨域</a>域上的 DNS查找有效，因此请避免使用它来指向相同域。这是因为，到浏览器看到提示时，您站点域背后的IP已经被解析。</li>\n<li>除了link 还可以通过使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP链接字段</a>将 <code>dns-prefetch</code>（以及其他资源提示）指定为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP标头</a>：</li>\n</ol>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>Link: &#x3C;https://fonts.gstatic.com/>; rel=dns-prefetch</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol>\n<li>考虑将 <code>dns-prefetch</code> 与 <code>preconnect(</code>预连接<code>)</code>提示配对。</li>\n</ol>\n<p>由于<code>dns-prefetch</code> 仅执行 DNS查找，不像<code>preconnect</code> 会建立与服务器的连接。</p>\n<p>如果站点是通过HTTPS服务的，两者的组合会涵盖DNS解析，建立TCP连接以及执行TLS握手。将两者结合起来可提供进一步减少<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">跨域请求</a>的感知延迟的机会。如下所示：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>&#x3C;link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin></span></span>\n<span class=\"line\"><span>&#x3C;link rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com/\"></span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>Note</strong>: 如果页面需要建立与许多第三方域的连接，则将它们预先连接会适得其反。 <code>preconnect</code> 提示最好仅用于最关键的连接。对于其他的，只需使用 <code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code> 即可节省第一步的时间DNS查找。</p>\n"},{"title":"谈谈你对 Nginx 的了解","description":"","answer":""},{"title":"什么是正向代理，反向代理?","description":"<p>正向代理是<strong>客户端</strong>的代理，帮助客户端访问外部资源；反向代理是<strong>服务端</strong>的代理，替服务器接收并分发客户端请求。</p>\n<p><strong>正向代理（Forward Proxy）</strong></p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><strong>代理对象</strong>：代表客户端（如浏览器）访问目标服务器。</li>\n<li><strong>隐藏客户端</strong>：目标服务器只知道代理的IP，无法识别真实用户。</li>\n<li><strong>用途</strong>：\n<ul>\n<li>突破访问限制（如科学上网）；</li>\n<li>统一控制客户端访问权限（如企业内网过滤）；</li>\n<li>缓存资源加速访问（如代理服务器缓存静态文件）。<br>\n<strong>示例工具</strong>：Shadowsocks、Squid、Charles（开发调试）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>反向代理（Reverse Proxy）</strong></p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><strong>代理对象</strong>：代表服务端接收客户端请求，转发到内部服务器。</li>\n<li><strong>隐藏服务端</strong>：客户端不知道真实服务器IP，仅与代理交互。</li>\n<li><strong>用途</strong>：\n<ul>\n<li>负载均衡（如Nginx轮询分发请求到多台服务器）；</li>\n<li>安全防护（如隐藏后端服务，防御DDoS攻击）；</li>\n<li>统一SSL加密（由代理处理HTTPS，降低后端压力）；</li>\n<li>路由分发（如根据URL路径指向不同服务）。<br>\n<strong>示例工具</strong>：Nginx、HAProxy、Cloudflare CDN。</li>\n</ul>\n</li>\n</ul>\n<p><strong>对比总结</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>特征</strong></th>\n<th>正向代理</th>\n<th>反向代理</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"什么是 JWT","description":"","answer":"<p>JWT（JSON Web Token）是一种<strong>开放标准（RFC 7519）的轻量级身份验证和授权协议</strong>，通过JSON格式安全传输信息，通常用于无状态的用户身份验证。</p>\n<p><strong>核心组成</strong></p>\n<ol>\n<li>\n<p><strong>Header（头部）</strong>：</p>\n<ul>\n<li>声明令牌类型（<code>typ: &quot;JWT&quot;</code>）和签名算法（如<code>alg: &quot;HS256&quot;</code>）。</li>\n<li>示例：<code>{&quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;}</code> → Base64编码。</li>\n</ul>\n</li>\n<li>\n<p><strong>Payload（载荷）</strong>：</p>\n<ul>\n<li>携带用户身份数据（如用户ID、角色）和其他声明（如过期时间<code>exp</code>、签发者<code>iss</code>）。</li>\n<li>示例：<code>{&quot;sub&quot;: &quot;123&quot;, &quot;name&quot;: &quot;Alice&quot;, &quot;exp&quot;: 1717020000}</code> → Base64编码。</li>\n</ul>\n</li>\n<li>\n<p><strong>Signature（签名）</strong>：</p>\n<ul>\n<li>对前两部分拼接后的字符串，通过密钥（如<code>secretKey</code>）和指定算法（如HMAC SHA256）生成签名，防止数据篡改。</li>\n<li>公式：<code>签名 = HMACSHA256(base64(Header) + &quot;.&quot; + base64(Payload), secretKey)</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>工作流程</strong></p>\n<ol>\n<li><strong>登录认证</strong>：\n<ul>\n<li>用户提交凭证（如账号密码），服务端验证通过后生成JWT返回客户端。</li>\n</ul>\n</li>\n<li><strong>携带令牌</strong>：\n<ul>\n<li>客户端后续请求在<code>Authorization</code>头中添加<code>Bearer &lt;JWT&gt;</code>。</li>\n</ul>\n</li>\n<li><strong>服务端验证</strong>：\n<ul>\n<li>解析JWT签名是否有效，校验载荷（如是否过期）后授权访问。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优点</strong></p>\n<ul>\n<li><strong>无状态</strong>：服务端无需存储会话（如Session），适合分布式系统。</li>\n<li><strong>跨域支持</strong>：轻松实现单点登录（SSO）。</li>\n<li><strong>数据自包含</strong>：减少数据库查询（如直接从Payload读取用户ID）。</li>\n</ul>\n<p><strong>缺点与注意事项</strong></p>\n<ul>\n<li><strong>无法主动失效</strong>：令牌在过期前有效（可通过黑名单或短有效期缓解）。</li>\n<li><strong>数据暴露风险</strong>：Payload仅Base64编码，敏感信息需加密（如JWE）。</li>\n<li><strong>存储安全</strong>：前端需防XSS攻击（避免<code>localStorage</code>，优先<code>HttpOnly Cookie</code>）。</li>\n</ul>\n<p><strong>前端应用示例</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 存储JWT  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">localStorage</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setItem</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">token</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> jwt</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 请求时携带  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/api/data</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  headers</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">Authorization</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">Bearer </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">localStorage</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getItem</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">token</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong>：JWT适用于无状态、跨服务的认证场景，但需结合业务权衡安全性与便利性。</p>\n"},{"title":"如何避免缓存问题导致的资源更新失败？","description":"","answer":"<p>避免缓存导致资源更新失败的核心策略是<strong>强制客户端获取最新版本</strong>，可通过文件名哈希、版本号或缓存控制头实现。</p>\n<p><strong>具体方法</strong>：</p>\n<ol>\n<li>\n<p><strong>文件名哈希</strong>：</p>\n<ul>\n<li>构建工具（如Webpack）为资源生成唯一哈希（如<code>app.a3b4c5.js</code>），文件内容变化则哈希改变，直接更新引用路径。</li>\n</ul>\n</li>\n<li>\n<p><strong>查询参数版本化</strong>：</p>\n<ul>\n<li>在资源URL后添加版本参数（如<code>style.css?v=2.0.0</code>），更新版本号即可刷新缓存。</li>\n</ul>\n</li>\n<li>\n<p><strong>HTTP缓存头控制</strong>：</p>\n<ul>\n<li><strong>HTML文件</strong>：设置<code>Cache-Control: no-cache</code>或<code>max-age=0</code>，确保始终验证更新。</li>\n<li><strong>静态资源</strong>：设置长缓存<code>Cache-Control: max-age=31536000</code>，依赖文件名哈希（内容变则URL变）。</li>\n</ul>\n</li>\n<li>\n<p><strong>服务端配置</strong>：</p>\n<ul>\n<li>CDN或Nginx配置<code>ETag</code>/<code>Last-Modified</code>，结合内容变化自动刷新缓存。</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-html\"><div class=\"language-html \"><span class=\"lang\">html</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">&#x3C;!-- 文件名哈希 --></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">script</span><span style=\"color:#B07D48\"> src</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/app.3e4f5a.js</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">>&#x3C;/</span><span style=\"color:#1E754F\">script</span><span style=\"color:#999999\">>  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">&#x3C;!-- 查询参数 --></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">link</span><span style=\"color:#B07D48\"> href</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/styles.css?v=20231001</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> rel</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">stylesheet</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong>：哈希文件名是生产环境最佳实践，开发环境可结合禁用缓存（如Chrome DevTools禁用缓存选项）快速调试。</p>\n"},{"title":"什么是 ETag 和 Last-Modified？它们的优先级如何？","description":"","answer":""},{"title":"HTTPS 中的 SSL/TLS 是什么？","description":"","answer":"<p>HTTPS（Hypertext Transfer Protocol Secure）是HTTP的安全版本，它通过SSL/TLS协议对数据进行加密，确保数据在传输过程中保持机密性和完整性。下面是对SSL和TLS的详细介绍：</p>\n<p><strong>SSL（Secure Sockets Layer）</strong></p>\n<ul>\n<li><strong>定义</strong>：SSL是最早的安全协议，用于在网络上加密传输的数据。它确保数据在客户端和服务器之间的传输是安全的。</li>\n<li><strong>历史</strong>：SSL最初由Netscape开发，主要包括SSL 2.0和SSL 3.0两个版本。由于SSL 2.0和SSL 3.0存在一些安全漏洞，它们已经被淘汰。</li>\n</ul>\n<p><strong>TLS（Transport Layer Security）</strong></p>\n<ul>\n<li><strong>定义</strong>：TLS是SSL的继任者，是一种用于保护网络通信的加密协议。TLS对数据进行加密，确保数据在传输过程中不被窃取或篡改。</li>\n<li><strong>版本</strong>：TLS 从 TLS 1.0 开始，到当前的 TLS 1.3。每个版本都在前一个版本的基础上进行改进，增强了安全性和性能。</li>\n</ul>\n<p><strong>SSL/TLS 工作原理</strong></p>\n<ol>\n<li><strong>握手过程（Handshake）</strong>\n<ul>\n<li><strong>客户端发起连接</strong>：客户端向服务器发送一个“ClientHello”消息，包含了客户端支持的加密算法、TLS版本等信息。</li>\n<li><strong>服务器响应</strong>：服务器回应一个“ServerHello”消息，选择加密算法、TLS版本并发送服务器的数字证书。</li>\n<li><strong>证书验证</strong>：客户端使用服务器提供的证书验证服务器的身份。如果证书有效，客户端会生成一个“pre-master secret”并用服务器的公钥加密后发送给服务器。</li>\n<li><strong>密钥交换</strong>：服务器使用其私钥解密“pre-master secret”，双方使用这个密钥生成对称加密密钥（session key），用于加密后续的通信数据。</li>\n</ul>\n</li>\n<li><strong>数据加密和传输</strong>\n<ul>\n<li><strong>加密数据</strong>：客户端和服务器使用会话密钥对数据进行加密，然后进行数据传输。</li>\n<li><strong>数据完整性</strong>：数据不仅被加密，还通过消息认证码（MAC）进行完整性检查，防止数据被篡改。</li>\n</ul>\n</li>\n<li><strong>连接关闭</strong>\n<ul>\n<li><strong>关闭连接</strong>：当通信结束时，双方会通过“close_notify”消息来优雅地关闭连接，确保所有的数据都被正确传输。</li>\n</ul>\n</li>\n</ol>\n<p><strong>SSL/TLS 主要功能</strong></p>\n<ul>\n<li><strong>加密</strong>：SSL/TLS通过对数据进行加密，保护数据在传输过程中不被窃取。</li>\n<li><strong>身份验证</strong>：通过数字证书验证服务器的身份，防止中间人攻击。</li>\n<li><strong>数据完整性</strong>：通过消息认证码（MAC）确保数据在传输过程中没有被篡改。</li>\n</ul>\n<p><strong>常见的 SSL/TLS 证书类型</strong></p>\n<ul>\n<li><strong>自签名证书</strong>：由证书持有者自己签发的证书，通常用于开发和测试环境，不被浏览器信任。</li>\n<li><strong>域名验证证书（DV）</strong>：验证申请者对域名的控制权，适合个人和小型网站。</li>\n<li><strong>组织验证证书（OV）</strong>：验证申请者的身份和组织合法性，适合企业和组织。</li>\n<li><strong>扩展验证证书（EV）</strong>：提供最高级别的身份验证和信任，显示公司名称在地址栏中。</li>\n</ul>\n"},{"title":"前端单页应用 History 路由模式， 需要如何配置 nginx？","description":"","answer":"<p>前端单页应用使用 History 路由模式，需要将路由的控制交给前端，而不是后端处理，因此需要配置 nginx 让其将所有请求都指向 index.html 页面，让前端来处理路由。</p>\n<p>具体配置可以参考以下 nginx 配置：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>bashCopy codeserver {</span></span>\n<span class=\"line\"><span>    listen       80;</span></span>\n<span class=\"line\"><span>    server_name  example.com; # 域名或 IP 地址</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    location / {</span></span>\n<span class=\"line\"><span>        root   /path/to/your/app; # 项目根目录</span></span>\n<span class=\"line\"><span>        index  index.html;</span></span>\n<span class=\"line\"><span>        try_files $uri $uri/ /index.html; # 将所有请求都指向 index.html 页面</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>以上配置中，<code>try_files</code> 指令会尝试将请求映射到对应的文件，如果找不到，则会将请求转发到 <code>/index.html</code> 页面，由前端来处理路由。同时，<code>root</code> 指令需要指向前端应用的根目录。</p>\n"},{"title":"HTTP Header 中有哪些信息？","description":"","answer":""},{"title":"什么是 CDN？它的工作原理是什么？","description":"","answer":""},{"title":"CORS 是如何实现跨域的？","description":"","answer":"<p>CORS（Cross-Origin Resource Sharing）是一种用于实现跨域请求的机制，允许浏览器和服务器之间在不同源之间共享资源。CORS 通过在 HTTP 头部添加特定的字段来控制跨域访问。以下是 CORS 的工作原理及实现细节：</p>\n<p><strong>1. CORS 工作原理</strong></p>\n<p><strong>1.1 浏览器发起跨域请求</strong></p>\n<p>当浏览器发起一个跨域请求时，它会先发送一个预检请求（preflight request），以检查服务器是否允许实际请求。这是通过发送一个 <code>OPTIONS</code> 请求来实现的，主要用于确认目标服务器是否允许跨域请求。</p>\n<p><strong>1.2 服务器响应</strong></p>\n<p>服务器需要在响应中包含适当的 CORS 头部，以指示是否允许跨域请求。主要的 CORS 头部包括：</p>\n<ul>\n<li><strong><code>Access-Control-Allow-Origin</code></strong>：指定允许的源。可以是具体的域名，如 <code>https://example.com</code>，或通配符 <code>*</code>（允许所有源）。</li>\n<li><strong><code>Access-Control-Allow-Methods</code></strong>：指定允许的方法，如 <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>。</li>\n<li><strong><code>Access-Control-Allow-Headers</code></strong>：指定允许的请求头，如 <code>Content-Type</code>, <code>Authorization</code>。</li>\n<li><strong><code>Access-Control-Allow-Credentials</code></strong>：指示是否允许发送带有凭据（如 Cookies）的请求。</li>\n<li><strong><code>Access-Control-Max-Age</code></strong>：指示预检请求的结果可以缓存的时间（以秒为单位）。</li>\n</ul>\n<p><strong>1.3 客户端处理响应</strong></p>\n<ul>\n<li><strong>简单请求</strong>：如果请求满足 CORS 规则（如使用 <code>GET</code> 或 <code>POST</code> 方法，且请求头仅包括简单头部），浏览器会直接发送实际请求并处理响应。</li>\n<li><strong>预检请求</strong>：对于复杂请求（如使用 <code>PUT</code> 方法或带有自定义头部），浏览器会先发送 <code>OPTIONS</code> 请求，然后根据服务器的响应决定是否发送实际请求。</li>\n</ul>\n<p><strong>2. 请求类型</strong></p>\n<p><strong>2.1 简单请求</strong></p>\n<p>满足以下条件的请求被认为是简单请求，不需要预检请求：</p>\n<ul>\n<li>方法：<code>GET</code>, <code>POST</code>, <code>HEAD</code></li>\n<li>请求头：<code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code>, <code>Content-Type</code>（值为 <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, <code>text/plain</code>）</li>\n</ul>\n<p><strong>2.2 复杂请求</strong></p>\n<p>不符合简单请求条件的请求会被认为是复杂请求，需要先发送预检请求。复杂请求包括：</p>\n<ul>\n<li>方法：<code>PUT</code>, <code>DELETE</code>, <code>OPTIONS</code></li>\n<li>请求头：<code>Authorization</code>, <code>Content-Type</code>（值为其他非简单值）</li>\n</ul>\n<p><strong>3. 服务器设置</strong></p>\n<p><strong>3.1 响应 CORS 头部</strong></p>\n<p>服务器需要在响应中包含必要的 CORS 头部。例如：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>HTTP/1.1 200 OK</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Origin: https://example.com</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Methods: GET, POST, PUT</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Headers: Content-Type, Authorization</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>3.2 处理预检请求</strong></p>\n<p>对于预检请求，服务器需要回应适当的 CORS 头部：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>HTTP/1.1 204 No Content</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Origin: https://example.com</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Methods: GET, POST, PUT</span></span>\n<span class=\"line\"><span>Access-Control-Allow-Headers: Content-Type, Authorization</span></span>\n<span class=\"line\"><span>Access-Control-Max-Age: 3600</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>4. CORS 的安全性</strong></p>\n<ul>\n<li><strong><code>Access-Control-Allow-Origin</code></strong>：避免使用通配符 <code>*</code>，特别是当使用 <code>Credentials</code> 时，以确保跨域请求只被信任的源访问。</li>\n<li><strong><code>Access-Control-Allow-Credentials</code></strong>：当设置为 <code>true</code> 时，<code>Access-Control-Allow-Origin</code> 不能为 <code>*</code>，必须为具体的源。</li>\n<li><strong><code>Access-Control-Allow-Headers</code></strong> 和 <strong><code>Access-Control-Allow-Methods</code></strong>：应限制仅允许必要的头部和方法，以减少安全风险。</li>\n</ul>\n"},{"title":"JSONP 是如何实现跨域的?","description":"","answer":"<p>JSONP 的实现原理是通过添加一个 script 标签，指定 src 属性为跨域请求的 URL，而这个 URL 返回的不是 JSON 数据，而是一段可执行的 JavaScript 代码，这段代码会调用一个指定的函数，并且将 JSON 数据作为参数传入函数中。</p>\n<p>例如，假设我们从 <code>http://example.com</code> 域名下请求数据，我们可以通过在 <code>http://example.com</code> 中添加如下代码实现 JSONP 请求：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function handleData(data) {</span></span>\n<span class=\"line\"><span>  // 处理获取到的数据</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>const script = document.createElement('script');</span></span>\n<span class=\"line\"><span>script.src = 'http://example.org/api/data?callback=handleData';</span></span>\n<span class=\"line\"><span>document.head.appendChild(script);</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>其中，我们指定了一个名为 <code>handleData</code> 的回调函数，并将这个函数名作为参数传递给了跨域请求的 URL 中的 callback 参数。服务器端返回的数据将会被包装在这个回调函数中，例如：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>handleData({\"name\": \"John\", \"age\": 30});</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>在这个例子中，我们可以在 handleData 函数中处理获取到的数据。需要注意的是，在使用 JSONP 时，<strong>需要保证服务器端返回的数据是一个可执行的 JavaScript 代码，并且必须使用指定的回调函数名来包装数据，否则无法正确处理数据。</strong></p>\n<p><strong>如何获取 jsonp 的相应参数</strong></p>\n<p>获取 JSONP 响应结果的方法有两种，<strong>一种是通过回调函数参数获取</strong>，<strong>另一种是通过 script 标签加载完成后解析全局变量获取</strong>。</p>\n<p>假设服务器返回以下 JSONP 响应：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">callback</span><span style=\"color:#999999\">({</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">Alice</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">age</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 20</span><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>其中 callback 是客户端定义的回调函数名，用于指定返回数据的处理方式。</p>\n<p>我们可以使用以下两种方式获取响应结果：</p>\n<p><strong>1. 通过回调函数参数获取</strong> 在客户端定义一个全局函数作为回调函数，服务器返回的数据会作为回调函数的参数传入，这个参数可以在回调函数中处理。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> handleResponse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // Alice</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">age</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 20</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 创建 script 标签</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> script</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">script</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://example.com/api?callback=handleResponse</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 插入到文档中开始加载数据</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 通过全局变量获取</strong> 在客户端定义一个全局函数作为回调函数，服务器返回的数据会作为一个全局变量赋值给该函数所在的对象，我们可以在 script 标签加载完成后解析全局变量获取响应结果。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> handleResponse</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">myData</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // Alice</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">myData</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">age</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 20</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 创建 script 标签</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> script</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">script</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://example.com/api?callback=handleResponse</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 插入到文档中开始加载数据</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// script 标签加载完成后解析全局变量</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">myData</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onload</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  delete</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">myData</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 删除全局变量</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>注意，使用 JSONP 时要注意安全问题，应该对返回的数据进行验证，避免接收到恶意代码。此外，JSONP <strong>只能发送 GET 请求</strong>，无法发送 POST 请求，<strong>也无法使用 HTTP 请求头和请求体传递数据</strong>。</p>\n"},{"title":"什么是 HTTP 的持久连接？它的作用是什么？","description":"","answer":"<p>（Keep-Alive）</p>\n"},{"title":"简单请求和非简单请求的区别是什么？","description":"","answer":"<p>（预检请求 Preflight）</p>\n"},{"title":"什么是 XSS 攻击？如何防御？","description":"","answer":""},{"title":"什么是 CSRF 攻击？如何防御？","description":"","answer":""},{"title":"什么是 DDOS 攻击？如何防御？","description":"","answer":""},{"title":"什么是中间人攻击（MITM）？HTTPS 如何防止它？","description":"","answer":""},{"title":"如何防止点击劫持？相关 HTTP 头部是什么？","description":"","answer":""},{"title":"如何理解“同源策略”？如何解决跨域问题？","description":"","answer":""},{"title":"描述从输入 URL 到页面加载完成的整个过程","description":"","answer":""},{"title":"WebSocket 和 HTTP 长轮询的区别是什么？","description":"","answer":""},{"title":"WebRTC 是什么？它基于哪些协议？","description":"","answer":""},{"title":"什么是 SSE ？它与 WebSocket 有何区别？","description":"","answer":""},{"title":"什么是 JWT ？它的结构包含哪些部分？","description":"","answer":""},{"title":"什么是关键渲染路径？如何优化？","description":"","answer":""},{"title":"如何通过 preload、prefetch、preconnect 优化资源加载？","description":"","answer":""},{"title":"什么是 Brotli 压缩？与 Gzip 相比有何优势？","description":"","answer":""},{"title":"如何实现 HTTP 的链路复用？HTTP/2 如何支持它？","description":"","answer":""},{"title":"什么是负载均衡？","description":"","answer":"<p>客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p>\n<p>负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种。</p>\n<ul>\n<li>硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动、中国联通这样的公司才会选择硬负载进行操作；</li>\n<li>更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</li>\n</ul>\n"}]