[{"title":"CSS3有哪些新特性","answer":"1. **弹性布局**（Flexbox）与**网格布局**（Grid）；\r\n2. **过渡动画**（`transition`/`animation`）；\r\n3. **样式增强**：圆角（`border-radius`）、阴影（`box-shadow/text-shadow`）、渐变（`gradient`）；\r\n4. **响应式设计**：媒体查询（`@media`）；\r\n5. **变形与滤镜**：`transform`（旋转/缩放）、`filter`（模糊/透明度）；\r\n6. **自定义字体**（`@font-face`）和**多列布局**（`columns`）。\r\n7. **选择器的扩展**:属性选择器：`[attr^=\"val\"]`（开头匹配）、`[attr$=\"val\"]`（结尾匹配）；**结构伪类**：`:nth-child(n)`、`:nth-of-type(n)`、`:empty`（无子元素）；UI状态伪类：`:enabled`、`:disabled`、`:checked`；否定伪类：`:not(selector)` 排除元素；伪元素语法：`::before`、`::after`（推荐双冒号，区分伪类）。"},{"title":"介绍⼀下标准的CSS的盒⼦模型？","answer":"标准 CSS 盒模型由 **内容区（content）**、**内边距（padding）**、**边框（border）** 和 **外边距（margin）** 组成。\r\n\r\n- **核心规则**：\r\n  默认 `box-sizing: content-box`，元素的 `width/height` 仅定义内容区尺寸，总宽度为：\r\n  **总宽度 = width + padding + border**（外边距 `margin` 影响布局但不计入元素自身尺寸）。\r\n- **对比 IE 模型**：\r\n  通过 `box-sizing: border-box` 切换为 IE 模型，此时 `width/height` 包含内容、内边距和边框。"},{"title":"描述块格式化上下文 (BFC) 及其工作原理","answer":"BFC（块格式化上下文）是页面渲染的一块独立区域，内部元素布局不影响外部。它通过特定条件触发（如 `overflow: hidden`、`float`、`display: flex` 等），主要解决外边距重叠、浮动元素高度塌陷，以及阻止元素被浮动覆盖。BFC内元素垂直排列，且区域边界会包裹内部浮动内容，避免布局干扰。"},{"title":"为什么要初始化CSS样式？","answer":"初始化 CSS 主要是为了**消除浏览器默认样式的差异**，统一元素基础表现。不同浏览器对标签（如 `body` 的边距、`ul` 的列表符号）的默认样式不同，直接开发会导致布局错乱或冗余覆盖。通过重置（如 `margin: 0; padding: 0`）或标准化（如 Normalize.css），确保跨浏览器一致性，减少调试成本，提升开发效率。"},{"title":"简述CSS选择器有哪些?","answer":"1. **元素选择器**：这是最基础的选择器，它根据HTML元素的类型进行选择。例如，`h1 { color: blue; }`会将所有的h1元素的文字颜色设置为蓝色。\r\n2. **ID选择器**：通过元素的id属性进行选择，id选择器在CSS中具有很高的优先级。例如，`#myId { color: blue; }`会将id为myId的元素的文字颜色设置为蓝色。\r\n3. **类选择器**：通过元素的class属性进行选择。例如，`.myClass { color: blue; }`会将class为myClass的所有元素的文字颜色设置为蓝色。\r\n4. **属性选择器**：通过元素的属性进行选择。例如，`[href] { color: blue; }`会将所有含有href属性的元素的文字颜色设置为蓝色。\r\n5. **后代选择器**：选中某元素的后代元素。例如，`div p { color: blue; }`会将所有在div元素内部的p元素的文字颜色设置为蓝色。\r\n6. **子元素选择器**：选中某元素的直接子元素。例如，`div > p { color: blue; }`会将所有直接在div元素下一级的p元素的文字颜色设置为蓝色。\r\n7. **相邻兄弟选择器**：选中某元素的下一个兄弟元素。例如，`h1 + p { color: blue; }`会将所有紧跟在h1元素后面的p元素的文字颜色设置为蓝色。\r\n8. **通用选择器**：选中所有元素。例如，`* { color: blue; }`会将所有元素的文字颜色设置为蓝色。\r\n\r\n此外，CSS3还引入了一些新的选择器，如：\r\n\r\n- **结构伪类选择器**：例如`:first-child`、`:last-child`、`:nth-child()`等，用来选择特定位置的元素。\r\n- **否定伪类选择器**：例如`:not()`，用来选择除某些元素以外的元素。\r\n- **伪元素选择器**：例如`::before`、`::after`，用来选择元素的一部分，或者在元素前后插入内容。"},{"title":"CSS样式的优先级（选择器的权重）是如何的?","answer":"1. **!important** > **内联样式** > **ID 选择器** > **类/伪类/属性** > **元素/伪元素** > **通配符/继承**；"},{"title":"什么是CSS文档流？","answer":"CSS 文档流是元素默认的布局方式：**块级元素**从上到下垂直排列，**行内元素**从左到右水平排列，占据内容自然空间。脱离文档流的方式包括 `float`、`position: absolute/fixed`，此时元素不再影响其他元素布局（如浮动覆盖常规内容）。"},{"title":"脱离文档流有哪些方法？","answer":""},{"title":"Padding和Margin有什么区别？","answer":"- **Padding（内边距）**：Padding 是元素的内边距，它位于元素的边框和内容之间,Padding 是元素的内部空间，它会影响元素的尺寸。\r\n- **Margin（外边距）**：Margin 是元素的外边距，它位于元素的边框和其他元素之间，Margin 是元素的外部空间，它不影响元素的尺寸，只影响元素与其他元素的距离，并且不显示元素的背景。"},{"title":"CSS引入的方式有哪些? link和@import的区别是?","answer":"CSS 引入方式：\r\n\r\n1. **内联样式**（`<div style=\"\">`）；\r\n2. **内部样式表**（`<style>` 标签）；\r\n3. **外部链接**（`<link href=\"\">`）；\r\n4. **@import**（CSS 内引入其他文件）。\r\n\r\n**区别**：\r\n\r\n- **加载方式**：`<link>` 是 HTML 标签，**并行加载**；`@import` 是 CSS 语法，需等 HTML 解析完再加载，**可能阻塞渲染**；\r\n- **兼容性**：`@import` 不支持 IE5 以下，`<link>` 无兼容问题；\r\n- **DOM 控制**：`<link>` 可通过 JS 操作（如动态插入），`@import` 不可；\r\n- **使用场景**：`<link>` 推荐主样式，`@import` 适合模块化按需加载（但慎用，性能较差）。"},{"title":"CSS 中 position属性有哪些，大概讲一下？","answer":"CSS 的 `position` 属性控制元素的定位方式：\r\n\r\n1. **static**：默认值，元素在文档流中正常排列；\r\n2. **relative**：相对定位，基于自身原位置偏移（不影响其他元素）；\r\n3. **absolute**：绝对定位，相对于**最近的非 static 祖先元素**定位；\r\n4. **fixed**：固定定位，相对于**视口**（滚动不移动）；\r\n5. **sticky**：粘性定位，滚动到阈值时变为固定（如吸顶效果）。\r\n\r\n**注意**：`absolute/fixed` 会脱离文档流，需通过 `top/left` 等调整位置。display: block;和display: inline;的区别?"},{"title":"CSS隐藏元素的方法有哪些?","answer":"CSS 隐藏元素的常见方法及区别：\r\n\r\n1. **`display: none`**：元素不渲染，**不占空间**，无法交互，触发重排；\r\n2. **`visibility: hidden`**：元素不可见，**保留空间**，无法交互，仅重绘；\r\n3. **`opacity: 0`**：完全透明，**保留空间**，**可交互**（如点击）；\r\n4. **`position + 偏移`**：如 `absolute; left: -9999px`，移出视口但占位；\r\n5. **`clip-path: inset(100%)`**：裁剪隐藏，保留布局，兼容性较差；\r\n6. **`width/height: 0` + `overflow: hidden`**：需清除内边距/边框。"},{"title":"你知道哪些垂直居中的方法？","answer":"1. **Flex 布局**：\r\n\r\n   ```css\r\n   .parent {  \r\n     display: flex;  \r\n     justify-content: center;  \r\n     align-items: center;  \r\n   }  \r\n   ```\r\n\r\n2. **Grid 布局**：\r\n\r\n   ```css\r\n   .parent {  \r\n     display: grid;  \r\n     place-items: center;  \r\n   }  \r\n   ```\r\n\r\n3. **绝对定位 + Transform**（未知宽高）：\r\n\r\n   ```css\r\n   .child {  \r\n     position: absolute;  \r\n     left: 50%;  \r\n     top: 50%;  \r\n     transform: translate(-50%, -50%);  \r\n   }  \r\n   ```\r\n\r\n4. **绝对定位 + Margin**（已知宽高）：\r\n\r\n   ```css\r\n   .child {  \r\n     position: absolute;  \r\n     left: 0; right: 0;  \r\n     top: 0; bottom: 0;  \r\n     margin: auto;  \r\n   }  \r\n   ```\r\n\r\n5. **行内内容居中**：\r\n\r\n   ```css\r\n   .parent {  \r\n     text-align: center;  /* 水平 */  \r\n     line-height: 高度值;  /* 垂直（单行） */  \r\n   }  \r\n   ```"},{"title":"CSS哪些属性可以继承？","answer":"1. **字体相关**：`font-family`、`font-size`、`font-weight`、`color`；\r\n2. **文本相关**：`line-height`、`text-align`、`text-indent`、`letter-spacing`；\r\n3. **其他**：`visibility`（隐藏继承）、`cursor`（光标样式）、`list-style`（列表符号）。"},{"title":"清除浮动的方法有哪些？","answer":"1. **空元素法**：在浮动元素后添加 `<div style=\"clear:both\"></div>`；\r\n\r\n2. **伪元素法**（推荐）：\r\n\r\n   ```css\r\n   .clearfix::after {  \r\n     content: \"\";  \r\n     display: block;  \r\n     clear: both;  \r\n   }  \r\n   ```\r\n\r\n3. **触发BFC**：父元素设置 `overflow: hidden` 或 `display: flow-root`；\r\n\r\n4. **父元素定高**：直接设置高度（不灵活，慎用）。\r\n\r\n**核心原理**：通过清除操作使父容器包裹浮动元素，避免高度塌陷。"},{"title":"如何解决父容器高度塌陷问题？","answer":"解决父容器高度塌陷的常见方法：\r\n\r\n1. **清除浮动**：\r\n\r\n   ```css\r\n   .parent::after {  \r\n     content: \"\";  \r\n     display: block;  \r\n     clear: both;  \r\n   }  \r\n   ```\r\n\r\n2. **触发 BFC**：\r\n\r\n   ```css\r\n   .parent {  \r\n     overflow: hidden; /* 或 display: flow-root（无副作用） */  \r\n   }  \r\n   ```\r\n\r\n3. **现代布局替代**：\r\n\r\n   ```css\r\n   .parent {  \r\n     display: flex; /* 或 grid */  \r\n   }  \r\n   ```\r\n\r\n**原理**：强制父容器重新计算高度，包含浮动子元素。推荐伪元素法或 `flow-root`，避免 `overflow` 可能的内容裁剪问题。"},{"title":"说说⼏种常⻅的CSS布局","answer":"1. **传统浮动布局**：\r\n   - 圣杯/双飞翼布局（三栏，两侧固定，中间自适应），需清除浮动。\r\n2. **Flex 弹性布局**：\r\n   - 一维布局（如导航栏、垂直居中），通过 `display: flex` 实现灵活对齐与分布。\r\n3. **Grid 网格布局**：\r\n   - 二维布局（如复杂网格、卡片排列），`display: grid` 支持行列定义，简化结构。\r\n4. **定位布局**：\r\n   - 结合 `position: absolute/fixed` 实现固定侧边栏、弹窗等脱离文档流的元素。\r\n5. **响应式布局**：\r\n   - 媒体查询（`@media`）适配不同屏幕尺寸，结合 Flex/Grid 动态调整布局。\r\n\r\n**特点**：Flex/Grid 更现代高效，传统浮动兼容性更好，响应式适配多端。"},{"title":"Flex 布局了解多少？","answer":"Flex 布局（弹性盒子）用于**一维排列**元素，核心概念：\r\n\r\n1. **容器属性**：\r\n   - `display: flex`（定义容器）；\r\n   - `flex-direction`（主轴方向：行/列）；\r\n   - `justify-content`（主轴对齐）；\r\n   - `align-items`（交叉轴对齐）；\r\n   - `flex-wrap`（是否换行）。\r\n2. **子项属性**：\r\n   - `flex: 1`（简写 `flex-grow/shrink/basis` 控制伸缩比例）；\r\n   - `order`（排序）；\r\n   - `align-self`（单独对齐）。\r\n\r\n**应用场景**：水平/垂直居中、等分空间、自适应布局。\r\n**优势**：代码简洁、响应式适配性强，替代传统浮动布局。\r\n\r\n[Flex 布局教程：语法篇](https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)"},{"title":"Grid 布局了解多少？","answer":"Grid 布局用于**二维网格结构**，核心概念：\r\n\r\n1. **容器属性**：\r\n   - `display: grid`；\r\n   - `grid-template-columns/rows` 定义行列尺寸（如 `1fr`、`repeat()`）；\r\n   - `gap` 控制行列间距；\r\n   - `align/justify-items` 对齐单元格内容。\r\n2. **子项属性**：\r\n   - `grid-column/row` 指定子项位置；\r\n   - `grid-area` 配合命名区域布局；\r\n   - `justify/align-self` 单独对齐。\r\n\r\n**应用场景**：复杂网格（如仪表盘）、响应式布局、行列严格对齐。\r\n**优势**：代码简洁直观，支持灵活布局，与 Flex 互补（二维 vs 一维）。\r\n\r\n[CSS Grid 网格布局教程](https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)"},{"title":" 什么是外边距重叠？重叠的结果是什么？","answer":"外边距重叠（Margin Collapse）指相邻块级元素的垂直外边距合并为一个，规则如下：\r\n\r\n1. **兄弟元素**：上下外边距取较大值（如 `margin-bottom: 20px` 和 `margin-top: 30px` → 间距 30px）；\r\n2. **父子元素**：首个/末个子元素的边距与父元素合并（父无 `border/padding` 时触发）；\r\n3. **正负值**：相加（如 `20px` 和 `-15px` → `5px`）；同为负时取更小值（绝对值更大）。\r\n\r\n**结果**：实际间距小于预期，需通过触发 BFC（如父元素加 `overflow: hidden`）或添加 `padding/border` 避免。"},{"title":"px，em和rem的区别","answer":"- **px**：绝对单位，固定像素值，不随页面缩放改变；\r\n- **em**：相对单位，基于**父元素字体大小**（如父 `font-size: 16px` → `1em = 16px`），多层嵌套会累积计算；\r\n- **rem**：相对单位，基于**根元素（html）字体大小**，始终全局统一，避免层级影响。"},{"title":"简述伪类和伪元素","answer":"伪类（如 `:hover`）用于选择元素的**特定状态**（如悬停），而伪元素（如 `::before`）用于创建**虚拟元素**（如插入内容）。\r\n**区别**：\r\n\r\n1. **语法**：伪类单冒号（`:active`），伪元素双冒号（`::before`，兼容写法可单冒号）；\r\n2. **作用**：伪类描述状态，伪元素生成新内容；\r\n3. **数量**：一个选择器可含多个伪类，但只能有一个伪元素。"},{"title":"用纯 CSS 创建一个三角形","answer":"通过设置元素的宽高为 `0`，利用 **边框透明** 特性生成三角形。\r\n\r\n```css\r\n.triangle {  \r\n  width: 0;  \r\n  height: 0;  \r\n  border: 50px solid transparent;  \r\n  border-top-color: red; /* 方向：向下 */  \r\n} \r\n```"},{"title":"CSS3中Filter可以做什么？","answer":"CSS3 的 `filter` 属性可为元素添加**视觉效果滤镜**，常用函数包括：\r\n\r\n- **模糊**：`blur(5px)`；\r\n- **亮度/对比度**：`brightness(1.2)`、`contrast(200%)`；\r\n- **阴影**：`drop-shadow(2px 2px 5px black)`（比 `box-shadow` 更自然）；\r\n- **颜色处理**：`grayscale(100%)`（灰度）、`hue-rotate(90deg)`（色相旋转）、`sepia(50%)`（复古色）；\r\n- **透明度**：`opacity(0.5)`；\r\n- **反色**：`invert(100%)`。"},{"title":"CSS实现自适应正方形、等宽高比矩形？","answer":"实现自适应正方形或等宽高比矩形：\r\n\r\n1. **正方形**：\r\n\r\n   ```css\r\n   .square {  \r\n     width: 50%;  \r\n     padding-bottom: 50%; /* 高度 = 宽度 */  \r\n     position: relative;  \r\n   }  \r\n   .content {  \r\n     position: absolute; /* 内容需绝对定位 */  \r\n     width: 100%;  \r\n     height: 100%;  \r\n   }  \r\n   ```\r\n\r\n2. **等宽高比矩形（如16:9）**：\r\n\r\n   ```css\r\n   .rectangle {  \r\n     width: 100%;  \r\n     padding-bottom: 56.25%; /* 9/16=56.25% */  \r\n   }  \r\n   ```\r\n\r\n3. **现代方案**：\r\n\r\n   ```css\r\n   .box {  \r\n     aspect-ratio: 1/1; /* 正方形 */  \r\n     /* 或 aspect-ratio: 16/9; */  \r\n   }  \r\n   ```\r\n\r\n**原理**：利用 `padding` 百分比基于宽度的特性，或直接使用 `aspect-ratio`（兼容性需注意）。"},{"title":"CSS 如何实现文本溢出？","answer":"- 单行\r\n\r\n ```css\r\n .ellipsis {\r\n   white-space: nowrap;\r\n   overflow: hidden;\r\n   text-overflow: ellipsis;\r\n }\r\n ```\r\n\r\n- 多行\r\n\r\n```css\r\n.ellipsis-multiline {\r\n  display: -webkit-box;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-line-clamp: 3; /* 设置显示的行数 */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n```"},{"title":"谈谈你对媒体查询的认识？","answer":"媒体查询（`@media`）用于根据设备特性（如屏幕宽度、分辨率）应用不同CSS样式，实现响应式设计。\r\n\r\n**常见用法**：\r\n\r\n1. **视口适配**：\r\n\r\n   ```css\r\n   @media (max-width: 768px) {  \r\n     /* 移动端样式 */  \r\n   }  \r\n   ```\r\n\r\n2. **设备类型**：\r\n\r\n   ```css\r\n   @media print { ... }  /* 打印样式 */  \r\n   ```\r\n\r\n3. **组合条件**：\r\n\r\n   ```css\r\n   @media (min-width: 992px) and (orientation: landscape) { ... }  \r\n   ```\r\n\r\n**核心作用**：通过断点（Breakpoint）动态调整布局、字体大小或隐藏元素，提升多端适配体验。"},{"title":"css中三栏布局的实现方案有哪些？","answer":"三栏布局（两侧固定，中间自适应）常见实现方案：\r\n\r\n1. **浮动布局**：\r\n\r\n   - 左右浮动定宽，中间通过 `margin` 留出空间，需清除浮动。\r\n\r\n2. **Flex 布局**：\r\n\r\n   ```css\r\n   .container {  \r\n     display: flex;  \r\n   }  \r\n   .left, .right { width: 200px; }  \r\n   .middle { flex: 1; }  \r\n   ```\r\n\r\n3. **Grid 布局**：\r\n\r\n   ```css\r\n   .container {  \r\n     display: grid;  \r\n     grid-template-columns: 200px 1fr 200px;  \r\n   }  \r\n   ```\r\n\r\n4. **绝对定位**：左右绝对定位，中间用 `margin` 占位。\r\n\r\n5. **圣杯/双飞翼布局**：\r\n\r\n   - 中间优先渲染，利用浮动、负边距和相对定位实现（经典但复杂）。\r\n\r\n**特点**：Flex/Grid 简洁高效，浮动兼容性好，传统方案适合深入理解布局原理。"},{"title":"简述CSS3实现动画的方式？","answer":"CSS3 实现动画的两种主要方式：\r\n\r\n1. **过渡动画（Transition）**：\r\n\r\n   - 通过 `transition` 属性平滑改变元素状态（如悬停）。\r\n\r\n   - 示例：\r\n\r\n     ```css\r\n     .box {  \r\n       transition: all 0.3s ease-in;  \r\n     }  \r\n     .box:hover { width: 200px; }  \r\n     ```\r\n\r\n2. **关键帧动画（Animation）**：\r\n\r\n   - 使用 `@keyframes` 定义动画序列，通过 `animation` 属性应用。\r\n\r\n   - 示例：\r\n\r\n     ```css\r\n     @keyframes slide {  \r\n       0% { transform: translateX(0); }  \r\n       100% { transform: translateX(100px); }  \r\n     }  \r\n     .box {  \r\n       animation: slide 2s infinite;  \r\n     }  \r\n     ```\r\n\r\n**区别**：\r\n\r\n- **Transition**：需触发（如hover），单次状态变化；\r\n- **Animation**：自动执行，支持多阶段、循环等复杂控制。"},{"title":"如何开启GPU加速？","answer":"```css\t\r\n.element {  \r\n  transform: translateZ(0);  \r\n  /* 或 */  \r\n  will-change: transform;  \r\n}  \r\n```"},{"title":"简述深入理解设备像素、CSS像素、设备独立像素、 DPR、PPI之间的区别与适配⽅案 ？","answer":"这些概念关联**屏幕适配与显示精度**，核心区别与适配方案如下：\r\n\r\n1. **设备像素（物理像素）**：屏幕实际发光点，不可变（如 iPhone 13 的 1170×2532）。\r\n2. **CSS像素（逻辑像素）**：代码中使用的抽象单位（如 `width: 100px`），通过 `viewport` 缩放与设备像素映射。\r\n3. **设备独立像素（DP/DIP）**：与屏幕密度无关的虚拟单位（如 1DP ≈ 1/160英寸），系统级适配基准。\r\n4. **DPR（设备像素比）**：`设备像素 / 设备独立像素`（如 DPR=2 时，1CSS 像素用 4 设备像素渲染）。\r\n5. **PPI（像素密度）**：每英寸物理像素数，值越高越清晰（如 PPI=326 为 Retina 屏）。\r\n\r\n**适配方案**：\r\n\r\n- **Viewport 设置**：`<meta name=\"viewport\" content=\"width=device-width\">` 使 CSS 像素与设备独立像素对齐；\r\n- **响应式单位**：用 `rem`、`vw` 替代 `px`，结合媒体查询适配不同尺寸；\r\n- **高倍图适配**：根据 DPR 切换 2x/3x 图片（如 `srcset` 属性）；\r\n- **缩放处理**：Canvas 等需根据 DPR 缩放避免模糊（如 `ctx.scale(DPR, DPR)`）。"},{"title":"如何实现⼩于12px的字体效果？","answer":"实现小于 `12px` 的字体效果可通过以下方法：\r\n\r\n1. **缩放法**（推荐）：\r\n\r\n   ```css\r\n   .small-text {  \r\n     font-size: 12px;  \r\n     transform: scale(0.8);  /* 实际显示 9.6px */  \r\n     display: inline-block;    /* 避免缩放影响布局 */  \r\n   }  \r\n   ```\r\n\r\n2. **禁用浏览器限制**（部分生效）：\r\n\r\n   ```css\r\n   body {  \r\n     -webkit-text-size-adjust: none; /* Chrome/Safari */  \r\n   }  \r\n   ```\r\n\r\n3. **SVG 文本**（绕过限制）：\r\n\r\n   ```html\r\n   <svg viewBox=\"0 0 100 20\">  \r\n     <text x=\"0\" y=\"15\" font-size=\"10\">10px文本</text>  \r\n   </svg>  \r\n   ```\r\n\r\n**注意事项**：\r\n\r\n- **兼容性**：`transform` 兼容主流浏览器，`text-size-adjust` 需前缀；\r\n- **副作用**：缩放可能导致字体模糊，需微调位置；\r\n- **可访问性**：过小字体影响阅读，需权衡设计需求。"},{"title":"说说计算属性calc的作用","answer":"`calc()` 用于动态计算 CSS 属性值，支持**混合单位**（如 `%`、`px`、`vw`），常用于响应式布局。\r\n\r\n**示例**：\r\n\r\n```css\r\n.box {  \r\n  width: calc(100% - 80px); /* 宽度自适应，固定间距 */  \r\n  height: calc(100vh - 20px - 5rem); /* 视口高度减多单位值 */  \r\n}  \r\n```\r\n\r\n**优势**：\r\n\r\n- 实现复杂尺寸计算（如等分剩余空间、动态调整）；\r\n- 替代传统 JS 计算，提升代码可维护性；\r\n- 支持加减乘除（注意运算符间需加空格）。"},{"title":"如何避免全局样式污染？","answer":"避免全局样式污染的核心方法是**样式隔离**，常用方案：\r\n\r\n1. **CSS Modules**：\r\n\r\n   - 通过编译工具（如Webpack）将类名哈希化（`.button_1x2y3z`），确保唯一性。\r\n\r\n2. **Scoped CSS**（Vue/框架特性）：\r\n\r\n   ```vue\r\n   <style scoped>  \r\n     .title { ... } /* 自动添加 data-v-xxx 属性选择器 */  \r\n   </style>  \r\n   ```\r\n\r\n3. **BEM 命名规范**：\r\n\r\n   - 通过 `.block__element--modifier` 命名规则约束作用域，减少冲突。\r\n\r\n4. **CSS-in-JS**（如 styled-components）：\r\n\r\n   - 将样式与组件绑定，生成唯一类名，运行时动态注入。\r\n\r\n5. **Shadow DOM**（Web Components）：\r\n\r\n   - 彻底隔离组件内外的样式（如 `<custom-element>` 内部样式不影响外部）。"},{"title":"简述Sass和Less","answer":"**Sass 和 Less 是两种主流的 CSS 预处理器**，通过扩展 CSS 功能提升开发效率，以下是它们的核心对比：\r\n\r\n**1. 核心功能**\r\n\r\n- **共同点**：\r\n  - **变量**：定义可复用的值（如颜色、尺寸）。\r\n  - **嵌套语法**：层级化组织 CSS 规则。\r\n  - **混合宏（Mixins）**：封装重复代码块。\r\n  - **函数与运算**：支持数学计算和逻辑操作。\r\n  - **模块化**：通过 `@import` 拆分代码文件。\r\n- **差异**：\r\n  - **条件与循环**：\r\n    - Sass 支持 `@if`、`@for`、`@each`、`@while` 等复杂逻辑。\r\n    - Less 仅通过混合宏和函数模拟条件判断，功能较简单。\r\n  - **作用域**：\r\n    - Sass 变量具有局部作用域，层级更清晰。\r\n    - Less 变量默认全局作用域，可能引发冲突。\r\n\r\n**2. 语法风格**\r\n\r\n- **Sass**：\r\n\r\n  - **两种语法**：\r\n\r\n    - **SCSS**（主流）：兼容 CSS 语法，使用 `{}` 和 `;`。\r\n    - **缩进语法**（Sass）：省略 `{}` 和 `;`，依赖缩进。\r\n\r\n  - **示例（SCSS）**：\r\n\r\n    ```scss\r\n    $primary-color: #333;\r\n    @mixin center-block {\r\n      margin: 0 auto;\r\n    }\r\n    .container {\r\n      @include center-block;\r\n      .item { color: $primary-color; }\r\n    }\r\n    ```\r\n\r\n- **Less**：\r\n\r\n  - **类似 CSS**：语法与原生 CSS 几乎一致。\r\n\r\n  - **示例**：\r\n\r\n    ```less\r\n    @primary-color: #333;\r\n    .center-block() { margin: 0 auto; }\r\n    .container {\r\n      .center-block();\r\n      .item { color: @primary-color; }\r\n    }\r\n    ```\r\n\r\n**3. 编译与生态**\r\n\r\n- **编译方式**：\r\n  - **Sass**：需通过 `Dart Sass`（主流）或 `Node Sass` 工具编译为 CSS。\r\n  - **Less**：通过 `Less.js`（浏览器或 Node.js）编译。\r\n- **生态工具**：\r\n  - Sass 集成于 Webpack、Gulp 等构建工具，主流框架（如 React、Vue）广泛支持。\r\n  - Less 因 Bootstrap 早期使用而流行，但近年 Sass 生态更活跃。\r\n\r\n**4. 适用场景**\r\n\r\n- **选择 Sass**：\r\n  - 需要复杂逻辑控制（如循环、条件分支）。\r\n  - 项目规模较大，需严格的代码组织和模块化。\r\n  - 偏好现代工具链（如 Dart Sass 的高性能编译）。\r\n- **选择 Less**：\r\n  - 快速上手，语法接近原生 CSS。\r\n  - 维护旧项目（如早期 Bootstrap 项目）。\r\n  - 轻量级需求，无需复杂功能。\r\n\r\n**总结**\r\n\r\n- **Sass** 功能更强大，适合复杂项目，**Less** 更轻量易用。\r\n- **Sass 是当前主流选择**，尤其在新项目中更受推荐；Less 适合特定场景或历史项目兼容。"},{"title":"postcss是做什么的？","answer":"PostCSS 是一个基于 JavaScript 的 CSS 处理工具，其核心功能是通过插件系统对 CSS 代码进行解析、转换和优化。它通过解析 CSS 生成**抽象语法树（AST）**，允许开发者利用插件对 AST 进行修改，最终生成兼容性更强、更高效的 CSS 代码。\r\n\r\n常见插件：\r\n\r\n- **Autoprefixer**：自动添加浏览器厂商前缀，确保跨浏览器兼容性14。\r\n- **cssnano**：压缩 CSS 代码，去除冗余内容，减小文件体积49。\r\n- **postcss-preset-env**：支持未来的 CSS 语法（如变量、嵌套），将其转换为当前浏览器兼容的代码59。\r\n- **Stylelint**：检查 CSS 代码规范，提示潜在错误510。"},{"title":"CSS优化、提高性能的方法有哪些？","answer":"**CSS 性能优化常用方法：**\r\n\r\n1. **减少重绘与回流**\r\n   - 使用 `transform` 和 `opacity` 替代直接修改 `top/left`，触发 GPU 加速\r\n   - 避免频繁操作 DOM 样式，合并多次修改\r\n2. **选择器优化**\r\n   - 避免过度嵌套（如 `.nav ul li a`）\r\n   - 减少通配符 `*` 和属性选择器的使用\r\n3. **文件体积压缩**\r\n   - 删除无用代码（如 PurgeCSS）\r\n   - 压缩 CSS（工具：cssnano、Webpack 的 `css-minimizer-webpack-plugin`）\r\n4. **加载策略优化**\r\n   - 关键 CSS 内联，非关键 CSS 异步加载（`<link rel=\"preload\">`）\r\n   - 使用 `media=\"print\"` 或 `media=\"(max-width: 600px)\"` 分割代码\r\n5. **布局性能**\r\n   - 优先使用 Flexbox/Grid 布局（性能优于传统浮动布局）\r\n   - 避免过度使用 `margin/padding` 导致布局抖动\r\n6. **工具与规范**\r\n   - 使用 CSS 变量（减少重复值）\r\n   - 开启 CSS 硬件加速（如 `will-change: transform;`）"},{"title":"浏览器是怎样解析CSS选择器的？","answer":"浏览器解析 CSS 选择器的过程是**从右向左匹配**的，目的是快速过滤无效路径，提升解析效率。例如对 `.nav a` 的解析顺序为：\r\n\r\n1. 先找到页面所有 `<a>` 标签；\r\n2. 再向上检查父级是否包含 `.nav` 类。\r\n\r\n**关键点：**\r\n\r\n- **解析步骤**：\r\n  - 生成选择器的抽象语法树（AST）；\r\n  - 遍历 DOM 树，匹配符合最右端条件的元素；\r\n  - 自底向上验证父级选择器，最终确定匹配结果。\r\n- **性能影响**：\r\n  - 越右侧的选择器越需**精准**（如类名、ID），减少回溯成本；\r\n  - 避免使用 `*`、层级过深（如 `div ul li a span`），降低匹配复杂度。\r\n\r\n**优化建议：**\r\n\r\n- 尽量用类选择器替代标签选择器；\r\n- 避免使用通用选择器或属性选择器（如 `[type=\"text\"]`）；\r\n- 优先使用 BEM 等命名规范简化选择器层级。"},{"title":"为什么移动端设计稿都是750？","answer":"移动端设计稿常用750px宽度，主要基于以下几点原因：\r\n\r\n1. **设备适配基准**：早期iPhone6/7/8等主流设备物理分辨率为750×1334（设备像素比DPR=2），设计稿按750px制作可直接除以2转为逻辑像素（375px），简化开发换算。\r\n2. **高效适配方案**：使用Rem或VW单位时，750作为基准尺寸（如1rem=75px），方便快速计算响应式布局。\r\n3. **行业统一规范**：国内团队普遍采用750标准，配合工具（如PostCSS插件）自动适配多端，降低协作成本。\r\n4. **高倍图支持**：750设计稿直接输出@2x切图，适配DPR≥2的高清屏，避免图片模糊。"},{"title":"position: fixed 一定是相对于浏览器窗口进行定位吗？","answer":"不一定。\r\n\r\n`position:fixed;`的元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置，元素的位置在屏幕滚动时不会改变。`fixed` 属性会创建新的层叠上下文。\r\n\r\n当元素祖先的 `transform`, `perspective` 或 `filter` 属性`非 none` 时，容器由视口改为该祖先。"},{"title":"object-fit的作用?","answer":""},{"title":"单行文本怎么实现两端对齐？","answer":""},{"title":"z-index属性在什么情况下会失效？","answer":"z-index 是 CSS 中控制元素堆置顺序的重要属性，它确定了元素在 Z 轴（线性上下）方向的显示顺序。然而，在一些特殊情况下，你会发现 z-index 属性似乎失效。本文将详细讨论这些情况及其原因，并提供解决方案。\r\n**一、z-index 什么情况下会失效？**\r\n\r\n下面是一些常见的情况，在这些情况中，z-index 可能会被应用不尽：\r\n\r\n1. **没有定义位置属性**\r\n\r\n  z-index 只在元素有定义位置时生效。如果一个元素的 `position` 属性为 `static`，则该元素不会应用 z-index。\r\n\r\n  **解决方案**\r\n\r\n  确保定义了 `position` 属性：\r\n\r\n  ```css\r\n  .box {\r\n    position: relative; /* or absolute, fixed, sticky */\r\n    z-index: 10;\r\n  }\r\n  ```\r\n\r\n  \r\n\r\n2. **不同堆置上下文**\r\n\r\n   z-index 的比较只对于同一堆置上下文的元素有效。如果两个元素不在同一堆置上下文，则会根据他们所属堆置上下文本身的 z-index 进行比较。\r\n\r\n   **解决方案**\r\n\r\n   确保需要比较的元素在同一堆置上下文中，可通过设置他们所属的子元素。\r\n\r\n3. 窗口元素优先级问题\r\n\r\n   窗口元素（如 `alert` 窗口）和一些构成性元素（如 `<iframe>`）会应用高优先级，并且通常会覆盖高值 z-index 的元素。\r\n\r\n   **解决方案**使用 \r\n\r\n   CSS 属性：\r\n\r\n   - 通过 `position: fixed` 和更高值 z-index。\r\n   - 重构元素，确保元素显示于高优先级之上。\r\n\r\n4. **非区块化内容**\r\n\r\n   如果元素是内联元素（如 `<span>`），而没有被进行区块化，则属性可能无效。\r\n\r\n   **解决方案**\r\n\r\n   确保元素是区块化元素：\r\n\r\n   ```css\r\n   .inline-block {\r\n       display: inline-block;\r\n       z-index: 10;\r\n     }\r\n   ```\r\n\r\n   \r\n\r\n**二、z-index 失效情况总结**\r\n\r\n| 失效原因           | 解决方案                                 |\r\n| ------------------ | ---------------------------------------- |\r\n| 未定义位置属性     | 设置 `position: relative/absolute/fixed` |\r\n| 不同堆置上下文     | 确保同一堆置上下文                       |\r\n| 窗口元素优先级问题 | 使用更高值 z-index                       |\r\n| 非区块化内容       | 设置 `display: inline-block`             |\r\n\r\n**三、实际示例**\r\n\r\n  如下面是一个简单示例：\r\n\r\n  ```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>z-index Example</title>\r\n  <style>\r\n    .container {\r\n      position: relative;\r\n      width: 200px;\r\n      height: 200px;\r\n    }\r\n    .box1 {\r\n      position: absolute;\r\n      z-index: 10;\r\n      width: 100px;\r\n      height: 100px;\r\n      background-color: red;\r\n    }\r\n    .box2 {\r\n      position: absolute;\r\n      z-index: 5;\r\n      width: 100px;\r\n      height: 100px;\r\n      background-color: blue;\r\n      top: 50px;\r\n      left: 50px;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div class=\"container\">\r\n    <div class=\"box1\"></div>\r\n    <div class=\"box2\"></div>\r\n  </div>\r\n</body>\r\n</html>\r\n  ```"},{"title":"怎么让CSS flex布局最后一行列表左对齐？","answer":"- 利用伪元素自动填充剩余空间\r\n\r\n```css\r\n.flex-container::after {\r\n  content: \"\";\r\n   flex: auto;\r\n}\r\n```\r\n\r\n- js计算元素个数补齐占位元素(vue中%计算)\r\n- 改用 CSS Grid 布局"},{"title":"Atom CSS 是什么？","answer":""},{"title":"什么是响应式设计？响应式设计的基本原理是什么？如何进行实现？","answer":""}]