[{"title":"什么是 React？","description":"","answer":"<p>React是一个简单的javascript UI库，用于构建高效、快速的用户界面。</p>\n<p>它是一个轻量级库，因此很受欢迎。它遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效。</p>\n<p>它使用虚拟DOM来有效地操作DOM。</p>\n<p>它遵循从高阶组件到低阶组件的单向数据流。</p>\n"},{"title":"React 和 Vue 在技术层面有哪些区别？","description":"","answer":"<p>React 和 Vue 是当前比较流行的前端框架，它们在技术层面有以下区别：</p>\n<ul>\n<li>组件化方式不同：React 是基于组件实现的，组件包含了状态和行为，所有组件共享一个状态树。Vue 也是基于组件实现的，但是每个组件都有自己的状态，并且可以很容易地将数据和行为绑定在一起。</li>\n<li>数据驱动方式不同：React 使用单向数据流来管理数据，即从父组件到子组件的传递，所以 React 中组件之间的数据交互相对更加复杂。Vue 则使用双向数据绑定来管理数据，使得组件之间的数据交互更加简洁。</li>\n<li>模板语法不同：React 使用 JSX 语法，将 HTML 和 JavaScript 结合在一起，使得编写组件更加直观和灵活。Vue 则使用模板语法，并且支持模板内的表达式和指令，使得编写组件具有更高的可读性和可维护性。</li>\n<li>生命周期不同：React 组件的生命周期分为三个阶段：初始化、更新和卸载。Vue 组件的生命周期分为八个阶段：创建、挂载、更新、销毁等。</li>\n<li>状态管理方式不同：React 使用 Redux 或者 MobX 来管理应用程序的状态。Vue 则提供了自己的状态管理库 Vuex，可以更方便地管理组件之间的共享状态。</li>\n<li>性能优化方式不同：React 使用虚拟 DOM 技术来实现高效的渲染性能，可以减少每次渲染时需要操作真实 DOM 的次数。Vue 则使用模板编译和响应式系统来实现高效的渲染性能，并且还提供了一些优化技术，例如懒加载和缓存等。</li>\n</ul>\n<p>开发人员可以根据项目需求和个人喜好选择合适的框架。</p>\n"},{"title":"什么是虚拟 DOM？","description":"","answer":"<p>虚拟DOM（VDOM）它是真实DOM的内存表示,一种编程概念，一种模式。它会和真实的DOM同步，比如通过ReactDOM这种库，这个同步的过程叫做调和(reconcilation)。</p>\n<p>虚拟DOM更多是一种模式，不是一种特定的技术。</p>\n<p><strong>react 的虚拟dom是怎么实现的？</strong></p>\n<p>React 的虚拟 DOM 是一种在内存中表示 DOM 结构的机制，用于优化实际 DOM 的操作。它通过减少直接 DOM 操作的次数和复杂度，提高了性能。以下是虚拟 DOM 的实现原理和关键步骤：</p>\n<p><strong>1. 虚拟 DOM 的基本概念</strong>**</p>\n<ul>\n<li><strong>虚拟 DOM</strong>：是一个轻量级的 JavaScript 对象，表示实际 DOM 树的结构和内容。虚拟 DOM 的主要目的是提供一种高效的方式来更新和渲染 UI。</li>\n<li><strong>React 组件</strong>：组件渲染时生成虚拟 DOM，React 根据这些虚拟 DOM 计算实际 DOM 的更新。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>虚拟 DOM 的创建</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>组件渲染</strong>：每当组件的状态或属性发生变化时，React 会调用组件的 render 方法，生成新的虚拟 DOM 树。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, World!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>上述代码生成的虚拟 DOM 结构可能是<code>{ type: 'div', props: { children: 'Hello, World!' } }</code></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>虚拟 DOM 的比较（Diffing）</strong></li>\n</ol>\n<ul>\n<li><strong>Diff 算法</strong>：React 使用高效的 diff 算法来比较新旧虚拟 DOM。Diff 算法的主要目的是找出两个虚拟 DOM 树之间的差异，并生成最小的变更集，以便更新实际 DOM。</li>\n<li>主要策略：\n<ul>\n<li><strong>分层比较</strong>：React 先比较两个虚拟 DOM 树的根节点，然后递归比较子节点。只有发生实际变化的部分才会被更新。</li>\n<li><strong>节点类型优化</strong>：React 假设同一层级的节点不会改变类型，从而快速跳过不同类型节点的比较。</li>\n<li><strong>Key 属性优化</strong>：使用 <code>key</code> 属性来标识列表中的元素，帮助 React 识别和重用元素，提高列表渲染的效率。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><strong>更新实际 DOM</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>计算差异</strong>：React 根据 diff 算法计算出需要对实际 DOM 进行的最小变更。例如，添加、删除或修改 DOM 元素。</p>\n</li>\n<li>\n<p><strong>批量更新</strong>：React 将这些变更批量应用到实际 DOM 上，从而减少重绘和重排的次数。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 实际 DOM 更新</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> rootElement</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li><strong>优化虚拟 DOM 的更新</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>函数式更新</strong>：使用函数式组件和 Hooks（如 <code>useState</code>, <code>useEffect</code>）可以更精确地控制组件的更新，避免不必要的虚拟 DOM 生成和比较。</p>\n</li>\n<li>\n<p><strong>Memoization</strong>：使用<code>React.memo</code>和<code>useMemo</code></p>\n<p>等工具来缓存组件和计算结果，减少虚拟 DOM 的不必要更新。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MemoizedComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">memo</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 组件实现</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"6\">\n<li><strong>示例代码</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>创建虚拟 DOM</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> virtualDOM</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">div</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  props</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    children</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">h1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> props</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> children</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Hello, World!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>更新实际 DOM</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 渲染组件，生成虚拟 DOM</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<ol>\n<li><strong>创建虚拟 DOM</strong>：每次组件渲染时，React 生成新的虚拟 DOM 树。</li>\n<li><strong>比较虚拟 DOM</strong>：使用 diff 算法找出新旧虚拟 DOM 的差异。</li>\n<li><strong>更新实际 DOM</strong>：将计算出的差异批量应用到实际 DOM 上，提高性能。</li>\n</ol>\n<p>虚拟 DOM 的实现使得 React 在更新 UI 时更加高效，通过减少直接 DOM 操作和优化更新过程，提升了应用的性能和响应速度。</p>\n"},{"title":"React 中的 VM 一定会提高性能吗？","description":"","answer":"<p>不一定，因为 VM 只是通过 diff 算法避免了一些不需要变更的 DOM 操作，最终还是要操作 DOM 的，并且 diff 的过程也是有成本的。</p>\n<p>对于某些场景，比如都是需要变更 DOM 的操作，因为 VM 还会有额外的 diff 算法的成本在里面，所以 VM 的方式并不会提高性能，甚至比原生 DOM 要慢。</p>\n<p>但是正如尤大大说的，这是一个性能 vs 可维护性的取舍。</p>\n<p>框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。</p>\n<p>没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。</p>\n<p>针对任何一个 benchmark，都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，出于可维护性的考虑，不可能在每一个地方都去做手动优化。</p>\n"},{"title":"React 中的类组件和函数组件之间有什么区别？","description":"","answer":"<p><strong>类组件（Class components）</strong></p>\n<ul>\n<li>无论是使用函数或是类来声明一个组件，它决不能修改它自己的 props。\n<ul>\n<li>所有 React 组件都必须是纯函数，并禁止修改其自身 props。</li>\n</ul>\n</li>\n<li>React是单项数据流，父组件改变了属性，那么子组件视图会更新。\n<ul>\n<li>属性 props是外界传递过来的，状态 state是组件本身的，状态可以在组件中任意修改</li>\n<li>组件的属性和状态改变都会更新视图。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Welcome</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Welcome </span><span style=\"color:#999999\">{</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> }&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">Welcome</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>函数组件（functional component）</strong></p>\n<p>函数组件接收一个单一的 props 对象并返回了一个React元素</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Welcome</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Welcome </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">Welcome</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>区别</strong></p>\n<ul>\n<li>语法上</li>\n</ul>\n<p>两者最明显的不同就是在语法上，函数组件是一个纯函数，它接收一个props对象返回一个react元素。而类组件需要去继承React.Component并且创建render函数返回react元素，这将会要更多的代码，虽然它们实现的效果相同。</p>\n<ul>\n<li>状态管理</li>\n</ul>\n<p>因为函数组件是一个纯函数，你不能在组件中使用setState()，这也是为什么把函数组件称作为无状态组件。</p>\n<p>如果你需要在你的组件中使用state，你可以选择创建一个类组件或者将state提升到你的父组件中，然后通过props对象传递到子组件。</p>\n<ul>\n<li>生命周期钩子</li>\n</ul>\n<p>你不能在函数组件中使用生命周期钩子，原因和不能使用state一样，所有的生命周期钩子都来自于继承的React.Component中。</p>\n<p>因此，如果你想使用生命周期钩子，那么需要使用类组件。</p>\n<p><strong>注意</strong>：在react16.8版本中添加了hooks，使得我们可以在函数组件中使用useState钩子去管理state，使用useEffect钩子去使用生命周期函数。因此，2、3两点就不是它们的区别点。从这个改版中我们可以看出作者更加看重函数组件，而且react团队曾提及到在react之后的版本将会对函数组件的性能方面进行提升。</p>\n<ul>\n<li>调用方式</li>\n</ul>\n<p>如果SayHi是一个函数，React需要调用它：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 你的代码 </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> SayHi</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, React</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// React内部 </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> SayHi</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // » &#x3C;p>Hello, React&#x3C;/p></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>如果SayHi是一个类，React需要先用new操作符将其实例化，然后调用刚才生成实例的render方法：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 你的代码 </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> SayHi</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, React</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// React内部 </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> instance</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> SayHi</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // » SayHi {} </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> instance</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">()</span><span style=\"color:#A0ADA0\"> // » &#x3C;p>Hello, React&#x3C;/p></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>可想而知，函数组件重新渲染将重新调用组件方法返回新的react元素，类组件重新渲染将new一个新的组件实例，然后调用render类方法返回react元素，这也说明为什么类组件中this是可变的。</p>\n"},{"title":"state 和 props有什么区别？","description":"","answer":"<p><strong>一、state</strong></p>\n<p>一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是<code>state</code>，一般在 <code>constructor</code> 中初始化</p>\n<p>当需要修改里面的值的状态需要通过调用<code>setState</code>来改变，从而达到更新组件内部数据的作用，并且重新调用组件<code>render</code>方法，如下面的例子：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Button</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        super</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">            count</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    updateCount</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">prevState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> prevState</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#999999\"> (&#x3C;</span><span style=\"color:#1E754F\">button</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">                    onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">updateCount</span><span style=\"color:#999999\">()}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">                    ></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">                Clicked </span><span style=\"color:#999999\">{</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> times</span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>setState</code>还可以接受第二个参数，它是一个函数，会在<code>setState</code>调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">JS每日一题</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},()=></span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">setState finished</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>二、props</strong></p>\n<p><code>React</code>的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件</p>\n<p>组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是<code>props</code>，所以可以把<code>props</code>理解为从外部传入组件内部的数据</p>\n<p><code>react</code>具有单向数据流的特性，所以他的主要作用是从父组件向子组件中传递数据</p>\n<p><code>props</code>除了可以传字符串，数字，还可以传递对象，数组甚至是回调函数，如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Welcome</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello </span><span style=\"color:#999999\">{</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Welcome</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Sara</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> onNameChanged</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">handleName</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>上述<code>name</code>属性与<code>onNameChanged</code>方法都能在子组件的<code>props</code>变量中访问</p>\n<p>在子组件中，<code>props</code>在内部不可变的，如果想要改变它看，只能通过外部组件传入新的<code>props</code>来重新渲染子组件，否则子组件的<code>props</code>和展示形式不会改变</p>\n<p><strong>三、区别</strong></p>\n<p>相同点：</p>\n<ul>\n<li>两者都是 JavaScript 对象</li>\n<li>两者都是用于保存信息</li>\n<li>props 和 state 都能触发渲染更新</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化</li>\n<li>props 在组件内部是不可修改的，但 state 在组件内部可以进行修改</li>\n<li>state 是多变的、可以修改</li>\n</ul>\n"},{"title":"说说对 React 中Element、Component、Node、Instance 四个概念的理解","description":"","answer":"<p>在 React 中，Element、Component、Node、Instance 是四个重要的概念。</p>\n<ol>\n<li>Element：Element 是 React 应用中最基本的构建块，它是一个普通的 JavaScript 对象，用来描述 UI 的一部分。Element 可以是原生的 DOM 元素，也可以是自定义的组件。它的作用是用来向 React 描述开发者想在页面上 render 什么内容。Element 是不可变的，一旦创建就不能被修改。</li>\n<li>Component：Component 是 React 中的一个概念，它是由 Element 构成的，可以是函数组件或者类组件。Component 可以接收输入的数据（props），并返回一个描述 UI 的 Element。Component 可以被复用，可以在应用中多次使用。分为 <code>Class Component</code> 以及 <code>Function Component</code>。</li>\n<li>Node：Node 是指 React 应用中的一个虚拟节点，它是 Element 的实例。Node 包含了 Element 的所有信息，包括类型、属性、子节点等。Node 是 React 内部用来描述 UI 的一种数据结构，它可以被渲染成真实的 DOM 元素。</li>\n<li>Instance：Instance 是指 React 应用中的一个组件实例，它是 Component 的实例。每个 Component 在应用中都会有一个对应的 Instance，它包含了 Component 的所有状态和方法。Instance 可以被用来操作组件的状态，以及处理用户的交互事件等。</li>\n</ol>\n"},{"title":"怎么在代码中判断一个 React 组件是 class component 还是 function component？","description":"","answer":"<p>可以使用JavaScript的<code>typeof</code>运算符和React的<code>Component</code>类来进行判断。</p>\n<p>下面是一个示例的判断方法：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> isClassComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">component</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    typeof</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    !!</span><span style=\"color:#998418\">component</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">isReactComponent</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例用法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, I'm a function component!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MyClassComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, I'm a class component!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">isClassComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">MyComponent</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // false</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">isClassComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">MyClassComponent</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // true</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>上面定义了一个名为<code>isClassComponent</code>的函数，它接受一个组件作为参数。函数内部使用<code>typeof</code>运算符来判断该组件是否为函数类型，并通过检查<code>component.prototype.isReactComponent</code>属性来确定是否为Class组件。</p>\n"},{"title":"什么是高阶组件？","description":"","answer":"<p><strong>高阶组件</strong>（Higher-Order Component, HOC）是 React 中的一种设计模式，用于增强或修改组件的行为。它是一个接受组件作为参数并返回一个新组件的函数。高阶组件本质上是一个函数，它用于复用组件逻辑和功能，避免在多个组件中重复代码。</p>\n<p><strong>高阶组件的特点</strong></p>\n<ol>\n<li><strong>函数式组件增强</strong>：\n<ul>\n<li><strong>接受组件</strong>：高阶组件（HOC）是一个函数，接受一个组件作为参数。</li>\n<li><strong>返回新组件</strong>：它返回一个新的组件，这个新的组件通常会封装和增强原始组件的功能。</li>\n</ul>\n</li>\n<li><strong>逻辑复用</strong>：\n<ul>\n<li><strong>复用代码</strong>：通过高阶组件，可以在多个组件中复用相同的逻辑和功能，而不需要重复代码。这有助于提高代码的可维护性和一致性。</li>\n</ul>\n</li>\n<li><strong>组件装饰</strong>：\n<ul>\n<li><strong>功能增强</strong>：高阶组件可以为原始组件添加额外的功能或数据，例如提供额外的 props、处理权限控制、数据获取等。</li>\n</ul>\n</li>\n</ol>\n<p><strong>使用示例</strong></p>\n<p>以下是一个简单的高阶组件的示例：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 高阶组件的定义</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> withUserData</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">WrappedComponent</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">        user</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    componentDidMount</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 模拟数据获取</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> user</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John Doe</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> age</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 将状态和 props 传递给原始组件</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">WrappedComponent</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用高阶组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> UserProfile</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Loading...</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Age: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">age</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#59873A\"> withUserData</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">UserProfile</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>高阶组件的常见用途</strong></p>\n<ol>\n<li><strong>权限控制</strong>：\n<ul>\n<li><strong>示例</strong>：可以创建一个高阶组件来检查用户权限，并根据权限控制组件的渲染或访问。</li>\n</ul>\n</li>\n<li><strong>数据获取</strong>：\n<ul>\n<li><strong>示例</strong>：高阶组件可以在挂载时获取数据，并将数据传递给原始组件，避免在多个组件中重复数据获取逻辑。</li>\n</ul>\n</li>\n<li><strong>行为增强</strong>：\n<ul>\n<li><strong>示例</strong>：高阶组件可以为组件添加额外的功能，如事件处理、日志记录等。</li>\n</ul>\n</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><strong>不要修改原始组件</strong>：高阶组件应该尽量不修改原始组件的实现，而是通过组合来增强其功能。</li>\n<li><strong>组件命名</strong>：高阶组件通常会返回一个新的组件，新的组件应该有明确的命名，以便于调试和阅读代码。</li>\n<li><strong>传递静态方法</strong>：如果需要传递静态方法或属性，可能需要手动拷贝静态方法到新组件。</li>\n</ul>\n"},{"title":"是否了解过 React 的架构?新的 Fiber 架构相较于之前的 Stack 架构有什么优势?","description":"","answer":"<p>Stack 架构在进行虛拟 DOM 树比较的时候，采用的是递归，计算会消耗大量的时间、新的 Fiber 架构采用的是链表，可以实现时间切片，防止JS 的计算占用过多的时间从而导致浏览器出现丢帧的现象。</p>\n"},{"title":"constructor 中 super 与 props 参数一起使用的目的是什么？","description":"","answer":"<p>在调用方法之前，子类构造函数无法使用this引用super()。</p>\n<p>在ES6中，在子类的constructor中必须先调用super才能引用this。</p>\n<p>在constructor中可以使用this.props</p>\n<ul>\n<li>使用props：</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">  // Prints { name: 'sudheer',age: 30 }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>不使用props：</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        super</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // Prints undefined</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">        // But Props parameter is still available</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // Prints { name: 'sudheer',age: 30 }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">        // No difference outside constructor</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // Prints { name: 'sudheer',age: 30 }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>上面的代码片段揭示了this.props行为仅在构造函数中有所不同。外部构造函数相同。</p>\n"},{"title":"什么是 JSX？","description":"","answer":"<p>JSX即JavaScript XML。一种在React组件内部构建标签的类XML语法。JSX为react.js开发的一套语法糖，也是react.js的使用基础。React在不使用JSX的情况下一样可以工作，然而使用JSX可以提高组件的可读性，因此推荐使用JSX。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> props</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">my-component</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">a</span><span style=\"color:#B07D48\"> href</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">a</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>允许使用熟悉的语法来定义 HTML 元素树；</li>\n<li>提供更加语义化且移动的标签；</li>\n<li>程序结构更容易被直观化；</li>\n<li>抽象了 React Element 的创建过程；</li>\n<li>可以随时掌控 HTML 标签以及生成这些标签的代码；</li>\n<li>是原生的 JavaScript。</li>\n</ul>\n"},{"title":"说说React事件和原生事件的执行顺序","description":"","answer":""},{"title":"react中，父子组件的生命周期执行顺序是怎么样的？","description":"","answer":"<p>React的生命周期从广义上分为三个阶段：挂载、渲染、卸载，因此可以把React的生命周期分为两类：挂载卸载过程和更新过程。</p>\n<p><strong>一、挂载卸载过程</strong></p>\n<ol>\n<li>constructor，完成了React数据的初始化；</li>\n<li>componentWillMount，组件初始化数据后，但是还未渲染DOM前；</li>\n<li>componentDidMount，组件第一次渲染完成，此时dom节点已经生成；</li>\n<li>componentWillUnmount，组件的卸载和数据的销毁。</li>\n</ol>\n<p><strong>二、更新过程</strong></p>\n<ol>\n<li>componentWillReceiveProps (nextProps)，父组件改变后的props需要重新渲染组件时；</li>\n<li>shouldComponentUpdate(nextProps,nextState)，主要用于性能优化(部分更新)，因为react父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，在这里return false可以阻止组件的更新；</li>\n<li>componentWillUpdate (nextProps,nextState)，shouldComponentUpdate返回true后，组件进入重新渲染的流程；</li>\n<li>componentDidUpdate(prevProps,prevState)，组件更新完毕后触发；</li>\n<li>render()，渲染时触发。</li>\n</ol>\n<p><strong>三、父子组件加载顺序</strong></p>\n<p>观察父子组件的挂载生命周期函数，可以发现挂载时，子组件的挂载钩子先被触发；卸载时，子组件的卸载钩子后被触发。</p>\n<p>我们经常在挂载函数上注册监听器，说明此时是可以与页面交互的，也就是说其实所有挂载钩子都是在父组件实际挂载到dom树上才触发的，不过是在父组件挂载后依次触发子组件的 componentDidmount ，最后再触发自身的挂载钩子，说白了，componentDidMount 其实是异步钩子。</p>\n<p>相反，卸载的时候父节点先被移除，再从上至下依次触发子组件的卸载钩子；</p>\n<p>但是我们也经常在卸载钩子上卸载监听器，这说明 componentWillUnmount 其实在父组件从dom树上卸载前触发的，先触发自身的卸载钩子，但此时并未从dom树上剥离，然后依次尝试触发所有子组件的卸载钩子，最后，父组件从dom树上完成实际卸载。</p>\n"},{"title":"为什么不能在循环、条件或嵌套函数中调用 Hooks？","description":"","answer":""},{"title":"简单介绍下 React 中的 diff 算法","description":"","answer":"<p>diff 算法主要基于三个规律：</p>\n<ul>\n<li>DOM 节点的跨层级移动的操作特别少，可以忽略不计</li>\n<li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构</li>\n<li>对于同一层级的一组子节点，可以通过唯一的 id 进行区分</li>\n</ul>\n<p><strong>tree diff</strong></p>\n<p>因为上面的三个策略中的第一点， DOM 节点的跨级操作比较少，那么 diff 算法只会对相同层级的 DOM 节点进行比较。如果发现节点不存在 那么会将该节点以及其子节点完全删除，不会再继续比较。如果出现了 DOM 节点的跨层级的移动操作，那么会删除改节点以及其所有的子节点，然后再移动后的位置重新创建。</p>\n<p><strong>component diff</strong></p>\n<p>如果是同一类型的组件，那么会继续对比 VM 数</p>\n<p>如果不是同一类型的组件，那么会将其和其子节点完全替换，不会再进行比对</p>\n<p>同一类型的组件，有可能 VM 没有任何的变化，如果可以确定的知道这点，那么就可以节省大量的 diff 时间，所以用户可以设置 shouldComponentUpdate() 来判断是否需要进行 diff 算法。</p>\n<p><strong>element diff</strong></p>\n<p>当节点处于同一层级的时候时，有三种操作：INSERT_MAKEUP插入、 MOVE_EXISTING 移动、 REMOVE_NODE 删除</p>\n<p>这里 React 有一个优化策略，对于同一层级的同组子节点，添加唯一的 key 进行区分。这样的话，就可以判断出来是否是移动节点。通过 key 发现新旧集合中的节点都是相同的节点，就只需要进行移动操作就可以。</p>\n"},{"title":"在 react 中怎么实现组件间的过渡动画？","description":"","answer":"<p><strong>一、是什么</strong></p>\n<p>在日常开发中，页面切换时的转场动画是比较基础的一个场景</p>\n<p>当一个组件在显示与消失过程中存在过渡动画，可以很好的增加用户的体验</p>\n<p>在<code>react</code>中实现过渡动画效果会有很多种选择，如<code>react-transition-group</code>，<code>react-motion</code>，<code>Animated</code>，以及原生的<code>CSS</code>都能完成切换动画</p>\n<p><strong>二、如何实现</strong></p>\n<p>在<code>react</code>中，<code>react-transition-group</code>是一种很好的解决方案，其为元素添加<code>enter</code>，<code>enter-active</code>，<code>exit</code>，<code>exit-active</code>这一系列勾子</p>\n<p>可以帮助我们方便的实现组件的入场和离场动画</p>\n<p>其主要提供了三个主要的组件：</p>\n<ul>\n<li>CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果</li>\n<li>SwitchTransition：两个组件显示和隐藏切换时，使用该组件</li>\n<li>TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画</li>\n</ul>\n<p><strong>CSSTransition</strong></p>\n<p>其实现动画的原理在于，当<code>CSSTransition</code>的<code>in</code>属性置为<code>true</code>时，<code>CSSTransition</code>首先会给其子组件加上<code>xxx-enter</code>、<code>xxx-enter-active</code>的<code>class</code>执行动画</p>\n<p>当动画执行结束后，会移除两个<code>class</code>，并且添加<code>-enter-done</code>的<code>class</code></p>\n<p>所以可以利用这一点，通过<code>css</code>的<code>transition</code>属性，让元素在两个状态之间平滑过渡，从而得到相应的动画效果</p>\n<p>当<code>in</code>属性置为<code>false</code>时，<code>CSSTransition</code>会给子组件加上<code>xxx-exit</code>和<code>xxx-exit-active</code>的<code>class</code>，然后开始执行动画，当动画结束后，移除两个<code>class</code>，然后添加<code>-enter-done</code>的<code>class</code></p>\n<p>如下例子：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> App2</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">PureComponent</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\">show</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  onToggle</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\">show</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">={</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">container</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">={</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">square-wrapper</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;</span><span style=\"color:#998418\">CSSTransition</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            in</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            timeout</span><span style=\"color:#999999\">={</span><span style=\"color:#2F798A\">500</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            classNames</span><span style=\"color:#999999\">={</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">fade</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            unmountOnExit</span><span style=\"color:#999999\">={</span><span style=\"color:#1E754F\">true</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          ></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">={</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">square</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;/</span><span style=\"color:#998418\">CSSTransition</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onToggle</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">toggle</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">Button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>对应<code>css</code>样式如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">fade</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translateX</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">fade</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translateX</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">fade</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translateX</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">fade</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translateX</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>SwitchTransition</strong></p>\n<p><code>SwitchTransition</code>可以完成两个组件之间切换的炫酷动画</p>\n<p>比如有一个按钮需要在<code>on</code>和<code>off</code>之间切换，我们希望看到<code>on</code>先从左侧退出，<code>off</code>再从右侧进入</p>\n<p><code>SwitchTransition</code>中主要有一个属性<code>mode</code>，对应两个值：</p>\n<ul>\n<li>in-out：表示新组件先进入，旧组件再移除；</li>\n<li>out-in：表示就组件先移除，新组建再进入</li>\n</ul>\n<p><code>SwitchTransition</code>组件里面要有<code>CSSTransition</code>，不能直接包裹你想要切换的组件</p>\n<p>里面的<code>CSSTransition</code>组件不再像以前那样接受<code>in</code>属性来判断元素是何种状态，取而代之的是<code>key</code>属性</p>\n<p>下面给出一个按钮入场和出场的示例，如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> SwitchTransition</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> CSSTransition</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">react-transition-group</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> SwitchAnimation</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> PureComponent</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      isOn</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\">isOn</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">SwitchTransition</span><span style=\"color:#B07D48\"> mode</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">out-in</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">CSSTransition</span><span style=\"color:#B07D48\"> classNames</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">btn</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">                       timeout</span><span style=\"color:#999999\">={</span><span style=\"color:#2F798A\">500</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">                       key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isOn</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">on</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">off</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">          {</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">btnClick</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">bind</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">)}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            {</span><span style=\"color:#B07D48\">isOn</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">on</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#AB5959\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">off</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">CSSTransition</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#998418\">SwitchTransition</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  btnClick</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\">isOn</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">isOn</span><span style=\"color:#999999\">})</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>css</code>文件对应如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">btn</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">btn</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">btn</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">btn</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>TransitionGroup</strong></p>\n<p>当有一组动画的时候，就可将这些<code>CSSTransition</code>放入到一个<code>TransitionGroup</code>中来完成动画</p>\n<p>同样<code>CSSTransition</code>里面没有<code>in</code>属性，用到了<code>key</code>属性</p>\n<p><code>TransitionGroup</code>在感知<code>children</code>发生变化的时候，先保存移除的节点，当动画结束后才真正移除</p>\n<p>其处理方式如下：</p>\n<ul>\n<li>插入的节点，先渲染dom，然后再做动画</li>\n<li>删除的节点，先做动画，然后再删除dom</li>\n</ul>\n<p>如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> PureComponent</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> CSSTransition</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> TransitionGroup</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-transition-group</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> GroupAnimation</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> PureComponent</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      friends</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> []</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">TransitionGroup</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">          {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">            this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friends</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">              return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">                &#x3C;</span><span style=\"color:#998418\">CSSTransition</span><span style=\"color:#B07D48\"> classNames</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">friend</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\">={</span><span style=\"color:#2F798A\">300</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">                  &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">                &#x3C;/</span><span style=\"color:#998418\">CSSTransition</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">              )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">            })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">TransitionGroup</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\"> =></span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addFriend</span><span style=\"color:#999999\">()}></span><span style=\"color:#393A34\">+friend</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  addFriend</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      friends</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [...</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friends</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">coderwhy</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>对应<code>css</code>如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friend</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friend</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">enter</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friend</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">friend</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">exit</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transform</span><span style=\"color:#999999\">:</span><span style=\"color:#59873A\"> translate</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">100</span><span style=\"color:#AB5959\">%</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    opacity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    transition</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> all</span><span style=\"color:#393A34\"> 500</span><span style=\"color:#B07D48\">ms</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"在 React 中可以做哪些性能优化？","description":"","answer":"<ul>\n<li>使用 shouldComponentUpdate 避免不需要的渲染，但是如果对 props 和 state 做深比较，代价很大，所以需要根据业务进行些取舍；在有子组件的情况下，为了避免子组件的重复渲染，可以通过父组件来判断子组件是否需要 PureRender。</li>\n<li>将 props 设置为数组或对象：每次调用 React 组件都会创建新组件，就算传入的数组或对象的值没有改变，他们的引用地址也会发生改变，比如，如果按照如下的写法，那么每次渲染时 style 都是一个新对象</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 不推荐</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">red</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 推荐</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">red</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">style</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 不推荐</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">style</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#999999\"> {}</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> /></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 推荐</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> defaultStyle</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">style</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> defaultStyle</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> /></span><span style=\"color:#393A34\">   </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>将函数的绑定移动到构造函数内：可以避免每次都绑定事件。</li>\n<li>使用 immutable 不可变数据，在我们项目中使用引用类型时，为了避免对原始数据的影响，一般建议使用 shallowCopy 和 deepCopy 对数据进行处理，但是这样会造成 CPU 和 内存的浪费，所以推荐使用 immutable，优点如下\n<ul>\n<li>降低了“可变”带来的复杂度</li>\n<li>节省内存，immutable 使用结构共享尽量复用内存，没有被引用的对象会被垃圾回收</li>\n<li>可以更好的做撤销/重做，复制/粘贴，时间旅行</li>\n<li>不会有并发问题（因为数据本身就是不可变的）</li>\n<li>拥抱函数式编程</li>\n</ul>\n</li>\n<li>给子组件设置一个唯一的 key，因为在 diff 算法中，会用 key 作为唯一标识优化渲染</li>\n</ul>\n"},{"title":"为什么不能直接使用 this.state 改变数据？","description":"","answer":"<p>react中不能直接修改state，因为并不会重新触发render。</p>\n<p>以如下方式更新状态，组件不会重新渲染。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">//Wrong</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">This</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">message</span><span style=\"color:#999999\"> =</span><span style=\"color:#393A34\">”</span><span style=\"color:#B07D48\">Hello</span><span style=\"color:#B07D48\"> world</span><span style=\"color:#393A34\">”</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>而是需要使用setState()方法，状态改变时，组件通过重新渲染做出响应。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">//Correct</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">This</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\">message</span><span style=\"color:#999999\">:</span><span style=\"color:#393A34\"> ‘</span><span style=\"color:#B07D48\">Hello</span><span style=\"color:#B07D48\"> World</span><span style=\"color:#393A34\">’</span><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>setState通过一个队列机制来实现 state 更新。当执行 setState 的时候，会将需要更新的 state 合并后放入状态队列，而不会立刻更新 this.state。队列机制可以高效的批量更新 state，如果不通过 setState 而直接修改 this.state，那么该 state 将不会被放入状态队列中，当下次调用 setState 并对状态队列进行合并时，将会忽略之前被直接修改的 state，而造成无法预知的错误。</p>\n"},{"title":"React Hooks带来了什么便利？","description":"","answer":"<p>React Hooks 带来了许多便利，使得函数组件的开发更加简洁和高效。以下是主要的便利点：</p>\n<ol>\n<li><strong>简化状态管理</strong></li>\n</ol>\n<ul>\n<li>\n<p><code>useState</code>：允许在函数组件中管理状态，避免了类组件中复杂的状态初始化和方法绑定。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>简化副作用处理</strong></li>\n</ol>\n<ul>\n<li>\n<p><code>useEffect</code>：统一了副作用的处理，替代了<code>componentDidMount</code>、<code>componentDidUpdate</code>和<code>componentWillUnmount</code></p>\n<p>，并可以处理多种副作用场景。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 执行副作用</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 清理副作用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dependencies</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span></span></span>\n<span class=\"line\"><span>3. **共享逻辑**</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>- **自定义 Hooks**：允许将逻辑提取到可复用的函数中，避免了类组件中重复的逻辑和代码。</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>  ```javascript</span></span>\n<span class=\"line\"><span>  function useCustomHook() {</span></span>\n<span class=\"line\"><span>    const [value, setValue] = useState(0);</span></span>\n<span class=\"line\"><span>    // 自定义逻辑</span></span>\n<span class=\"line\"><span>    return [value, setValue];</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol start=\"4\">\n<li><strong>更清晰的组件结构</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>函数组件</strong>：Hooks 使函数组件能够管理状态和副作用，简化了组件的结构，避免了类组件中的复杂生命周期方法。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 副作用逻辑</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}>{</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li><strong>避免 this 绑定问题</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>函数组件</strong>：Hooks 消除了类组件中<code>this</code>的复杂性和绑定问题，使代码更简洁、更易理解。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 不需要绑定 `this`</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"6\">\n<li><strong>改进了逻辑复用</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>Hooks 组合</strong>：可以将多个 Hooks 组合在一起，灵活地管理和复用逻辑。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> loading</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useFetchData</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#A0ADA0\">/* UI 逻辑 */</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"7\">\n<li><strong>提升代码的可读性和维护性</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>逻辑集中</strong>：通过 Hooks 将相关逻辑集中在一个地方，提升了代码的可读性和维护性。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> useCounter</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">initialValue</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">initialValue</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> increment</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">c</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> c</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> decrement</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">c</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> c</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> increment</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> decrement</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"8\">\n<li><strong>支持异步操作</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong><code>useEffect</code> 和自定义 Hooks</strong>：支持处理异步操作和副作用，使得处理数据获取和副作用变得更加直观。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> fetchData</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">api/data</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 处理数据</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  fetchData</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"9\">\n<li><strong>性能优化</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong><code>useMemo</code> 和 <code>useCallback</code></strong>：提供了优化性能的工具，避免不必要的计算和函数重新创建。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> memoizedValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useMemo</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> computeExpensiveValue</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">),</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> memoizedCallback</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useCallback</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* callback logic */</span><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dependencies</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>React Hooks 提供了简洁的 API，使得函数组件能够管理状态、副作用和逻辑复用，从而提升了开发效率、代码可读性和维护性。它们消除了类组件中的复杂性，使得编写和理解 React 组件变得更加直观。</p>\n"},{"title":"列举几个常见的 Hook?","description":"","answer":"<p>在 React 中，Hooks 是一组可以让函数组件拥有状态和副作用的 API。</p>\n<p>以下是一些常见的 Hook 及其用途：</p>\n<ol>\n<li><strong><code>**useState**</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：在函数组件中添加状态。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Counter</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">You clicked </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> times</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Click me</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong><code>useEffect</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：在函数组件中处理副作用，如数据获取、订阅和手动 DOM 操作。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Example</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setData</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">https://api.example.com/data</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">())</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setData</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span><span style=\"color:#A0ADA0\"> // 空数组表示只在组件挂载时执行一次</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">data</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">Data: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">data</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Loading...</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong><code>useContext</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：在组件中访问 React 的 Context。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useContext</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> createContext</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MyContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> createContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">defaultValue</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Display</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">MyContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">MyContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Hello, World!</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Display</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">MyContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li><strong><code>useReducer</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：管理复杂状态逻辑，类似于 Redux 的 reducer。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useReducer</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  switch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    default</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      throw</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Error</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Counter</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reducer</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">Increment</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">Decrement</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li><strong><code>useMemo</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：优化性能，通过记忆化计算结果，避免不必要的重新计算。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useMemo</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ExpensiveComponent</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> compute</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useMemo</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> compute</span><span style=\"color:#999999\">(),</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">compute</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Result: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">result</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> compute</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 模拟一个计算过程</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Increment</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ExpensiveComponent</span><span style=\"color:#B07D48\"> compute</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">compute</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"6\">\n<li><strong><code>useCallback</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：记忆化回调函数，避免在依赖项变化时重新创建函数。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useCallback</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Button</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Button rendered</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">onClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Click me</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useCallback</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Button clicked!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span><span style=\"color:#A0ADA0\"> // 依赖项为空数组表示回调函数不会变化</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Increment</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<ol start=\"7\">\n<li><strong><code>useRef</code></strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>用途</strong>：在函数组件中创建可变的引用，通常用于访问 DOM 元素或保存任何可变数据。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> FocusInput</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">text</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Focus the input</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p>这些 Hooks 提供了处理状态、副作用、上下文、性能优化等常见需求的功能，使得函数组件变得更加灵活和强大。</p>\n"},{"title":"React Hooks 在使用上有哪些限制？","description":"","answer":"<p>React Hooks 的限制主要有两条：</p>\n<ul>\n<li>不要在循环、条件或嵌套函数中调用 Hook；</li>\n<li>在 React 的函数组件中调用 Hook。</li>\n</ul>\n<p>那为什么会有这样的限制呢？就得从 Hooks 的设计说起。Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。</p>\n<ul>\n<li>组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。</li>\n<li>复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。</li>\n<li>人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，他们希望在编译优化层面做出一些改进。</li>\n</ul>\n<p>这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks 基于函数组件开始设计。然而第三个问题决定了 Hooks 只支持函数组件。</p>\n<p>那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是<strong>类似于数组</strong>实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，<strong>实质上 React 的源码里不是数组，是链表</strong>。</p>\n<p>这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。</p>\n"},{"title":"useEffect 与 useLayoutEffect 有什么区别？","description":"","answer":"<p><strong>共同点</strong></p>\n<ul>\n<li>运用效果： useEffect 与 useLayoutEffect 两者都是用于处理副作用，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。</li>\n<li>使用方式： useEffect 与 useLayoutEffect 两者底层的函数签名是完全一致的，都是调用的 mountEffectImpl方法，在使用上也没什么差异，基本可以直接替换。</li>\n</ul>\n<p><strong>不同点</strong></p>\n<ul>\n<li>使用场景： useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景；而 useLayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 useLayoutEffect 做计算量较大的耗时任务从而造成阻塞。</li>\n<li>使用效果： useEffect是按照顺序执行代码的，改变屏幕像素之后执行（先渲染，后改变DOM），当改变屏幕内容时可能会产生闪烁；useLayoutEffect是改变屏幕像素之前就执行了（会推迟页面显示的事件，先改变DOM后渲染），不会产生闪烁。useLayoutEffect总是比useEffect先执行。</li>\n</ul>\n<p>在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。</p>\n"},{"title":"说说你对 useContext 的理解","description":"","answer":""},{"title":"说说你对 useMemo 的理解","description":"","answer":""},{"title":"说说你对自定义hook的理解","description":"","answer":""},{"title":"如何让 useEffect 支持 async/await？","description":"","answer":""},{"title":"React 中怎么实现状态自动保存（KeepAlive）？","description":"","answer":"<p><strong>什么是状态保存？</strong></p>\n<p>假设有下述场景：</p>\n<p>移动端中，用户访问了一个列表页，上拉浏览列表页的过程中，随着滚动高度逐渐增加，数据也将采用触底分页加载的形式逐步增加，列表页浏览到某个位置，用户看到了感兴趣的项目，点击查看其详情，进入详情页，从详情页退回列表页时，需要停留在离开列表页时的浏览位置上</p>\n<p>类似的数据或场景还有已填写但未提交的表单、管理系统中可切换和可关闭的功能标签等，这类数据随着用户交互逐渐变化或增长，这里理解为状态，在交互过程中，因为某些原因需要临时离开交互场景，则需要对状态进行保存</p>\n<p>在 React 中，我们通常会使用路由去管理不同的页面，而在切换页面时，路由将会卸载掉未匹配的页面组件，所以上述列表页例子中，当用户从详情页退回列表页时，会回到列表页顶部，因为列表页组件被路由卸载后重建了，状态被丢失。</p>\n<p><strong>如何实现 React 中的状态保存</strong></p>\n<p>在 Vue 中，我们可以非常便捷地通过 &lt;keep-alive&gt; 标签实现状态的保存，该标签会缓存不活动的组件实例，而不是销毁它们</p>\n<p>而在 React 中并没有这个功能，曾经有人在官方提过相关 issue ，但官方认为这个功能容易造成内存泄露，表示暂时不考虑支持，所以我们需要自己想办法了。</p>\n<p><strong>常见的解决方式：手动保存状态</strong></p>\n<p>手动保存状态，是比较常见的解决方式，可以配合 React 组件的 componentWillUnmount 生命周期通过 redux 之类的状态管理层对数据进行保存，通过 componentDidMount 周期进行数据恢复</p>\n<p>在需要保存的状态较少时，这种方式可以比较快地实现我们所需功能，但在数据量大或者情况多变时，手动保存状态就会变成一件麻烦事了</p>\n<p>作为程序员，当然是尽可能懒啦，为了不需要每次都关心如何对数据进行保存恢复，我们需要研究如何自动保存状态</p>\n<p><strong>通过路由实现自动状态保存（通常使用 react-router）</strong></p>\n<p>既然 React 中状态的丢失是由于路由切换时卸载了组件引起的，那可以尝试从路由机制上去入手，<strong>改变路由对组件的渲染行为</strong></p>\n<p>我们有以下的方式去实现这个功能：</p>\n<ul>\n<li>重写 &lt;Route&gt; 组件，可参考 <a href=\"https://github.com/fi3ework/react-live-route\" target=\"_blank\" rel=\"noopener noreferrer\">react-live-route</a>。重写可以实现我们想要的功能，但成本也比较高，需要注意对原始 &lt;Route&gt; 功能的保存，以及多个 react-router 版本的兼容</li>\n<li>重写路由库，可参考 <a href=\"https://github.com/lanistor/react-keeper\" target=\"_blank\" rel=\"noopener noreferrer\">react-keeper</a> 。重写路由库成本是一般开发者无法承受的，且完全替换掉路由方案是一个风险较大的事情，需要较为慎重地考虑。</li>\n<li>基于 &lt;Route&gt; 组件现有行为做拓展，可参考 <a href=\"https://github.com/CJY0208/react-router-cache-route\" target=\"_blank\" rel=\"noopener noreferrer\">react-router-cache-route</a> 。在阅读了 &lt;Route&gt; 的源码后发现，如果使用 component 或者 render 属性，都无法避免路由在不匹配时被卸载掉的命运。但将 children 属性当作方法来使用，我们就有手动控制渲染的行为的可能。</li>\n</ul>\n<p>上面几种方案，主要通过路由入手实现自动状态保存的可能，但终究不是真实的、纯粹的 KeepAlive 功能。</p>\n<p><strong>模拟真实的 &lt;KeepAlive&gt; 功能</strong></p>\n<p>以下是期望的使用方式</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setShow</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">true</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setShow</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\"> =></span><span style=\"color:#AB5959\"> !</span><span style=\"color:#B07D48\">show</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Toggle</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">show</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">KeepAlive</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;</span><span style=\"color:#998418\">Test</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">KeepAlive</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      )}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>下面简单介绍下 <a href=\"https://github.com/CJY0208/react-activation\" target=\"_blank\" rel=\"noopener noreferrer\">react-activation</a> 的实现原理：由于 React 会卸载掉处于固有组件层级内的组件，所以我们需要将 &lt;KeepAlive&gt; 中的组件，也就是其 children 属性抽取出来，渲染到一个不会被卸载的组件 &lt;Keeper&gt; 内，再使用 DOM 操作将 &lt;Keeper&gt; 内的真实内容移入对应 &lt;KeepAlive&gt;，就可以实现此功能。</p>\n"},{"title":"下面函数组件的输出分别是什么？","description":"<p>下面是一个简单的函数组件，有两个按钮：“alert”、“add”。</p>\n<p>如果先点击“alert”按钮，再点击一次“add”按钮，那么弹窗框中的值和页面中展示<code>value</code>分别是什么？</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> FunctionComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setValue</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> log</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">FunctionComponent</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">value: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">alert</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setValue</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">add</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<hr>\n","answer":"<p>弹出的值是 <strong>1</strong>，页面显示的值是 <strong>2</strong></p>\n<p>我们发现弹出的值和当前页面显示的值不相同。</p>\n<p>换句话说：<strong>log 方法内的 value 和点击动作触发那一刻的 value 相同，value 的后续变化不会对 log 方法内的 value 造成影响</strong>。</p>\n<p>这种现象被称为“闭包陷阱”或者被叫做“Capture Value” ：函数式组件每次render 都会生产一个新的 log 函数，这个新的 log 函数会产生一个在当前这个阶段 value 值的闭包。</p>\n<p>上面例子 “闭包陷阱” 的分析：</p>\n<ol>\n<li>初始次渲染，生成一个 log 函数（value = 1）</li>\n<li>value 为 1 时，点击 alert 按钮执行 log 函数（value = 1）</li>\n<li>点击按钮增加 value，比如 value 增加到 6，组件 render ，生成一个新的 log 函数（value = 6）</li>\n<li>计时器触发，log 函数（value = 1）弹出闭包内的 value 为 1</li>\n</ol>\n<p>如何让弹窗中展示最新的value值呢？</p>\n<p><strong>使用 useRef 解决闭包陷阱的问题</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> FunctionComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setValue</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> countRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> log</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">countRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    countRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">FunctionComponent</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">value: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">alert</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setValue</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">add</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>useRef</strong> 每次 render 时都会返回<strong>同一个引用类型的对象</strong>，我们设置值和读取值都在这个对象上处理，这样就能获取到最新的 value 值了。</p>\n"},{"title":"React Hooks 当中的 useEffect 是如何区分生命周期钩子的","description":"","answer":"<p>useEffect可以看成是 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 三者的结合。</p>\n<p>useEffect(callback, [source])接收两个参数，调用方式如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">   console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">mounted</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">   </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">   return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">       console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">willUnmount</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">   }</span></span>\n<span class=\"line\"><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">source</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>生命周期函数的调用主要是通过第二个参数<code>[source]</code>来进行控制，有如下几种情况：</p>\n<ul>\n<li>[source]参数不传时，则每次都会优先调用上次保存的函数中返回的那个函数，然后再调用外部那个函数；</li>\n<li>[source]参数传[]时，则外部的函数只会在初始化时调用一次，返回的那个函数也只会最终在组件卸载时调用一次；</li>\n<li>[source]参数有值时，则只会监听到数组中的值发生变化后才优先调用返回的那个函数，再调用外部的函数。</li>\n</ul>\n"},{"title":"react-router 里的 \\<Link> 标签和 \\<a> 标签有什么区别？","description":"","answer":"<p>对比 &lt;a&gt; 标签, Link 避免了不必要的重新渲染。</p>\n<p>react-router是伴随着react框架出现的路由系统，它也是公认的一种优秀的路由解决方案。在使用react-router时候，我们常常会使用其自带的路径跳转组件Link,通过实现跳转；</p>\n<p>react-router 接管了其默认的链接跳转行为，与传统的页面跳转有区别的是，Link 的 <strong>“跳转”</strong> 行为只会触发相匹配的对应的页面内容更新，而不会刷新整个页面。</p>\n<p>Link 跳转做了三件事情：</p>\n<ul>\n<li>有onclick那就执行onclick</li>\n<li>click的时候阻止a标签默认事件</li>\n<li>根据跳转 href，用 history 跳转，此时只是链接变了，并没有刷新页面</li>\n</ul>\n<p>而 a 标签就是普通的超链接了，用于从当前页面跳转到href指向的另一个页面（非锚点情况）。使用React Hooks有什么优势？</p>\n<p>hooks 是react 16.8 引入的特性，他允许你在不写class的情况下操作state 和react的其他特性。</p>\n<p>React Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之后的第三种状态共享方案，不会产生 JSX 嵌套地狱问题。</p>\n<p>这个状态指的是状态逻辑，所以称为状态逻辑复用会更恰当，因为只共享数据处理逻辑，不会共享数据本身。</p>\n"},{"title":"简述下 React 的事件代理机制？","description":"","answer":"<p>React 并不会把所有的处理函数直接绑定在真实的节点上。而是把所有的事件绑定到结构的最外层，使用一个统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。</p>\n<p>当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象。</p>\n<p>当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。</p>\n<p>这样做的优点是解决了兼容性问题，并且简化了事件处理和回收机制（不需要手动的解绑事件，React 已经在内部处理了）。但是有些事件 React 并没有实现，比如 window 的 resize 事件。</p>\n<p>在<code>React@17.0.3</code>版本中：</p>\n<ul>\n<li>所有事件都是委托在<code>id = root</code>的DOM元素中（网上很多说是在<code>document</code>中，<code>17</code>版本不是了）；</li>\n<li>在应用中所有节点的事件监听其实都是在<code>id = root</code>的DOM元素中触发；</li>\n<li><code>React</code>自身实现了一套事件冒泡捕获机制；</li>\n<li><code>React</code>实现了合成事件<code>SyntheticEvent</code>；</li>\n<li><code>React</code>在<code>17</code>版本不再使用事件池了（网上很多说使用了对象池来管理合成事件对象的创建销毁，那是<code>16</code>版本及之前）；</li>\n<li>事件一旦在<code>id = root</code>的DOM元素中委托，其实是一直在触发的，只是没有绑定对应的回调函数；</li>\n</ul>\n<p><img src=\"https://static.ecool.fun//article/eeeadcee-a840-40f8-9a26-3f2f747b2ef6.jpeg\" alt=\"img\"></p>\n<p>预览</p>\n<p>盗用一张官方图，按官方解释，之所以会将事件委托从<code>document</code>中移到<code>id = root</code>的DOM元素，是为了<strong>可以更加安全地进行新旧版本 React 树的嵌套</strong>。</p>\n"},{"title":"React 的事件代理机制和原生事件绑定有什么区别？","description":"","answer":"<ul>\n<li>事件传播与阻止事件的传播： React 的合成事件并没有实现事件捕获 只支持了事件冒泡。阻止事件传播 React 做了兼容性处理，只需要 e.preventDefault() 即可，原生存在兼容性问题。</li>\n<li>事件类型：React 是 原生事件类型 的一个子集（React 只是实现了 DOM level3 的事件接口，有些事件 React 并没有实现，比如 window 的 resize 事件。）阻止 React 事件冒泡的行为只能用于 React 合成事件系统，但是 在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。</li>\n<li>事件的绑定方式：原生事件系统中支持多种不同的绑定事件的方式，React 中只有一种</li>\n<li>事件对象：原生中存在 IE 的兼容性问题，React 做了兼容处理。</li>\n</ul>\n"},{"title":"React 的事件代理机制和原生事件绑定混用会有什么问题？","description":"","answer":"<p>我们在平时的开发中应该尽可能的避免 React 的事件代理机制和原生事件绑定混用。</p>\n<p>React 的合成事件层，并没有将事件直接绑定到 DOM 元素上，所以使用 e.stopPropagation() 来阻止原生 DOM 的冒泡的行为是不行的。阻止 React 事件冒泡的行为只能用于 React 合成事件系统，但是 在原生事件中的阻止冒泡行为，却可以阻止 React 合成事件的传播。</p>\n"},{"title":"React 组件间怎么进行通信？","description":"","answer":"<p><strong>一、是什么</strong></p>\n<p>我们将组件间通信可以拆分为两个词：</p>\n<ul>\n<li>组件</li>\n<li>通信</li>\n</ul>\n<p><code>React</code>的组件灵活多样，按照不同的方式可以分成很多类型的组件</p>\n<p>而通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的，广义上，任何信息的交通都是通信</p>\n<p>组件间通信即指组件通过某种方式来传递信息以达到某个目的</p>\n<p><strong>二、如何通信</strong></p>\n<p>组件传递的方式有很多种，根据传送者和接收者可以分为如下：</p>\n<ul>\n<li>父组件向子组件传递</li>\n<li>子组件向父组件传递</li>\n<li>兄弟组件之间的通信</li>\n<li>父组件向后代组件传递</li>\n<li>非关系组件传递</li>\n</ul>\n<p><strong>父组件向子组件传递</strong></p>\n<p>由于<code>React</code>的数据流动为单向的，父组件向子组件传递是最常见的方式</p>\n<p>父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过<code>props</code>属性就能接收父组件传递过来的参数</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> EmailInput</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">      Email: </span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">email</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">EmailInput</span><span style=\"color:#B07D48\"> email</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">123124132@163.com</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>子组件向父组件传递</strong></p>\n<p>子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值</p>\n<p>父组件对应代码如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Parents</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      price</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  getItemPrice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      price</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> e</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">price: </span><span style=\"color:#999999\">{</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">price</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        {</span><span style=\"color:#A0ADA0\">/* 向子组件中传入一个函数  */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Child</span><span style=\"color:#B07D48\"> getPrice</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">getItemPrice</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">bind</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">)}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>子组件对应代码如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Child</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  clickGoods</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 在此函数中传入值</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getPrice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clickGoods</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">bind</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 100</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">goods1</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clickGoods</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">bind</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">goods2</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>兄弟组件之间的通信</strong></p>\n<p>如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Parent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\">count</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  setCount</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\">count</span><span style=\"color:#999999\">:</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">})</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">SiblingA</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          count</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">SiblingB</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">setCount</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>父组件向后代组件传递</strong></p>\n<p>父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样</p>\n<p>使用<code>context</code>提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据</p>\n<p>通过使用<code>React.createContext</code>创建一个<code>context</code></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\"> const</span><span style=\"color:#B07D48\"> PriceContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">price</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>context</code>创建成功后，其下存在<code>Provider</code>组件用于创建数据源，<code>Consumer</code>组件用于接收数据，使用实例如下：</p>\n<p><code>Provider</code>组件通过<code>value</code>属性用于给后代组件传递数据：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">PriceContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#2F798A\">100</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">PriceContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>如果想要获取<code>Provider</code>传递的数据，可以通过<code>Consumer</code>组件或者或者使用<code>contextType</code>属性接收，对应分别如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyClass</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  static</span><span style=\"color:#B07D48\"> contextType</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> PriceContext</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> price</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">context</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    /* 基于这个值进行渲染工作 */</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>Consumer</code>组件：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">PriceContext.Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    {</span><span style=\"color:#A0ADA0\"> /*这里是一个函数*/</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        price</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">price：</span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">price</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">PriceContext.Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>非关系组件传递</strong></p>\n<p>如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如<code>redux</code>。关于<code>redux</code>的使用后续再详细介绍</p>\n<p><strong>三、总结</strong></p>\n<p>由于<code>React</code>是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值</p>\n<p>因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中React 中如果绑定事件使用匿名函数有什么影响？</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Demo</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">我点击了按钮</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">      按钮</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>这样的写法，因为使用的是匿名函数，所以组件每次都会认为是一个新的 props，不会使用缓存优化，在性能上会有一定的损耗。</p>\n"},{"title":"说说你对 Redux 的理解？其工作原理？","description":"","answer":""},{"title":"Redux 中异步的请求怎么处理","description":"","answer":"<p>一般的异步请求，可以在 <code>componentDidmount</code> 中直接进⾏请求，⽆须借助redux。</p>\n<p>但是在⼀定规模的项⽬中,上述⽅法很难进⾏异步流的管理,通常情况下我们会借助redux的异步中间件进⾏异步处理。</p>\n<p>redux异步流中间件其实有很多，当下主流的异步中间件有两种<code>redux-thunk</code>、<code>redux-saga</code>。</p>\n<ol>\n<li><strong>使用react-thunk中间件</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>redux-thunk优点:</strong></p>\n<ul>\n<li>体积⼩: redux-thunk的实现⽅式很简单，只有不到20⾏代码</li>\n<li>使⽤简单: redux-thunk没有引⼊像<code>redux-saga</code>或者<code>redux-observable</code>额外的范式，上⼿简单</li>\n</ul>\n</li>\n<li>\n<p><strong>redux-thunk缺陷:</strong></p>\n<ul>\n<li>\n<p>样板代码过多: 与redux本身⼀样,通常⼀个请求需要⼤量的代码,⽽且很多都是重复性质的</p>\n</li>\n<li>\n<p>耦合严重: 异步操作与redux的action偶合在⼀起,不⽅便管理</p>\n</li>\n<li>\n<p>功能孱弱: 有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>使用redux-saga中间件</li>\n</ol>\n<ul>\n<li>\n<p><strong>redux-saga优点:</strong></p>\n<ul>\n<li>\n<p>异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中</p>\n</li>\n<li>\n<p>action摆脱<code>thunk function</code>: dispatch 的参数依然是⼀个纯粹的 action (FSA)，⽽不是充满 “⿊魔法” thunk function</p>\n</li>\n<li>\n<p>异常处理: 受益于 <code>generator function</code> 的 saga 实现，代码异常/请求失败 都可以直接通过 <code>try/catch</code> 语法直接捕获处理</p>\n</li>\n<li>\n<p>功能强⼤: <code>redux-saga</code>提供了⼤量的 Saga 辅助函数和 Effect 创建器供开发者使⽤,开发者⽆须封装或者简单封装即可使⽤</p>\n</li>\n<li>\n<p>灵活: redux-saga可以将多个Saga可以串⾏/并⾏组合起来,形成⼀个⾮常实⽤的异步flow</p>\n</li>\n<li>\n<p>易测试，提供了各种case的测试⽅案，包括mock task，分⽀覆盖等等</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>redux-saga缺陷:</strong></p>\n<ul>\n<li>\n<p>额外的学习成本: <code>redux-saga</code>不仅在使⽤难以理解的 <code>generator function</code>，⽽且有数⼗个API，学习成本远超redux-thunk。最重要的是你的额外学习成本是只服务于这个库的，与<code>redux-observable</code>不同，<code>redux-observable</code>虽然也有额外学习成本但是背后是rxjs和⼀整套思想</p>\n</li>\n<li>\n<p>体积庞⼤: 体积略⼤,代码近2000⾏，min版25KB左右</p>\n</li>\n<li>\n<p>功能过剩: 实际上并发控制等功能很难⽤到，但是我们依然需要引⼊这些代码</p>\n</li>\n<li>\n<p>ts⽀持不友好: yield⽆法返回TS类型<code>redux-saga</code>可以捕获action，然后执行一个函数，那么可以把异步代码放在这个函数中。</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"使用 redux 有哪些原则？","description":"","answer":"<p><strong>核心描述</strong></p>\n<ul>\n<li>单一数据源：整个应用的全局 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</li>\n<li>State 是只读的：唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事情的普通对象。</li>\n<li>使用纯函数来执行修改：为了描述 action 如何改变 state tree，你需要编写纯的 reducers。</li>\n</ul>\n<p><strong>知识拓展</strong></p>\n<ul>\n<li>什么时候应该使用 redux：\n<ul>\n<li>在应用的大量地方，都存在大量的状态</li>\n<li>应用状态会随着时间的推移而频繁更新</li>\n<li>更新该状态的逻辑可能很复杂</li>\n<li>中型和大型代码量的应用，很多人协同开发</li>\n</ul>\n</li>\n<li>reducer 是一个函数，接收当前的 state 和一个 action 对象，必要时决定如何更新状态，并返回新状态。reducer 必须符合以下规则：\n<ul>\n<li>仅使用 state 和 action 参数计算新的状态值</li>\n<li>禁止直接修改 state。必须通过复制现有的 state 并对复制的值进行更改的方式来做不可变更新</li>\n<li>禁止任何异步逻辑、依赖随机值或导致其他副作用代码</li>\n</ul>\n</li>\n<li>reducer 遵守上述规则的原因：\n<ul>\n<li>redux 的目标之一是使代码可预测。当函数的输出仅根据输入参数计算时，更容易理解该代码的工作原理并对其进行测试</li>\n<li>如果一个函数依赖于自身之外的变量，或者随机行为，你永远不知道运行它时会发生什么</li>\n<li>如果一个函数 mutate 了其他对象，比如它的参数，这可能会意外地改变应用程序的工作方式。这可能是错误的常见来源</li>\n</ul>\n</li>\n<li>不可变更新（Immutability），不能在 Redux 中更改 state 的原因：\n<ul>\n<li>会导致bug，例如 UI 未正确更新以显示最新值</li>\n<li>更难理解状态更新的原因和方式</li>\n<li>编写测试变的困难</li>\n<li>打破了正确使用“时间旅行调试”的能力</li>\n<li>违背了 Redux 的预期精神和使用模式</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Redux 状态管理器和变量挂载到 window 中有什么区别？","description":"","answer":"<p>Redux 状态管理器和将变量挂载到 <code>window</code> 对象上是两种不同的状态管理方法，它们各有优缺点。</p>\n<p><strong>Redux 状态管理器</strong></p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><strong>集中管理</strong>：所有的状态都存储在 Redux store 中，方便管理和调试。</li>\n<li><strong>可预测性</strong>：状态变化是通过纯函数（reducers）和明确的 actions 来处理，使得状态变化可预测。</li>\n<li><strong>中间件支持</strong>：Redux 支持中间件，比如 <code>redux-thunk</code> 或 <code>redux-saga</code>，来处理异步操作和副作用。</li>\n<li><strong>工具支持</strong>：Redux 有强大的开发工具（如 Redux DevTools）来帮助调试和查看状态的变化。</li>\n<li><strong>组件解耦</strong>：通过 <code>connect</code> 或 <code>useSelector</code> 和 <code>useDispatch</code> 等 API，组件可以不直接依赖于具体的状态结构，增强了组件的解耦性和可测试性。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><strong>学习曲线</strong>：对于新手来说，Redux 的概念和使用方式可能会比较复杂。</li>\n<li><strong>样板代码</strong>：Redux 的使用通常需要大量的样板代码，比如 actions、reducers 和 action creators。</li>\n</ol>\n<p><strong>变量挂载到 <code>window</code></strong></p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><strong>简单直接</strong>：直接在 <code>window</code> 对象上挂载变量可以快速实现简单的状态共享。</li>\n<li><strong>易于访问</strong>：全局变量可以在应用的任何地方直接访问，方便使用。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><strong>全局污染</strong>：将变量挂载到 <code>window</code> 对象上可能会导致全局命名空间污染，容易引发命名冲突。</li>\n<li><strong>不易维护</strong>：随着应用的增长，全局变量可能会变得难以管理和维护。</li>\n<li><strong>缺乏结构</strong>：没有像 Redux 那样的结构化和规范化，状态管理变得不够一致和可预测。</li>\n<li><strong>调试困难</strong>：全局状态的变化不容易追踪，缺乏系统化的调试工具和机制。</li>\n</ol>\n<p>总的来说，Redux 适合于需要复杂状态管理和维护的大型应用，而挂载到 <code>window</code> 可能适用于小型项目或简单的全局状态需求。</p>\n"},{"title":"mobx 和 redux 有什么区别？","description":"","answer":"<p><strong>共同点</strong></p>\n<ul>\n<li>为了解决状态管理混乱、无法有效同步的问题，统一维护管理应用状态</li>\n<li>某一状态只有一个可信数据来源（通常命名为store，指状态容器）</li>\n<li>操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）</li>\n<li>支持将store与React组件连接，如<code>react-redux</code>，<code>mobx-react</code></li>\n</ul>\n<p><strong>区别</strong></p>\n<p>Redux更多的是遵循Flux模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面∶</p>\n<ul>\n<li>Action∶ 一个JavaScript对象，描述动作相关信息，主要包含type属性和payload属性∶</li>\n<li>Reducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;</li>\n<li>Store∶ 管理action和reducer及其关系的对象，主要提供以下功能∶\n<ul>\n<li>维护应用状态并支持访问状态(getState());</li>\n<li>支持监听action的分发，更新状态(dispatch(action));</li>\n<li>支持订阅store的变更(subscribe(listener));</li>\n</ul>\n</li>\n<li>异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等;</li>\n</ul>\n<p>Mobx是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩∶</p>\n<ul>\n<li>Action∶定义改变状态的动作函数，包括如何变更状态;</li>\n<li>Store∶ 集中管理模块状态（State）和动作(action)</li>\n<li>Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据</li>\n</ul>\n<p><strong>对比总结</strong></p>\n<ul>\n<li>redux将数据保存在单一的store中，mobx将数据保存在分散的多个store中</li>\n<li>redux使用<code>plain object</code>保存数据，需要手动处理变化后的操作;mobx适用<code>observable</code>保存数据，数据变化后自动处理响应的操作</li>\n<li>redux使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx中的状态是可变的，可以直接对其进行修改</li>\n<li>mobx相对来说比较简单，在其中有很多的抽象，mobx更多的使用面向对象的编程思维;redux会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</li>\n<li>mobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易</li>\n</ul>\n"},{"title":"Redux 和 Vuex 有什么区别，它们有什么共同思想吗？","description":"","answer":""},{"title":"Redux 和 Vuex区别","description":"","answer":"<p><strong>相同点</strong></p>\n<ul>\n<li>state 共享数据</li>\n<li>流程一致：定义全局state，触发，修改state</li>\n<li>原理相似，通过全局注入store。</li>\n</ul>\n<p><strong>不同点</strong></p>\n<ul>\n<li>从实现原理上来说：\n<ul>\n<li>Redux 使用的是不可变数据，而Vuex的数据是可变的。Redux每次都是用新的state替换旧的state，而Vuex是直接修改</li>\n<li>Redux 在检测数据变化的时候，是通过 diff 的方式比较差异的，而Vuex其实和Vue的原理一样，是通过 getter/setter来比较的</li>\n</ul>\n</li>\n<li>从表现层来说：\n<ul>\n<li>vuex定义了state、getter、mutation、action四个对象；redux定义了state、reducer、action。</li>\n<li>vuex中state统一存放，方便理解；reduxstate依赖所有reducer的初始值</li>\n<li>vuex有getter,目的是快捷得到state；redux没有这层，react-redux mapStateToProps参数做了这个工作。</li>\n<li>vuex中mutation只是单纯赋值(很浅的一层)；redux中reducer只是单纯设置新state(很浅的一层)。他俩作用类似，但书写方式不同</li>\n<li>vuex中action有较为复杂的异步ajax请求；redux中action中可简单可复杂,简单就直接发送数据对象（{type:xxx, your-data}）,复杂需要调用异步ajax（依赖redux-thunk插件）。</li>\n<li>vuex触发方式有两种commit同步和dispatch异步；redux同步和异步都使用dispatch</li>\n</ul>\n</li>\n</ul>\n<p>通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变；取消了action概念，不必传入特定的 action形式进行指定变更；弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易;</p>\n<p><strong>共同思想</strong></p>\n<ul>\n<li>单一的数据源</li>\n<li>变化可以预测</li>\n</ul>\n<p>本质上∶ redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案。说说对 Redux 中间件的理解？常用的中间件有哪些？实现原理？</p>\n"},{"title":"Redux中的connect有什么作用？","description":"","answer":"<p>connect负责连接React和Redux</p>\n<p><strong>获取state</strong></p>\n<p>connect 通过 context获取 Provider 中的 store，通过 store.getState() 获取整个store tree 上所有state</p>\n<p><strong>包装原组件</strong></p>\n<p>将state和action通过props的方式传入到原组件内部 <code>wrapWithConnect</code> 返回—个 <code>ReactComponent</code> 对象 Connect，Connect重新 render 外部传入的原组件 <code>WrappedComponent</code> ，并把 connect 中传入的 <code>mapStateToProps</code>，<code>mapDispatchToProps</code>与组件上原有的 props 合并后，通过属性的方式传给 <code>WrappedComponent</code></p>\n<p><strong>监听store tree变化</strong></p>\n<p>connect缓存了<code>store tree</code>中state的状态，通过当前state状态 和变更前 state 状态进行比较，从而确定是否调用 <code>this.setState()</code>方法触发 Connect 及其子组件的重新渲染你在 React 项目中是如何使用 Redux 的? 项目结构是如何划分的？</p>\n"},{"title":"为什么 useState 返回的是数组而不是对象？","description":"","answer":"<p>useState 的用法：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？</p>\n<p>要回答这个问题得弄明白 ES6 的解构赋值(destructring assignment)语法 , 来看 2 个简单的示例：</p>\n<ul>\n<li>数组的解构赋值：</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> foo</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">one</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">two</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">three</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">red</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> yellow</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> green</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> foo</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">red</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // \"one\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">yellow</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // \"two\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">green</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // \"three\"</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>对象的解构赋值：</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 42</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    is_verified</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> is_verified</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 42</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">is_verified</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // true </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>搞清楚了解构赋值，那上面的问题就比较好解释了。</p>\n<p>如果 <code>useState</code> 返回数组，那么你可以顺便对数组中的变量命名，代码看起来也比较干净。而如果是对象的话返回的值必须和 <code>useState</code> 内部实现返回的对象同名，这样你只能在 <code>function component</code> 中使用一次，想要多次使用 <code>useState</code> 必须得重命名返回值。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 第一次使用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setState</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">false</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 第二次使用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> counter</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setState</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> setCounter</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>当然事情总是有两面性的，使用 array 也存在一些问题：</p>\n<ul>\n<li>返回值强顺序，灵活性比较低。array[0] 为值，array[1] 为改变值的方法。</li>\n<li>返回的值基本都得使用，对于有些返回值不想使用的话代码看起来有些怪，比如只想用 setState, 就得这么写：<code>const [, setState] = useState(false)</code>。</li>\n<li>返回的参数不能太多，否则处理上面 2 个场景会很麻烦。</li>\n</ul>\n<p>如果在自定义的Hook中遇到了以上几个问题，不妨试试返回 object。</p>\n<p>简单总结一下，在自定义 hook 的时候可以遵循一个简单原则：当参数大于 2 个的时候返回值的类型返回 <code>object</code>， 否则返回数组。</p>\n"},{"title":"说说你对 React Router 的理解？常用的 Router 组件有哪些？","description":"","answer":""},{"title":"说说 React Router 有几种模式，以及实现原理？","description":"","answer":"<p><strong>一、是什么</strong></p>\n<p>在单页应用中，一个<code>web</code>项目只有一个<code>html</code>页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：</p>\n<ul>\n<li>改变 url 且不让浏览器向服务器发送请求</li>\n<li>在不刷新页面的前提下动态改变浏览器地址栏中的URL地址</li>\n</ul>\n<p>其中主要分成了两种模式：</p>\n<ul>\n<li>hash 模式：在url后面加上#，如http://127.0.0.1:5500/home/#/page1</li>\n<li>history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录</li>\n</ul>\n<p><strong>二、使用</strong></p>\n<p><code>React Router</code>对应的<code>hash</code>模式和<code>history</code>模式对应的组件为：</p>\n<ul>\n<li>HashRouter</li>\n<li>BrowserRouter</li>\n</ul>\n<p>这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 1.import { BrowserRouter as Router } from \"react-router-dom\";</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 2.import { HashRouter as Router } from \"react-router-dom\";</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  BrowserRouter</span><span style=\"color:#1E754F\"> as</span><span style=\"color:#B07D48\"> Router</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // HashRouter as Router  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  Switch</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  Route</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Home</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./pages/Home</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Login</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./pages/Login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Backend</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./pages/Backend</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Admin</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./pages/Admin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">Router</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">Login</span><span style=\"color:#999999\">}/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/backend</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">Backend</span><span style=\"color:#999999\">}/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/admin</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">Admin</span><span style=\"color:#999999\">}/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">Home</span><span style=\"color:#999999\">}/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">Router</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> App</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>三、实现原理</strong></p>\n<p>路由描述了 <code>URL</code> 与 <code>UI </code>之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）</p>\n<p>下面以<code>hash</code>模式为例子，改变<code>hash</code>值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面</p>\n<p><code>hash</code> 值改变，触发全局 <code>window</code> 对象上的 <code>hashchange</code> 事件。所以 <code>hash</code> 模式路由就是利用 <code>hashchange</code> 事件监听 <code>URL</code> 的变化，从而进行 <code>DOM</code> 操作来模拟页面跳转</p>\n<p><code>react-router</code>也是基于这个特性实现路由的跳转</p>\n<p>下面以<code>HashRouter</code>组件分析进行展开：</p>\n<p><strong>HashRouter</strong></p>\n<p><code>HashRouter</code>包裹了整应用，</p>\n<p>通过<code>window.addEventListener('hashChange',callback)</code>监听<code>hash</code>值的变化，并传递给其嵌套的组件</p>\n<p>然后通过<code>context</code>将<code>location</code>数据往后代组件传递，如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Provider</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./context</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 该组件下Api提供给子组件使用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> HashRouter</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      location</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">        pathname</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // url路径变化 改变location</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  componentDidMount</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">hashchange</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setState</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">        location</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          ...</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">          pathname</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      location</span><span style=\"color:#999999\">:</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">          this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#998418\">Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> HashRouter</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>Router</strong></p>\n<p><code>Router</code>组件主要做的是通过<code>BrowserRouter</code>传过来的当前值，通过<code>props</code>传进来的<code>path</code>与<code>context</code>传进来的<code>pathname</code>进行匹配，然后决定是否执行渲染组件</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Consumer</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./context</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> pathToRegexp</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> require</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">path-to-regexp</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Route</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          state</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">            let</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">            let</span><span style=\"color:#B07D48\"> pathname</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">            let</span><span style=\"color:#B07D48\"> reg</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> pathToRegexp</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [],</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\">end</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">})</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">            // 判断当前path是否包含pathname</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">match</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reg</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">              return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Component</span><span style=\"color:#999999\">>&#x3C;/</span><span style=\"color:#998418\">Component</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            return</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#998418\">Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> Route</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"说说 React render 方法的原理？在什么时候会被触发？","description":"","answer":""},{"title":"React Fiber是什么？","description":"","answer":"<p><strong>Fiber 出现的背景</strong></p>\n<p>首先要知道的是，JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待。</p>\n<p>在这样的机制下，如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿。</p>\n<p>而这正是 React 15 的 Stack Reconciler 所面临的问题，即是 JavaScript 对主线程的超时占用问题。Stack Reconciler 是一个同步的递归过程，使用的是 JavaScript 引擎自身的函数调用栈，它会一直执行到栈空为止，所以当 React 在渲染组件时，从开始到渲染完成整个过程是一气呵成的。如果渲染的组件比较庞大，js 执行会占据主线程较长时间，会导致页面响应度变差。</p>\n<p>而且所有的任务都是按照先后顺序，没有区分优先级，这样就会导致优先级比较高的任务无法被优先执行。</p>\n<p><strong>Fiber 是什么</strong></p>\n<p>Fiber 的中文翻译叫纤程，与进程、线程同为程序执行过程，Fiber 就是比线程还要纤细的一个过程。纤程意在对渲染过程实现进行更加精细的控制。</p>\n<p>从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写。</p>\n<p>从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的&quot;虚拟 DOM&quot;。</p>\n<p>一个 fiber 就是一个 JavaScript 对象，Fiber 的数据结构如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">type</span><span style=\"color:#2E8F82\"> Fiber</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 用于标记fiber的WorkTag类型，主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  tag</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">WorkTag</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // ReactElement里面的key</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  key</span><span style=\"color:#999999\">: </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\"> | </span><span style=\"color:#2E8F82\">string</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // ReactElement.type，调用`createElement`的第一个参数</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  elementType</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // The resolved function/class/ associated with this fiber.</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 表示当前代表的节点类型</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  type</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 表示当前FiberNode对应的element组件实例</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  stateNode</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  return</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 指向自己的第一个子节点</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  child</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  sibling</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  index</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">number</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  ref</span><span style=\"color:#999999\">: </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\"> | (((</span><span style=\"color:#B07D48\">handle</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">mixed</span><span style=\"color:#999999\">) => </span><span style=\"color:#2E8F82\">void</span><span style=\"color:#999999\">) &#x26; { </span><span style=\"color:#B07D48\">_stringRef</span><span style=\"color:#999999\">: </span><span style=\"color:#AB5959\">?</span><span style=\"color:#2E8F82\">string</span><span style=\"color:#999999\"> }) | </span><span style=\"color:#2E8F82\">RefObject</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 当前处理过程中的组件props对象</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  pendingProps</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 上一次渲染完成之后的props</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  memoizedProps</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 该Fiber对应的组件产生的Update会存放在这个队列里面</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  updateQueue</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">UpdateQueue</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 上一次渲染的时候的state</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  memoizedState</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 一个列表，存放这个Fiber依赖的context</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  firstContextDependency</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">ContextDependency</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">mixed</span><span style=\"color:#999999\">> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  mode</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">TypeOfMode</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // Effect</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 用来记录Side Effect</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  effectTag</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">SideEffectTag</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 单链表用来快速查找下一个side effect</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  nextEffect</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 子树中第一个side effect</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  firstEffect</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 子树中最后一个side effect</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  lastEffect</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 代表任务在未来的哪个时间点应该被完成，之后版本改名为 lanes</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  expirationTime</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">ExpirationTime</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 快速确定子树中是否有不在等待的变化</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  childExpirationTime</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">ExpirationTime</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // fiber的版本池，即记录fiber更新过程，便于恢复</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  alternate</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Fiber</span><span style=\"color:#999999\"> | </span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>Fiber 如何解决问题的</strong></p>\n<p>Fiber 把一个渲染任务分解为多个渲染任务，而不是一次性完成，把每一个分割得很细的任务视作一个&quot;执行单元&quot;，React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去，故任务会被分散到多个帧里面，中间可以返回至主进程控制执行其他任务，最终实现更流畅的用户体验。</p>\n<p>即是实现了&quot;增量渲染&quot;，实现了可中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber 节点。</p>\n<p><strong>Fiber 实现原理</strong></p>\n<p>实现的方式是requestIdleCallback这一 API，但 React 团队 polyfill 了这个 API，使其对比原生的浏览器兼容性更好且拓展了特性。</p>\n<blockquote>\n<p>window.requestIdleCallback()方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间 timeout，则有可能为了在超时前执行函数而打乱执行顺序。</p>\n</blockquote>\n<p>requestIdleCallback回调的执行的前提条件是当前浏览器处于空闲状态。</p>\n<p>即requestIdleCallback的作用是在浏览器一帧的剩余空闲时间内执行优先度相对较低的任务。首先 React 中任务切割为多个步骤，分批完成。在完成一部分任务之后，将控制权交回给浏览器，让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间，再继续之前 React 未完成的任务，是一种合作式调度。</p>\n<p>简而言之，由浏览器给我们分配执行时间片，我们要按照约定在这个时间内执行完毕，并将控制权还给浏览器。</p>\n<p>React 16 的Reconciler基于 Fiber 节点实现，被称为 Fiber Reconciler。</p>\n<p>作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。</p>\n<p>作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作。</p>\n<p>每个 Fiber 节点有个对应的 React element，多个 Fiber 节点是如何连接形成树呢？靠如下三个属性：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制</span><span style=\"color:#A0ADA0\">// 指向父级Fiber节点</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">return</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 指向子Fiber节点</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 指向右边第一个兄弟Fiber节点</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">sibling</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"Fiber 为什么是 React 性能的一个飞跃？","description":"","answer":"<p>React Fiber 架构是 React 性能飞跃的核心原因，其通过以下机制彻底改变了 React 的渲染和协调过程，解决了旧版架构的性能瓶颈：</p>\n<p><strong>1. 异步可中断渲染机制</strong></p>\n<p>旧版 React（16 之前）采用 <strong>同步递归更新</strong>，一旦开始渲染就无法中断，导致主线程长时间被占用，用户交互（如点击、滚动）无法及时响应，页面卡顿明显。<br>\nFiber 通过以下方式实现异步可中断渲染：</p>\n<ul>\n<li><strong>任务拆分</strong>：将组件树遍历拆分为多个独立的小任务（Fiber 节点），每个任务仅处理一个组件节点。</li>\n<li><strong>时间切片</strong>：利用浏览器的空闲时间（通过 <code>requestIdleCallback</code> 或 <code>MessageChannel</code> 模拟）分批次执行任务，避免单次渲染超过 16ms（一帧时间）导致丢帧。</li>\n<li><strong>中断与恢复</strong>：任务执行过程中可随时中断，优先处理高优先级任务（如用户点击），之后从中断点继续执行，确保交互流畅性。</li>\n</ul>\n<p><strong>2. 优先级调度与增量渲染</strong></p>\n<p>Fiber 引入 <strong>动态优先级机制</strong>，根据任务类型分配优先级（如用户交互为最高优先级），并动态调整执行顺序：</p>\n<ul>\n<li><strong>优先级分类</strong>：包括 Immediate（立即执行）、UserBlocking（用户交互相关）、Normal（普通更新）等，确保关键操作优先处理。</li>\n<li><strong>增量渲染</strong>：将 DOM 更新分批提交，避免一次性大规模操作触发多次重排/重绘，减少浏览器计算开销。</li>\n</ul>\n<p><strong>3. 链表结构与双缓冲技术</strong></p>\n<p>Fiber 使用 <strong>链表结构替代递归树</strong>，通过 <code>child</code>、<code>sibling</code>、<code>return</code> 指针实现高效遍历，支持灵活的中断和恢复：</p>\n<ul>\n<li><strong>双缓冲机制</strong>：维护两棵 Fiber 树（<code>current</code> 和 <code>workInProgress</code>），更新时在内存中构建新树，完成后直接切换，避免界面闪烁。</li>\n<li><strong>副作用链表</strong>：在协调阶段收集需要更新的节点（如 DOM 修改），提交阶段一次性处理，减少真实 DOM 操作次数。</li>\n</ul>\n<p><strong>4. 性能优化与错误处理</strong></p>\n<ul>\n<li><strong>错误边界</strong>：每个 Fiber 节点可捕获子树的错误，防止整个应用崩溃，并展示降级 UI，提升健壮性。</li>\n<li><strong>高效 Diff 算法</strong>：通过同级比较、<code>key</code> 优化，将 Diff 复杂度从 O(n³) 降至 O(n)，减少不必要的计算。</li>\n<li><strong>复用节点</strong>：在更新时复用旧 Fiber 节点，减少内存分配和垃圾回收开销。</li>\n</ul>\n<p><strong>5. 支持未来特性</strong></p>\n<p>Fiber 为 React 的 <strong>并发模式（Concurrent Mode）</strong> 和高级功能（如 Suspense、渐进式 Hydration）奠定基础：</p>\n<ul>\n<li><strong>并发渲染</strong>：允许同时处理多个更新任务，提升复杂场景（如数据预加载、动画并行）的性能。</li>\n<li><strong>时间切片扩展性</strong>：通过调度器（Scheduler）实现更精细的任务控制，适应不同设备性能需求。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>React Fiber 通过 <strong>异步可中断渲染、优先级调度、链表数据结构</strong> 和 <strong>双缓冲技术</strong>，将同步阻塞式更新转变为异步增量式更新，解决了旧版架构的卡顿问题，显著提升了复杂应用的用户体验。其设计不仅优化了性能，还为 React 生态的未来扩展提供了技术基础。</p>\n"},{"title":"React Fiber 是如何实现更新过程可控？","description":"","answer":"<p>React Fiber 通过以下核心机制实现了更新过程的可控性，解决了旧版同步递归更新导致的性能瓶颈，提升了用户体验：</p>\n<p><strong>1. 任务拆分与时间分片</strong></p>\n<ul>\n<li><strong>化整为零</strong>：将调和阶段（Reconciler）的虚拟 DOM 递归遍历拆分为多个小任务，每个任务仅处理一个 Fiber 节点。例如，一个包含多层嵌套的组件会被分解为多个独立任务（如处理 div、文本节点等）。</li>\n<li><strong>时间分片（Time Slicing）</strong>：利用浏览器的空闲时间（通过 <code>requestIdleCallback</code> 或其 Polyfill）分批次执行任务，每帧最多执行 16ms 的任务，避免阻塞主线程。若当前帧时间不足，则挂起任务，下一帧继续执行。</li>\n</ul>\n<p><strong>2. 可中断与恢复的链表结构</strong></p>\n<ul>\n<li><strong>链表替代递归栈</strong>：Fiber 使用多向链表（如 <code>child</code>、<code>sibling</code>、<code>return</code> 指针）表示组件树，替代了旧版的递归调用栈。链表结构允许灵活调整遍历顺序，并支持随时中断和恢复任务。</li>\n<li><strong>双缓冲机制</strong>：\n<ul>\n<li><strong>workInProgress tree</strong>：当前正在构建的新 Fiber 树，记录更新过程中的副作用（如 DOM 修改）。</li>\n<li><strong>current tree</strong>：上一次渲染完成的 Fiber 树，用于与 workInProgress 树进行 Diff 比较。</li>\n<li>两棵树通过 <code>alternate</code> 属性关联，更新完成后 workInProgress 树会替换 current 树，减少内存分配开销。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. 优先级调度与动态调整</strong></p>\n<ul>\n<li><strong>任务优先级</strong>：根据任务类型（如用户交互、动画、数据加载）动态分配优先级，高优先级任务（如点击事件）可抢占低优先级任务（如渲染）的执行权。优先级通过 <code>expirationTime</code> 实现，过期任务必须立即执行。</li>\n<li><strong>调度器（Scheduler）</strong>：React 实现了自己的调度逻辑，通过循环检查任务优先级和剩余时间，决定是否继续执行、挂起或终止任务。例如，若新任务优先级更高，则终止当前任务并重新构建 workInProgress 树。</li>\n</ul>\n<p><strong>4. 副作用收集与批量提交</strong></p>\n<ul>\n<li><strong>副作用链表</strong>：在调和阶段，每个 Fiber 节点会记录自身的副作用（如 DOM 更新、生命周期调用），最终形成一条副作用链表。提交阶段（Commit Phase）会一次性处理链表中的所有副作用，确保 DOM 更新连续无闪烁。</li>\n<li><strong>错误边界</strong>：Fiber 节点的链表结构允许捕获子树中的错误，防止整个应用崩溃，同时展示降级 UI。</li>\n</ul>\n<p><strong>5. 挂起、恢复与终止的实现</strong></p>\n<ul>\n<li><strong>挂起</strong>：当一帧时间不足时，记录当前处理到的 Fiber 节点，让出主线程控制权。</li>\n<li><strong>恢复</strong>：浏览器空闲时，从上次中断的节点继续遍历链表，生成下一个任务。</li>\n<li><strong>终止</strong>：若在调和过程中触发更高优先级任务，则终止当前任务，重新开始构建 workInProgress 树。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>React Fiber 通过 <strong>任务分片、链表遍历、优先级调度、双缓冲机制</strong> 实现了更新过程的可控性，解决了同步阻塞渲染导致的卡顿问题。其核心优势包括：</p>\n<ol>\n<li><strong>响应性提升</strong>：用户交互和动画可优先执行，避免界面冻结。</li>\n<li><strong>高效渲染</strong>：通过时间分片和副作用批量提交，减少浏览器重排/重绘次数。</li>\n<li><strong>扩展性增强</strong>：为并发模式（Concurrent Mode）、Suspense 等高级特性奠定基础。</li>\n</ol>\n<p>这些机制共同确保了 React 在复杂应用场景下的流畅性和稳定性。</p>\n"},{"title":"React 有哪些性能优化的方法？","description":"","answer":"<p>以下是 React 性能优化的主要方法，结合实践场景和底层原理，综合整理如下：</p>\n<p><strong>1. 减少不必要的渲染</strong></p>\n<ul>\n<li><strong>使用 <code>React.memo</code> 和 <code>PureComponent</code></strong><br>\n通过浅层比较（shallow comparison）避免组件在 props/state 未变化时重新渲染。<code>React.memo</code> 用于函数组件，<code>PureComponent</code> 用于类组件。</li>\n<li><strong>优化 <code>useCallback</code> 和 <code>useMemo</code></strong>\n<ul>\n<li><code>useCallback</code> 缓存函数引用，避免子组件因函数引用变化触发渲染。</li>\n<li><code>useMemo</code> 缓存计算结果，避免重复执行高开销运算（如大数据处理）。</li>\n</ul>\n</li>\n<li><strong>避免内联对象和匿名函数</strong><br>\n内联对象或函数会导致每次渲染生成新引用，破坏浅比较优化。应通过 <code>useMemo</code> 或 <code>useCallback</code> 稳定引用。</li>\n</ul>\n<p><strong>2. 按需加载与代码分割</strong></p>\n<ul>\n<li><strong>懒加载组件</strong><br>\n使用 <code>React.lazy</code> + <code>Suspense</code> 动态加载非首屏组件，减少初始包体积。适用于路由跳转或用户触发的组件加载（如弹窗）。</li>\n<li><strong>虚拟列表（Virtualization）</strong><br>\n仅渲染可视区域内的列表项，避免长列表全量渲染。推荐使用 <code>react-window</code> 或 <code>react-virtualized</code>。</li>\n</ul>\n<p><strong>3. 优化 DOM 操作与渲染流程</strong></p>\n<ul>\n<li><strong>批量更新状态</strong><br>\n在 React 18+ 中，自动批量处理 <code>setState</code>，减少渲染次数。对于旧版本，可使用 <code>unstable_batchedUpdates</code> 手动合并更新。</li>\n<li><strong>调整 CSS 替代组件卸载</strong><br>\n通过 <code>opacity: 0</code> 或 <code>visibility: hidden</code> 隐藏复杂组件，而非卸载后重新挂载，减少 DOM 操作成本。</li>\n<li><strong>使用 <code>React.Fragment</code> 减少冗余 DOM</strong><br>\n避免在组件中包裹不必要的父元素，减少页面节点数量。</li>\n</ul>\n<p><strong>4. 控制副作用与异步行为</strong></p>\n<ul>\n<li><strong>防抖（Debounce）与节流（Throttle）</strong><br>\n高频事件（如搜索输入、滚动）中，通过 <code>lodash.debounce</code> 或 <code>lodash.throttle</code> 限制回调触发频率，减少计算或请求开销。</li>\n<li><strong>分离副作用到 <code>useEffect</code></strong><br>\n避免在渲染函数中执行网络请求或订阅操作，确保渲染逻辑纯粹。</li>\n</ul>\n<p><strong>5. 状态管理与架构优化</strong></p>\n<ul>\n<li><strong>扁平化组件层级</strong><br>\n减少深层嵌套组件，降低 Diff 算法复杂度。</li>\n<li><strong>使用不可变数据</strong><br>\n通过 <code>immer</code> 或展开运算符生成新对象引用，避免因引用未变导致浅比较失效。</li>\n<li><strong>优先级调度（Concurrent Mode）</strong><br>\nReact 18+ 的并发模式允许中断低优先级任务（如数据预加载），优先响应用户交互（如点击）。</li>\n</ul>\n<p><strong>6. 工具与调试</strong></p>\n<ul>\n<li><strong>生产环境构建</strong><br>\n启用代码压缩和 React 生产模式，移除开发环境警告和调试代码。</li>\n<li><strong>性能分析工具</strong><br>\n使用 <code>React DevTools Profiler</code> 定位渲染瓶颈，结合 Chrome Performance 面板分析运行时性能。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>以上方法覆盖了 React 性能优化的核心方向：<strong>减少渲染次数</strong>、<strong>降低计算开销</strong>、<strong>优化资源加载</strong>和<strong>精细化控制渲染流程</strong>。实际项目中需结合具体场景选择组合策略（如高频交互场景优先防抖/节流，长列表使用虚拟化）。更多细节可参考以下来源：<a href=\"https://www.hellobit.com.cn/doc/2021/4/7/819.html\" target=\"_blank\" rel=\"noopener noreferrer\">React 性能优化完全指南</a>、<a href=\"https://avoid.overfit.cn/post/74f83a62d6744fd19674006eed5da9c9\" target=\"_blank\" rel=\"noopener noreferrer\">React.memo 与 useMemo 实践</a>。</p>\n"},{"title":"React中的路由懒加载是什么？原理是什么？","description":"","answer":"<p><strong>React.lazy 是什么</strong></p>\n<p>随着前端应用体积的扩大，资源加载的优化是我们必须要面对的问题，动态代码加载就是其中的一个方案。</p>\n<p>webpack 提供了符合 ECMAScript 提案 的 import() 语法 ，让我们来实现动态地加载模块（注：require.ensure 与 import() 均为 webpack 提供的代码动态加载方案，在 webpack 2.x 中，require.ensure 已被 import 取代）。</p>\n<p>在 React 16.6 版本中，新增了 React.lazy 函数，它能让你像渲染常规组件一样处理动态引入的组件，配合 webpack 的 Code Splitting ，只有当组件被加载，对应的资源才会导入 ，从而达到懒加载的效果。</p>\n<p><strong>使用 React.lazy</strong></p>\n<p>在实际的使用中，首先是引入组件方式的变化：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 不使用 React.lazy</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> OtherComponent</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./OtherComponent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用 React.lazy</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> OtherComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">lazy</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#AB5959\"> import</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">./OtherComponent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>React.lazy 接受一个函数作为参数，这个函数需要调用 import() 。它需要返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。</p>\n<p>React.lazy 方法返回的是一个 lazy 组件的对象，类型是 react.lazy，并且 lazy 组件具有 _status 属性，与 Promise 类似它具有 Pending、Resolved、Rejected 三个状态，分别代表组件的加载中、已加载、和加载失败三中状态。</p>\n<p>需要注意的一点是，React.lazy 需要配合 Suspense 组件一起使用，在 Suspense 组件中渲染 React.lazy 异步加载的组件。如果单独使用 React.lazy，React 会给出错误提示。</p>\n<p><strong>实现原理</strong></p>\n<p><strong>Webpack 动态加载</strong></p>\n<p>上面使用了 import() 语法，webpack 检测到这种语法会自动代码分割。使用这种动态导入语法代替以前的静态引入，可以让组件在渲染的时候，再去加载组件对应的资源，这个异步加载流程的实现机制是怎么样呢？</p>\n<p>webpack 是通过创建 script 标签来实现动态加载的，找出依赖对应的 chunk 信息，然后生成 script 标签来动态加载 chunk，每个 chunk 都有对应的状态：未加载 、 加载中、已加载 。</p>\n<p><strong>Suspense 组件</strong></p>\n<p>Suspense 内部主要通过捕获组件的状态去判断如何加载，上面我们提到 React.lazy 创建的动态加载组件具有 Pending、Resolved、Rejected 三种状态，当这个组件的状态为 Pending 时显示的是 Suspense 中 fallback 的内容，只有状态变为 resolve 后才显示组件。</p>\n<p><strong>Error Boundaries 处理资源加载失败场景</strong></p>\n<p>如果遇到网络问题或是组件内部错误，页面的动态资源可能会加载失败，为了优雅降级，可以使用 Error Boundaries 来解决这个问题。</p>\n<p>Error Boundaries 是一种组件，如果你在组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 生命周期函数，它就会成为一个 Error Boundaries 的组件。</p>\n<p>它的用法也非常的简单，可以直接当作一个组件去使用，如下：</p>\n<pre><code class=\"language-html\"><div class=\"language-html \"><span class=\"lang\">html</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#B31D28\">ErrorBoundary</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#B31D28\">MyWidget</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#B31D28\">ErrorBoundary</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong></p>\n<p>React.lazy() 和 React.Suspense 的提出为现代 React 应用的性能优化和工程化提供了便捷之路。 React.lazy 可以让我们像渲染常规组件一样处理动态引入的组件，结合 Suspense 可以更优雅地展现组件懒加载的过渡动画以及处理加载异常的场景。</p>\n"},{"title":"说说 React 服务端渲染怎么做？原理是什么？","description":"","answer":""},{"title":"说说 React Jsx 转换成真实 DOM 过程？","description":"","answer":""},{"title":"说说你对 immutable 的理解？如何应用在 react 项目中？","description":"","answer":""},{"title":"什么是受控组件？","description":"","answer":"<p><strong>受控组件</strong>（Controlled Component）是指一个表单元素的值由 React 组件的状态（<code>state</code>）控制，而不是由 DOM 元素自身控制。也就是说，表单元素的值和状态都是由 React 组件的 <code>state</code> 进行管理的，表单元素的值由组件的 <code>state</code> 决定，并通过事件处理函数来更新 <code>state</code>。</p>\n<p><strong>受控组件的特点</strong></p>\n<ol>\n<li><strong>状态管理</strong>：\n<ul>\n<li><strong>由组件状态控制</strong>：受控组件的表单元素（如 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）的值由 React 组件的 <code>state</code> 控制。表单元素的值始终与组件的 <code>state</code> 保持同步。</li>\n</ul>\n</li>\n<li><strong>单向数据流</strong>：\n<ul>\n<li><strong>从上到下</strong>：表单元素的值由组件的 <code>state</code> 决定，当用户输入或选择时，事件处理函数会更新组件的 <code>state</code>，进而重新渲染表单元素。数据流是单向的，即数据从组件的 <code>state</code> 流向表单元素。</li>\n</ul>\n</li>\n<li><strong>事件处理</strong>：\n<ul>\n<li><strong>更新状态</strong>：每当用户对表单元素进行交互时（如输入文本、选择选项），会触发相应的事件处理函数，这些函数会更新组件的 <code>state</code>。组件的 <code>render</code> 方法会根据更新后的 <code>state</code> 重新渲染表单元素。</li>\n</ul>\n</li>\n</ol>\n<p><strong>受控组件的示例</strong></p>\n<p>以下是一个使用受控组件的示例，其中 <code>&lt;input&gt;</code> 元素的值由组件的 <code>state</code> 控制：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ControlledForm</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 初始化状态</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setValue</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理输入变化的函数</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleChange</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setValue</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理表单提交的函数</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleSubmit</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    event</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">preventDefault</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">提交的值: </span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">form</span><span style=\"color:#B07D48\"> onSubmit</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleSubmit</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">        输入内容:</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        {</span><span style=\"color:#A0ADA0\">/* 受控组件 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">text</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> onChange</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleChange</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">submit</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">提交</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">form</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> ControlledForm</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"说说 react 中引入 css 的方式有哪几种？区别？","description":"","answer":"<p><strong>一、是什么</strong></p>\n<p>组件式开发选择合适的<code>css</code>解决方案尤为重要</p>\n<p>通常会遵循以下规则：</p>\n<ul>\n<li>可以编写局部css，不会随意污染其他组件内的原生；</li>\n<li>可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；</li>\n<li>支持所有的css特性：伪类、动画、媒体查询等；</li>\n<li>编写起来简洁方便、最好符合一贯的css风格特点</li>\n</ul>\n<p>在这一方面，<code>vue</code>使用<code>css</code>起来更为简洁：</p>\n<ul>\n<li>通过 style 标签编写样式</li>\n<li>scoped 属性决定编写的样式是否局部有效</li>\n<li>lang 属性设置预处理器</li>\n<li>内联样式风格的方式来根据最新状态设置和改变css</li>\n</ul>\n<p>而在<code>react</code>中，引入<code>CSS</code>就不如<code>Vue</code>方便简洁，其引入<code>css</code>的方式有很多种，各有利弊</p>\n<p><strong>二、方式</strong></p>\n<p>常见的<code>CSS</code>引入方式有以下：</p>\n<ul>\n<li>在组件内直接使用</li>\n<li>组件中引入 .css 文件</li>\n<li>组件中引入 .module.css 文件</li>\n<li>CSS in JS</li>\n</ul>\n<p><strong>在组件内直接使用</strong></p>\n<p>直接在组件中书写<code>css</code>样式，通过<code>style</code>属性直接引入，如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> div1</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  width</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">300px</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  margin</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">30px auto</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  backgroundColor</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">#44014C</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">  //驼峰法</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  minHeight</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">200px</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  boxSizing</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">border-box</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Test</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> context</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">     &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">       &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">div1</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">123</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">       &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\">backgroundColor</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">red</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">}}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">     &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">    );</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  }</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#393A34\">export default Test;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>上面可以看到，<code>css</code>属性需要转换成驼峰写法</p>\n<p>这种方式优点：</p>\n<ul>\n<li>内联样式, 样式之间不会有冲突</li>\n<li>可以动态获取当前state中的状态</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>写法上都需要使用驼峰标识</li>\n<li>某些样式没有提示</li>\n<li>大量的样式, 代码混乱</li>\n<li>某些样式无法编写(比如伪类/伪元素)</li>\n</ul>\n<p><strong>组件中引入css文件</strong></p>\n<p>将<code>css</code>单独写在一个<code>css</code>文件中，然后在组件中直接引入</p>\n<p><code>App.css</code>文件：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">title</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  color</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> red</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  font</span><span style=\"color:#AB5959\">-</span><span style=\"color:#59873A\">size</span><span style=\"color:#999999\">:</span><span style=\"color:#393A34\"> 20</span><span style=\"color:#B07D48\">px</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">desc</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  color</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> green</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  text</span><span style=\"color:#AB5959\">-</span><span style=\"color:#59873A\">decoration</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> underline</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>组件中引入：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> PureComponent</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Home</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./Home</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./App.css</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> App</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> PureComponent</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">app</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">h2</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">title</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">我是App的标题</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h2</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">desc</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">我是App中的一段文字描述</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\"> ></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Home</span><span style=\"color:#999999\">/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响</p>\n<p><strong>组件中引入 .module.css 文件</strong></p>\n<p>将<code>css</code>文件作为一个模块引入，这个模块中的所有<code>css</code>，只作用于当前组件。不会影响当前组件的后代组件</p>\n<p>这种方式是<code>webpack</code>特工的方案，只需要配置<code>webpack</code>配置文件中<code>modules:true</code>即可</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> PureComponent</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Home</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./Home</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./App.module.css</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> App</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> PureComponent</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">app</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">h2</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">title</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">我是App的标题</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h2</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">desc</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">我是App中的一段文字描述</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\"> ></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Home</span><span style=\"color:#999999\">/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>这种方式能够解决局部作用域问题，但也有一定的缺陷：</p>\n<ul>\n<li>引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的</li>\n<li>所有的 className 都必须使用 {style.className} 的形式来编写</li>\n<li>不方便动态来修改某些样式，依然需要使用内联样式的方式；</li>\n</ul>\n<p><strong>CSS in JS</strong></p>\n<p>CSS-in-JS， 是指一种模式，其中<code>CSS</code>由 <code>JavaScript </code>生成而不是在外部文件中定义</p>\n<p>此功能并不是 React 的一部分，而是由第三方库提供，例如：</p>\n<ul>\n<li>styled-components</li>\n<li>emotion</li>\n<li>glamorous</li>\n</ul>\n<p>下面主要看看<code>styled-components</code>的基本使用</p>\n<p>本质是通过函数的调用，最终创建出一个组件：</p>\n<ul>\n<li>这个组件会被自动添加上一个不重复的class</li>\n<li>styled-components会给该class添加相关的样式</li>\n</ul>\n<p>基本使用如下：</p>\n<p>创建一个<code>style.js</code>文件用于存放样式组件：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#B07D48\"> SelfLink</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> styled</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">div</span><span style=\"color:#B5695977\">`</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  height: 50px;</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  border: 1px solid red;</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  color: yellow;</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#B07D48\"> SelfButton</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> styled</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">div</span><span style=\"color:#B5695977\">`</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  height: 150px;</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  width: 150px;</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  color: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">props </span><span style=\"color:#999999\">=></span><span style=\"color:#B56959\"> props</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">color</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\">;</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  background-image: url(</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">props </span><span style=\"color:#999999\">=></span><span style=\"color:#B56959\"> props</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">src</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\">);</span></span>\n<span class=\"line\"><span style=\"color:#B56959\">  background-size: 150px 150px;</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>引入样式组件也很简单：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> SelfLink</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> SelfButton</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">./style</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Test</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> context</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">     &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">       &#x3C;</span><span style=\"color:#998418\">SelfLink</span><span style=\"color:#B07D48\"> title</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">People's Republic of China</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">app.js</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">SelfLink</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">       &#x3C;</span><span style=\"color:#998418\">SelfButton</span><span style=\"color:#B07D48\"> color</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">palevioletred</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">pink</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> }}</span><span style=\"color:#B07D48\"> src</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">fist</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">          SelfButton</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">SelfButton</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">     &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> Test</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>三、区别</strong></p>\n<p>通过上面四种样式的引入，可以看到：</p>\n<ul>\n<li>在组件内直接使用<code>css</code>该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱</li>\n<li>组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠</li>\n<li>引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写</li>\n<li>通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等</li>\n</ul>\n<p>至于使用<code>react</code>用哪种方案引入<code>css</code>，并没有一个绝对的答案，可以根据各自情况选择合适的方案</p>\n"},{"title":"React中为什么要给组件设置 key？","description":"","answer":"<p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。</p>\n<p>在 React Diff 算法中React 会借助元素的 Key 值来判断该元素是新创建的还是被移动而来的元素，从而减少不必要的元素重新渲染。</p>\n<p>此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系。</p>\n"},{"title":"为什么不能用数组下标来作为react组件中的key？","description":"","answer":"<p>react 使用diff算法，使用key来做同级比对。如果使用数组下标作为key，有以下情况：</p>\n<ul>\n<li>在数组头部或中部插入或删除元素： 所有key对应的节点的值发生更改，进行重新渲染。造成性能损耗</li>\n<li>而如果使用数组中唯一值来作为key：不管是在何处插入或删除节点，其他key对应的节点的值未发生更改，只需插入或删除操作的数组节点。</li>\n</ul>\n"},{"title":"setState 是同步，还是异步的？","description":"","answer":"<p><strong>react18之前</strong></p>\n<p>setState在不同情况下可以表现为异步或同步。</p>\n<p>在Promise的状态更新、js原生事件、setTimeout、setInterval..中是同步的。</p>\n<p>在react的合成事件中，是异步的。</p>\n<p><strong>react18之后</strong></p>\n<p>setState都会表现为异步（即批处理）。\n<a href=\"https://github.com/reactwg/react-18/discussions/21\" target=\"_blank\" rel=\"noopener noreferrer\">官方详细说明。</a></p>\n<p><strong>react18之前版本的解释</strong></p>\n<p>在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state 。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。</p>\n<p>原因： 在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。</p>\n<p>注意： setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。</p>\n<p>综上，setState 只在合成事件和 hook() 中是“异步”的，在 原生事件和 setTimeout 中都是同步的。</p>\n"},{"title":"setState 之后发生了什么","description":"","answer":"<p><strong>简单版本</strong>： React 利用状态队列机制实现了 setState 的“异步”更新，避免频繁的重复更新 state。</p>\n<p>首先将新的 state 合并到状态更新队列中，然后根据更新队列和 shouldComponentUpdate 的状态来判断是否需要更新组件。</p>\n<p><strong>复杂版本</strong>：</p>\n<ul>\n<li>enqueueSetState 将 state 放入队列中，并调用 enqueueUpdate 处理要更新的 Component</li>\n<li>如果组件当前正处于 update 事务中，则先将 Component 存入 dirtyComponent 中。否则调用batchedUpdates 处理。</li>\n<li>batchedUpdates 发起一次 transaction.perform() 事务</li>\n<li>开始执行事务初始化，运行，结束三个阶段\n<ul>\n<li>初始化：事务初始化阶段没有注册方法，故无方法要执行</li>\n<li>运行：执行 setSate 时传入的 callback 方法</li>\n<li>结束：更新 isBatchingUpdates 为 false，并执行 FLUSH_BATCHED_UPDATES 这个 wrapper 中的close方法，FLUSH_BATCHED_UPDATES在close阶段，会循环遍历所有的 dirtyComponents，调用updateComponent 刷新组件，并执行它的 pendingCallbacks, 也就是 setState 中设置的 callback。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"在 shouldComponentUpdate 或 componentWillUpdate 中使用 setState 会发生什么？","description":"","answer":"<p>当调用 setState 的时候，实际上会将新的 state 合并到状态更新队列中，并对 partialState 以及 _pendingStateQueue 更新队列进行合并操作。最终通过 enqueueUpdate 执行 state 更新。</p>\n<p>如果在 shouldComponentUpdate 或 componentWillUpdate 中使用 setState，会使得 state 队列（_pendingStateQueue）不为 null，从而调用 updateComponent 方法，updateComponent 中会继续调用 shouldComponentUpdate 和 componentWillUpdate，因此造成死循环。</p>\n"},{"title":"React 中的 ref 有什么用？","description":"","answer":"<p>使用 refs 获取。组件被调用时会新建一个该组件的实例。refs 会指向这个实例，可以是一个回调函数，回调函数会在组件被挂载后立即执行。</p>\n<p>如果把 refs 放到原生 DOM 组件的 input 中，我们就可以通过 refs 得到 DOM 节点；如果把 refs 放到 React 组件中，那么我们获得的就是组件的实例，因此就可以调用实例的方法（如果想访问该组件的真实 DOM，那么可以用 React.findDOMNode 来找到 DOM 节点，但是不推崇此方法）。</p>\n<p>refs 无法用于无状态组件，无状态组件挂载时只是方法调用，没有新建实例。在 v16 之后，可以使用 useRef。</p>\n"},{"title":"React.PureComponent 和 React.Component 有什么区别？","description":"","answer":"<p>PureComponent 和 Component的区别是：Component需要手动实现 shouldComponentUpdate，而 PureComponent 通过浅对比默认实现了 shouldComponentUpdate 方法。</p>\n<p>浅比较(shallowEqual)，即react源码中的一个函数，然后根据下面的方法进行是不是PureComponent的判断，帮我们做了本来应该我们在 shouldComponentUpdate 中做的事情</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">_compositeType</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> CompositeTypes</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">PureClass</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  shouldUpdate</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#59873A\">shallowEqual</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prevProps</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> nextProps</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#59873A\"> shallowEqual</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">inst</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> nextState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>注意： 浅比较只比较了第一层，复杂数据结构可能会导致更新问题</p>\n<p>总结: PureComponent 不仅会影响本身，而且会影响子组件，所以 PureComponent 最佳情况是展示组件</p>\n"},{"title":"如何在React中应用样式？","description":"","answer":"<p>将样式应用于React组件有三种方法。</p>\n<p><strong>外部样式表</strong></p>\n<p>在此方法中，你可以将外部样式表导入到组件使用类中。 但是你应该使用className而不是class来为React元素应用样式, 这里有一个例子。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./App.css</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Header</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./header/header</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Footer</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./footer/footer</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Dashboard</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./dashboard/dashboard</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> UserDisplay</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./userdisplay</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">App</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Header</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Dashboard</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">UserDisplay</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Footer</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> App</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>内联样式</strong></p>\n<p>在这个方法中，我们可以直接将 props 传递给HTML元素，属性为style。这里有一个例子。这里需要注意的重要一点是，我们将javascript对象传递给style，这就是为什么我们使用 <code>backgroundColor</code> 而不是CSS方法<code>backbackground-color</code>。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#59873A\"> Header</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> heading</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">TODO App</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\">backgroundColor</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">orange</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">heading</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>定义样式对象并使用它</strong></p>\n<p>因为我们将javascript对象传递给style属性，所以我们可以在组件中定义一个style对象并使用它。下面是一个示例，你也可以将此对象作为 props 传递到组件树中。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> footerStyle</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    width</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">100%</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    backgroundColor</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">green</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    padding</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">50px</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    font</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">30px</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    color</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">white</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    fontWeight</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">bold</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#59873A\"> Footer</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">footerStyle</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">            All Rights Reserved 2019</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"React 中，怎么实现父组件调用子组件中的方法？","description":"","answer":"<p>要实现父组件调用子组件中的方法，需要通过以下步骤进行操作：</p>\n<ol>\n<li>\n<p>在子组件中，创建一个公开的方法。这可以通过在子组件类中定义一个方法或者使用 React Hooks 中的 <code>useImperativeHandle</code> 来实现。</p>\n<ul>\n<li>\n<p>如果是类组件，可以在子组件类中定义一个方法，并将其挂载到实例上。例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> ChildComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  childMethod</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 子组件中需要执行的操作</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 子组件的渲染逻辑</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p>如果是函数式组件，可以使用 <code>useImperativeHandle</code> Hook 将指定的方法暴露给父组件。例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useImperativeHandle</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChildComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useImperativeHandle</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    childMethod</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 子组件中需要执行的操作</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 子组件的渲染逻辑</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ChildComponent</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>在父组件中，首先引用或创建对子组件的引用。可以使用 <code>ref</code> 对象来保存对子组件的引用。</p>\n<ul>\n<li>\n<p>如果是类组件，可以使用 <code>createRef</code> 创建一个 <code>ref</code> 对象，并将其传递给子组件的 <code>ref</code> prop。例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> ParentComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  handleClick</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 调用子组件的方法</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">childMethod</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">handleClick</span><span style=\"color:#999999\">()}></span><span style=\"color:#393A34\">调用子组件方法</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p>如果是函数式组件，可以使用 <code>useRef</code> 创建一个 <code>ref</code> 对象，并将其传递给子组件的 <code>ref</code> prop。例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> childRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 调用子组件的方法</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    childRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">childMethod</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">调用子组件方法</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<p>通过以上步骤，父组件就能够成功调用子组件中暴露的方法了。请注意，在函数式组件中，需要使用 <code>forwardRef</code> 来包裹子组件，并通过 <code>ref</code> 参数来定义暴露的方法。</p>\n"},{"title":"React中，能否直接将 props 的值复制给 state？","description":"","answer":"<p>应该避免这种写法：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\"> super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\"> // 不要这样做</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">color</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>因为这样做毫无必要（你可以直接使用 this.props.color），同时还产生了 bug（更新 prop 中的 color 时，并不会影响 state）。</p>\n<p>只有在你刻意忽略 prop 更新的情况下使用。</p>\n<p>此时，应将 prop 重命名为 initialColor 或 defaultColor。必要时，你可以修改它的 key，以强制 <strong>重置</strong> 其内部 state。</p>\n"},{"title":"useMemo和useCallback 的区别及使用场景?","description":"","answer":"<p>useMemo 和 useCallback 接收的参数都是一样，第一个参数为回调，第二个参数为要依赖的数据\n共同作用:\n仅仅依赖数据发生变化，才会重新计算结果，也就是起到缓存的作用，\n两者区别:\n1.useMemo 计算结果是 return 回来的值,主要用于缓存计算结果的值。应用场景如:需要进行二次计算的状态</p>\n<p>2.useCallback 计算结果是函数,主要用于缓存函数，应用场景如:需要缓存的函数，因为函数式组件每次任何一个state 的变化，整个组件都会被重新刷新，一些函数是没有必要被重新刷新的，此时就应该缓存起来，提高性能，和减少资源浪费。</p>\n"},{"title":"谈一谈你对 React 中 Fiber 的理解以及什么是 Fiber 双缓冲?","description":"","answer":"<ul>\n<li>\n<p>**FiberNode 作为一种架构:**在 React v15 以及之前的版本中，Reconceiler 采用的是递归的方式，因此被称之为 StackReconciler,到了 React v16 版本之后，引入了 Fiber,Reconceiler 也从 Stack Reconciler 变为了 Fiber Reconceiler，各个FiberNode 之间通过链表的形式串联了起来。</p>\n</li>\n<li>\n<p>**FiberNode 作为一种数据类型:**Fiber 本质上也是一个对象，是之前虚拟DOM 对象(React 元素，createElement 的返回值)的一种升级版本，每个 Fiber 对象里面会包含 React 元素的类型，周围链接的 FiberNode，DOM 相关信息。</p>\n</li>\n<li>\n<p>**FiberNode 作为动态的工作单元:**在每个 FiberNode 中，保存了“本次更新中该 React 元素变化的数据、要执行的工作(增删、改、更新Ref、副作用等)“等信息。</p>\n<p>所谓 Fiber 双缓冲树，指的是在内存中构建两颗树，并直接在内存中进行替换的技术。在 React 中使用 Wip Fiber Tree 和 CurrentFiber Tree 这两颗树来实现更新的逻辑。Wip Fiber Tree 在内存中完成更新，而Current fiber Tree 是最终要渲染的树，两颗树通过alternatè 指针相互指向，这样在下一次渲染的时候，直接复用 Wip Fiber Tree 作为下一次的渲染树，而上一次的渲染树又作为新的Wip Fiber Tree，这样可以加快 DOM 节点的替换与更新。</p>\n</li>\n</ul>\n"},{"title":"如何通过 React.memo 优化条件渲染？","description":"","answer":"<p>使用 <code>React.memo</code> 优化条件渲染，主要是通过减少不必要的渲染来提高组件的性能。</p>\n<p><code>React.memo</code> 是一个高阶组件，在组件的 <strong>props</strong> 没有变化时跳过渲染，从而避免不必要的 DOM 更新。</p>\n<p><strong>1. React.memo 的基本原理</strong></p>\n<p><code>React.memo</code> 是对函数组件的优化。当组件的 <strong>props</strong> 没有变化时，它会跳过该组件的渲染。通常情况下，React 会重新渲染组件，即使 <strong>props</strong> 没有改变，但通过 <code>React.memo</code>，我们可以控制这种行为。</p>\n<p><strong>2. 条件渲染的优化</strong></p>\n<p>在 React 中，条件渲染通常是根据某些条件来判断是否显示某个组件，比如通过 <code>&amp;&amp;</code> 或 <code>if</code> 来控制组件的显示与隐藏：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function MyComponent({ shouldRender }) {</span></span>\n<span class=\"line\"><span>  return (</span></span>\n<span class=\"line\"><span>    &#x3C;div></span></span>\n<span class=\"line\"><span>      {shouldRender &#x26;&#x26; &#x3C;ExpensiveComponent />}</span></span>\n<span class=\"line\"><span>    &#x3C;/div></span></span>\n<span class=\"line\"><span>  );</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>3. 使用 <code>React.memo</code> 优化条件渲染</strong></p>\n<p>假设 <code>ExpensiveComponent</code> 是一个渲染非常消耗性能的组件，在条件渲染的场景下，我们可以通过 <code>React.memo</code> 来避免 <code>ExpensiveComponent</code> 的重复渲染，尤其是当 <code>shouldRender</code> 没有变化时。</p>\n<p><strong>步骤 1：优化条件渲染</strong></p>\n<p>我们可以对 <code>ExpensiveComponent</code> 使用 <code>React.memo</code> 来缓存它的渲染结果，只有当它的 <strong>props</strong> 发生变化时才重新渲染：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>const ExpensiveComponent = React.memo(function ExpensiveComponent({ data }) {</span></span>\n<span class=\"line\"><span>  console.log('ExpensiveComponent rendered');</span></span>\n<span class=\"line\"><span>  return &#x3C;div>{data}&#x3C;/div>;</span></span>\n<span class=\"line\"><span>});</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>步骤 2：父组件的条件渲染</strong></p>\n<p>然后，在父组件中做条件渲染时，<code>ExpensiveComponent</code> 会根据 <strong>props</strong> 是否变化来决定是否重新渲染：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function ParentComponent({ shouldRender, data }) {</span></span>\n<span class=\"line\"><span>  return (</span></span>\n<span class=\"line\"><span>    &#x3C;div></span></span>\n<span class=\"line\"><span>      {shouldRender &#x26;&#x26; &#x3C;ExpensiveComponent data={data} />}</span></span>\n<span class=\"line\"><span>    &#x3C;/div></span></span>\n<span class=\"line\"><span>  );</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>4. 自定义比较函数（可选）</strong></p>\n<p>如果默认的浅比较不满足要求（即某些复杂的对象或深层嵌套的对象），我们可以传递一个自定义比较函数来决定是否更新组件：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>const ExpensiveComponent = React.memo(</span></span>\n<span class=\"line\"><span>  function ExpensiveComponent({ data }) {</span></span>\n<span class=\"line\"><span>    console.log('ExpensiveComponent rendered');</span></span>\n<span class=\"line\"><span>    return &#x3C;div>{data}&#x3C;/div>;</span></span>\n<span class=\"line\"><span>  },</span></span>\n<span class=\"line\"><span>  (prevProps, nextProps) => {</span></span>\n<span class=\"line\"><span>    // 自定义比较函数：只有当 data 发生变化时才重新渲染</span></span>\n<span class=\"line\"><span>    return prevProps.data === nextProps.data;</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>);</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>5. 优化场景</strong></p>\n<ul>\n<li><strong>避免不必要的重新渲染</strong>：当父组件重新渲染，但子组件的 props 没有变化时，可以使用 <code>React.memo</code> 防止子组件的重新渲染。</li>\n<li><strong>条件渲染的场景</strong>：当有复杂的组件或组件树需要根据某个条件渲染时，使用 <code>React.memo</code> 可以避免不必要的渲染。</li>\n</ul>\n"},{"title":"React 中 useEffect 和 useLayoutEffect 的区别?","description":"","answer":""},{"title":"setState 是同步还是异步的？","description":"","answer":""},{"title":" useRef、ref、forwardsRef 的区别是什么?","description":"","answer":""},{"title":"为什么 Redux 的 reducer 中不能做异步操作？","description":"","answer":""},{"title":"使用 React hooks 怎么实现类里面的所有生命周期？","description":"","answer":""},{"title":"简述下 React 的生命周期？每个生命周期都做了什么？","description":"","answer":"<p><strong>挂载</strong></p>\n<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li>constructor()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n</ul>\n<p><strong>更新</strong></p>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li>static getDerivedStateFromProps()</li>\n<li>shouldComponentUpdate()</li>\n<li>render()</li>\n<li>getSnapshotBeforeUpdate()</li>\n<li>componentDidUpdate()</li>\n</ul>\n<p><strong>卸载</strong></p>\n<p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li>componentWillUnmount()</li>\n</ul>\n<p><strong>错误处理</strong></p>\n<p>渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p>\n<ul>\n<li>static getDerivedStateFromError()</li>\n<li>componentDidCatch()</li>\n</ul>\n<p><strong>具体介绍</strong></p>\n<p><strong>render()</strong></p>\n<p>render() 方法是 class 组件中唯一必须实现的方法。</p>\n<p>当 render 被调用时，它会检查 this.props 和 this.state 的变化并返回以下类型之一：</p>\n<ul>\n<li>React 元素。通常通过 JSX 创建。例如，&lt;div /&gt; 会被 React 渲染为 DOM 节点，&lt;MyComponent /&gt; 会被 React 渲染为自定义组件，无论是 &lt;div /&gt; 还是 &lt;MyComponent /&gt; 均为 React 元素。</li>\n<li>数组或 fragments。 使得 render 方法可以返回多个元素。欲了解更多详细信息，请参阅 fragments 文档。</li>\n<li>Portals。可以渲染子节点到不同的 DOM 子树中。欲了解更多详细信息，请参阅有关 portals 的文档</li>\n<li>字符串或数值类型。它们在 DOM 中会被渲染为文本节点</li>\n<li>布尔类型或 null。什么都不渲染。（主要用于支持返回 test &amp;&amp; &lt;Child /&gt; 的模式，其中 test 为布尔类型。）</li>\n</ul>\n<p>render() 函数应该为纯函数，这意味着在不修改组件 state 的情况下，每次调用时都返回相同的结果，并且它不会直接与浏览器交互。</p>\n<p>如需与浏览器进行交互，请在 componentDidMount() 或其他生命周期方法中执行你的操作。保持 render() 为纯函数，可以使组件更容易思考。</p>\n<p><strong>constructor()</strong></p>\n<p>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。</p>\n<p>在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 super(props)。否则，this.props 在构造函数中可能会出现未定义的 bug。</p>\n<p>通常，在 React 中，构造函数仅用于以下两种情况：</p>\n<p>通过给 this.state 赋值对象来初始化内部 state。</p>\n<ul>\n<li>为事件处理函数绑定实例</li>\n<li>在 constructor() 函数中不要调用 setState() 方法。如果你的组件需要使用内部 state，请直接在构造函数中为 this.state 赋值初始 state。</li>\n</ul>\n<p>只能在构造函数中直接为 this.state 赋值。如需在其他方法中赋值，你应使用 this.setState() 替代。</p>\n<p>要避免在构造函数中引入任何副作用或订阅。如遇到此场景，请将对应的操作放置在 componentDidMount 中。</p>\n<p><strong>componentDidMount()</strong></p>\n<p>componentDidMount() 会在组件挂载后（插入 DOM 树中）立即调用。依赖于 DOM 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。</p>\n<p>这个方法是比较适合添加订阅的地方。如果添加了订阅，请不要忘记在 componentWillUnmount() 里取消订阅</p>\n<p>你可以在 componentDidMount() 里直接调用 setState()。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在 render() 两次调用的情况下，用户也不会看到中间状态。请谨慎使用该模式，因为它会导致性能问题。通常，你应该在 constructor() 中初始化 state。如果你的渲染依赖于 DOM 节点的大小或位置，比如实现 modals 和 tooltips 等情况下，你可以使用此方式处理。</p>\n<p><strong>componentDidUpdate()</strong></p>\n<p>componentDidUpdate() 会在更新后会被立即调用。首次渲染不会执行此方法。</p>\n<p>当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">componentDidUpdate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prevProps</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 典型用法（不要忘记比较 props）：</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">userID</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> prevProps</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">userID</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">fetchData</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">userID</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>你也可以在 componentDidUpdate() 中直接调用 setState()，但请注意它必须被包裹在一个条件语句里，正如上述的例子那样进行处理，否则会导致死循环。它还会导致额外的重新渲染，虽然用户不可见，但会影响组件性能。不要将 props “镜像”给 state，请考虑直接使用 props。 欲了解更多有关内容，请参阅为什么 props 复制给 state 会产生 bug。</p>\n<p>如果组件实现了 getSnapshotBeforeUpdate() 生命周期（不常用），则它的返回值将作为 componentDidUpdate() 的第三个参数 “snapshot” 参数传递。否则此参数将为 undefined。</p>\n<p><strong>componentWillUnmount()</strong></p>\n<p>componentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。</p>\n<p>componentWillUnmount() 中不应调用 setState()，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</p>\n<p><strong>shouldComponentUpdate()</strong></p>\n<p>根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。</p>\n<p>当 props 或 state 发生变化时，shouldComponentUpdate() 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 forceUpdate() 时不会调用该方法。</p>\n<p>此方法仅作为性能优化的方式而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。你应该考虑使用内置的 PureComponent 组件，而不是手动编写 shouldComponentUpdate()。PureComponent 会对 props 和 state 进行浅层比较，并减少了跳过必要更新的可能性。</p>\n<p>如果你一定要手动编写此函数，可以将 this.props 与 nextProps 以及 this.state 与nextState 进行比较，并返回 false 以告知 React 可以跳过更新。请注意，返回 false 并不会阻止子组件在 state 更改时重新渲染。</p>\n<p>我们不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能。</p>\n<p>目前，如果 shouldComponentUpdate() 返回 false，则不会调用 UNSAFE_componentWillUpdate()，render() 和 componentDidUpdate()。后续版本，React 可能会将 shouldComponentUpdate 视为提示而不是严格的指令，并且，当返回 false 时，仍可能导致组件重新渲染。</p>\n<p><strong>static getDerivedStateFromProps()</strong></p>\n<p>getDerivedStateFromProps 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</p>\n<p>此方法适用于罕见的用例，即 state 的值在任何时候都取决于 props。例如，实现 &lt;Transition&gt; 组件可能很方便，该组件会比较当前组件与下一组件，以决定针对哪些组件进行转场动画。</p>\n<p>派生状态会导致代码冗余，并使组件难以维护。 确保你已熟悉这些简单的替代方案：</p>\n<ul>\n<li>如果你需要执行副作用（例如，数据提取或动画）以响应 props 中的更改，请改用 componentDidUpdate。</li>\n<li>如果只想在 prop 更改时重新计算某些数据，请使用 memoization helper 代替。</li>\n<li>如果你想在 prop 更改时“重置”某些 state，请考虑使组件完全受控或使用 key 使组件完全不受控代替。</li>\n</ul>\n<p>此方法无权访问组件实例。如果你需要，可以通过提取组件 props 的纯函数及 class 之外的状态，在getDerivedStateFromProps()和其他 class 方法之间重用代码。</p>\n<p>请注意，不管原因是什么，都会在每次渲染前触发此方法。这与 UNSAFE_componentWillReceiveProps 形成对比，后者仅在父组件重新渲染时触发，而不是在内部调用 setState 时。</p>\n<p><strong>getSnapshotBeforeUpdate()</strong></p>\n<p>getSnapshotBeforeUpdate() 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 componentDidUpdate()。</p>\n<p>此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</p>\n<p>应返回 snapshot 的值（或 null）。</p>\n<p><strong>Error boundaries</strong></p>\n<p>Error boundaries 是 React 组件，它会在其子组件树中的任何位置捕获 JavaScript 错误，并记录这些错误，展示降级 UI 而不是崩溃的组件树。Error boundaries 组件会捕获在渲染期间，在生命周期方法以及其整个树的构造函数中发生的错误。</p>\n<p>如果 class 组件定义了生命周期方法 static getDerivedStateFromError() 或 componentDidCatch() 中的任何一个（或两者），它就成为了 Error boundaries。通过生命周期更新 state 可让组件捕获树中未处理的 JavaScript 错误并展示降级 UI。</p>\n<p>仅使用 Error boundaries 组件来从意外异常中恢复的情况；不要将它们用于流程控制。</p>\n<p><strong>static getDerivedStateFromError()</strong></p>\n<p>此生命周期会在后代组件抛出错误后被调用。 它将抛出的错误作为参数，并返回一个值以更新 state。</p>\n<p><strong>componentDidCatch()</strong></p>\n<p>此生命周期在后代组件抛出错误后被调用。 它接收两个参数：</p>\n<ul>\n<li>error —— 抛出的错误。</li>\n<li>info —— 带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息。</li>\n</ul>\n<p>componentDidCatch() 会在“提交”阶段被调用，因此允许执行副作用。 它应该用于记录错误之类的情况。</p>\n<p>React 的开发和生产构建版本在 componentDidCatch() 的方式上有轻微差别。</p>\n<p>在开发模式下，错误会冒泡至 window，这意味着任何 window.onerror 或 window.addEventListener('error', callback) 会中断这些已经被 componentDidCatch() 捕获的错误。</p>\n<p>相反，在生产模式下，错误不会冒泡，这意味着任何根错误处理器只会接受那些没有显式地被 componentDidCatch() 捕获的错误。</p>\n"},{"title":"React 18 的新特性有哪些？","description":"","answer":""},{"title":"memo 和 useMemo 有和区别？","description":"","answer":""},{"title":"什么是 React Native？它的作用是什么？","description":"","answer":""},{"title":"React Native 工作原理是什么？","description":"","answer":""},{"title":" 函数组件和 class 组件有什么区别？","description":"","answer":""},{"title":"从 React 层面上， 能做的性能优化有哪些？","description":"","answer":""},{"title":"高阶组件理解多少？","description":"","answer":""},{"title":"在 React 项目中，一般怎么处理错误？","description":"","answer":"<p>在 React 项目中，错误处理一般分为 <strong>组件级错误</strong> 和 <strong>全局错误</strong>，主要采用 <strong>错误边界（Error Boundaries）</strong>、<strong><code>try...catch</code></strong>、<strong>全局监听</strong> 以及 <strong>日志上报</strong> 等方式。</p>\n<ol>\n<li><strong>错误边界（Error Boundaries）</strong>（处理渲染、生命周期方法中的错误）</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> ErrorBoundary</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  state</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> hasError</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  static</span><span style=\"color:#59873A\"> getDerivedStateFromError</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> hasError</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  componentDidCatch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> info</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">React</span><span style=\"color:#999999\">.</span><span style=\"color:#2E8F82\">ErrorInfo</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Error:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> info</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hasError</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">出错了！</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用：</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">ErrorBoundary</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">ErrorBoundary</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li><strong><code>try...catch</code> 处理事件错误</strong></li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 可能出错的代码</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">事件错误:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">点击</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"3\">\n<li><strong>全局监听（<code>window.onerror</code>、<code>unhandledrejection</code>）</strong></li>\n</ol>\n<p>对于 <strong>未捕获的 JavaScript 错误</strong>，可以用 <code>window.onerror</code> 或 <code>unhandledrejection</code> 进行兜底：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onerror</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">message</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> source</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> lineno</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> colno</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">全局错误:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> message</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> source</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> lineno</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> colno</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">unhandledrejection</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Promise 未捕获错误:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"4\">\n<li><strong>日志上报</strong></li>\n</ol>\n<p>可以结合 <strong>Sentry</strong> 或其他监控系统，将错误上报：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#1E754F\"> *</span><span style=\"color:#1E754F\"> as</span><span style=\"color:#B07D48\"> Sentry</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">@sentry/react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">Sentry</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">init</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> dsn</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">your-dsn-url</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">Sentry.ErrorBoundary</span><span style=\"color:#B07D48\"> fallback</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">出错了</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">Sentry.ErrorBoundary</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"redux-thunk 和 redux 是什么关系？","description":"","answer":""},{"title":"在 React 中如何实现代码分割？有哪些常见方式？","description":"","answer":"<p>在 React 中，代码分割主要依赖于 <strong><code>React.lazy</code> + <code>Suspense</code></strong> 和 <strong><code>React Loadable</code>（第三方库）</strong>，此外 Webpack 的 <strong><code>import()</code></strong> 也能实现代码分割。</p>\n<p>常见方式如下：</p>\n<ol>\n<li>\n<p><strong><code>React.lazy</code> + <code>Suspense</code></strong>（官方推荐）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> LazyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">lazy</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#AB5959\"> import</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">./LazyComponent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">Suspense</span><span style=\"color:#B07D48\"> fallback</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Loading...</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">LazyComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">Suspense</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong><code>import()</code> 动态导入</strong>（适用于路由懒加载）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> lazy</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> LazyPage</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> lazy</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#AB5959\"> import</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">./pages/LazyPage</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong><code>React Loadable</code>（第三方库，适用于更复杂的场景）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> Loadable</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-loadable</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> LoadableComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> Loadable</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  loader</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#AB5959\"> import</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">./MyComponent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  loading</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Loading...</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>Webpack <code>import()</code> + <code>optimization.splitChunks</code></strong>（适用于手动分割多个模块）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  optimization</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    splitChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">all</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"React Router 中，HashRouter 和 BrowserRouter 的区别和原理？","description":"","answer":"<p><code>React Router</code> 是一个用于处理 React 应用中的路由的库，其中 <code>HashRouter</code> 和 <code>BrowserRouter</code> 是两种主要的路由器组件。它们的主要区别在于路由的实现方式和 URL 的处理方式。下面是它们的区别和原理：</p>\n<p><strong>1. <code>HashRouter</code></strong></p>\n<p><strong>原理</strong></p>\n<ul>\n<li>\n<p><strong>哈希路由</strong>：<code>HashRouter</code> 使用 URL 的哈希（<code>#</code>）部分来保持和同步路由信息。哈希路由器将路由信息附加在 URL 的 <code>#</code> 之后，浏览器不会将其发送到服务器，这样所有的路由信息都在客户端处理。</p>\n<p><strong>例如</strong>：</p>\n<ul>\n<li>当前 URL：<code>http://example.com/#/home</code></li>\n<li><code>HashRouter</code> 解析 URL 中的 <code>#/home</code> 部分来决定显示哪个组件。</li>\n</ul>\n</li>\n<li>\n<p><strong>工作机制</strong>：</p>\n<ul>\n<li>浏览器的哈希变化不会导致页面重新加载，只会更新 <code>window.location.hash</code>。</li>\n<li>当 URL 中的哈希部分变化时，<code>HashRouter</code> 会监听这些变化并更新路由。</li>\n</ul>\n</li>\n</ul>\n<p><strong>优点</strong></p>\n<ul>\n<li><strong>服务器配置简化</strong>：由于路由信息不发送到服务器，服务器不需要对这些路由信息进行处理。适用于不需要配置服务器的场景。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li><strong>URL 体验较差</strong>：哈希值对用户不太友好，不支持传统的 URL 链接和书签功能。</li>\n</ul>\n<p><strong>2. <code>BrowserRouter</code></strong></p>\n<p><strong>原理</strong></p>\n<ul>\n<li>\n<p><strong>HTML5 History API</strong>：<code>BrowserRouter</code> 使用 HTML5 的 <code>History API</code> 来管理路由。它通过 <code>pushState</code> 和 <code>replaceState</code> 操作历史记录，来改变浏览器的 URL 地址而不重新加载页面。</p>\n<p><strong>例如</strong>：</p>\n<ul>\n<li>当前 URL：<code>http://example.com/home</code></li>\n<li><code>BrowserRouter</code> 直接解析 <code>/home</code> 来决定显示哪个组件。</li>\n</ul>\n</li>\n<li>\n<p><strong>工作机制</strong>：</p>\n<ul>\n<li>通过 <code>History API</code> 更新浏览器的 URL，并监听这些变化来更新路由。</li>\n<li>需要服务器配置来处理路由，因为所有的路由信息都会发送到服务器，服务器需要进行相应的处理和配置。</li>\n</ul>\n</li>\n</ul>\n<p><strong>优点</strong></p>\n<ul>\n<li><strong>更干净的 URL</strong>：没有 <code>#</code> 符号，URL 更符合传统的路由标准。</li>\n<li><strong>更好的用户体验</strong>：支持完整的 URL 链接和书签功能。</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li><strong>服务器配置要求</strong>：需要服务器进行配置以支持前端路由，通常需要配置服务器将所有的请求重定向到应用的入口点（如 <code>index.html</code>）。</li>\n</ul>\n"},{"title":"React中，useRef、ref、forwardsRef 的区别是什么?","description":"","answer":"<p><code>useRef</code>、<code>ref</code> 和 <code>forwardRef</code> 都涉及到引用（refs）的使用，但它们的用途和行为有所不同。下面是它们的主要区别：</p>\n<p><strong>1. <code>useRef</code></strong></p>\n<ul>\n<li>\n<p><strong>用途</strong>：在函数组件中创建和管理引用。<code>useRef</code> 返回一个可变的 <code>ref</code> 对象，该对象的 <code>.current</code> 属性可以用来访问 DOM 节点或保存任意值。</p>\n</li>\n<li>\n<p><strong>使用方式</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 访问和操作 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><code>useRef</code> 创建的引用对象在组件的整个生命周期内保持不变。</li>\n<li>可以用来保存任意数据，除了 DOM 节点。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. <code>ref</code></strong></p>\n<ul>\n<li>\n<p><strong>用途</strong>：在类组件中使用，或者通过 <code>React.forwardRef</code> 在函数组件中使用，来访问 DOM 节点或组件实例。</p>\n</li>\n<li>\n<p><strong>使用方式</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyClassComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  componentDidMount</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 访问和操作 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\"> render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">   return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyFunctionComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ForwardedComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forwardRef</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">MyFunctionComponent</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><code>ref</code> 用于访问类组件的实例或函数组件的 DOM 元素。</li>\n<li>在函数组件中使用 <code>ref</code> 需要配合 <code>React.forwardRef</code> 使用。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. <code>forwardRef</code></strong></p>\n<ul>\n<li>\n<p><strong>用途</strong>：允许函数组件接收 <code>ref</code> 并将其转发到子组件的 DOM 元素或其他组件。</p>\n</li>\n<li>\n<p><strong>使用方式</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 访问和操作 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><code>forwardRef</code> 高阶组件允许函数组件接收 <code>ref</code>，并将 <code>ref</code> 转发到子组件的 DOM 元素或其他组件上。</li>\n<li>适用于需要将 <code>ref</code> 传递给深层组件的情况。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"useEffect 的第二个参数，是如何判断实现依赖是否发生变化的？","description":"","answer":"<p><code>useEffect</code> 的依赖数组的比较是通过浅比较（shallow comparison）实现的。</p>\n<p>具体来说，以下是比较方法的细节：</p>\n<p><strong>1. 基础数据类型的比较</strong></p>\n<p>对于基本数据类型（如 <code>string</code>、<code>number</code>、<code>boolean</code>），React 直接比较它们的值：</p>\n<ul>\n<li><strong>相等</strong>：<code>value1 === value2</code>。如果两个基本数据类型的值相等，React 认为它们没有变化。</li>\n<li><strong>不相等</strong>：如果值不相等，则认为依赖项发生了变化。</li>\n</ul>\n<p><strong>2. 引用类型的比较</strong></p>\n<p>对于引用类型（如对象、数组、函数），React 进行浅比较，即比较引用的内存地址：</p>\n<ul>\n<li><strong>相同引用</strong>：如果对象或数组的引用没有变化（即它们仍指向同一个内存地址），React 认为依赖项没有变化。</li>\n<li><strong>不同引用</strong>：如果对象或数组的引用发生了变化（即它们指向不同的内存地址），React 认为依赖项发生了变化。</li>\n</ul>\n<p><strong>浅比较的具体方法</strong></p>\n<ul>\n<li><strong>对象和数组的引用比较</strong>：\n<ul>\n<li>React 通过 <code>===</code> 运算符来比较对象或数组的引用。</li>\n<li>这意味着即使对象或数组的内容发生了变化，只要它们的引用没有变化，React 认为它们没有变化。</li>\n</ul>\n</li>\n<li><strong>函数的引用比较</strong>：\n<ul>\n<li>函数也是通过其引用进行比较的。如果一个函数的引用在不同的渲染中保持不变，React 认为函数没有变化。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例代码</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setData</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">([]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 副作用函数将在 `count` 或 `data` 变化时重新执行</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">   console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Effect triggered</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">]);</span><span style=\"color:#A0ADA0\"> // 依赖数组</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Increment Count</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setData</span><span style=\"color:#999999\">([...</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\">])}></span><span style=\"color:#393A34\">Add Data</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>基础数据类型（<code>count</code>）</strong>：\n<ul>\n<li>每次点击按钮时，<code>count</code> 的值都会改变，React 会认为 <code>count</code> 发生了变化，从而触发 <code>useEffect</code>。</li>\n</ul>\n</li>\n<li><strong>引用类型（<code>data</code>）</strong>：\n<ul>\n<li>每次点击“Add Data”按钮时，<code>data</code> 的引用会改变（由于使用了展开运算符创建了新数组），React 会认为 <code>data</code> 发生了变化，从而触发 <code>useEffect</code>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><strong>数组和对象的不可变性</strong>：为确保 <code>useEffect</code> 能正确地检测依赖变化，通常建议使用不可变数据结构或确保数据结构的变化能够生成新的引用。</li>\n<li><strong>避免不必要的副作用执行</strong>：在依赖数组中包含过多的依赖项，尤其是引用类型的依赖项，可能导致不必要的副作用执行，影响性能。</li>\n</ul>\n"},{"title":"forwardRef 作用是什么？","description":"","answer":"<p><code>forwardRef</code> 是 React 的一个高阶组件（HOC），用于将父组件的 <code>ref</code> 转发到子组件的 DOM 节点或组件实例中。它使得父组件能够直接访问子组件的 DOM 元素或方法。这在一些情况下非常有用，比如需要在父组件中操作子组件的 DOM 元素或调用子组件的方法时。</p>\n<p><strong>使用场景</strong></p>\n<ol>\n<li><strong>访问子组件的 DOM 节点：</strong> 当需要对子组件的 DOM 元素进行操作（例如，获取焦点、调整大小等），而这个子组件是由其他组件包裹的情况下。</li>\n<li><strong>组合高阶组件和 <code>ref</code>：</strong> 在使用高阶组件（HOC）时，<code>ref</code> 不会自动转发到被包裹的组件中。使用 <code>forwardRef</code> 可以将 <code>ref</code> 转发到正确的组件或 DOM 元素。</li>\n</ol>\n<p><strong>基本用法</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useImperativeHandle</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 子组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> Input</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useImperativeHandle</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    focus</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 父组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 调用子组件的 focus 方法</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Focus Input</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> ParentComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点</strong></p>\n<ul>\n<li><strong><code>forwardRef</code></strong>：是一个 React 函数，用于包装组件并转发 <code>ref</code>。</li>\n<li><strong><code>useImperativeHandle</code></strong>：用来自定义暴露给父组件的 <code>ref</code> 实例。可以将特定的函数或属性暴露给父组件。</li>\n</ul>\n"},{"title":"怎么获取函数组件的实例？","description":"","answer":"<p>在 React 中，函数组件没有实例，因此传统的 <code>ref</code> 机制（用于访问类组件实例的方法）不适用。不过，可以通过以下几种方式在函数组件中使用 <code>ref</code> 来访问 DOM 元素或函数组件的内部逻辑：</p>\n<p><strong>1. 访问 DOM 元素</strong></p>\n<p>对于函数组件中引用 DOM 元素，可以使用 <code>useRef</code> 来创建一个 ref，并将其绑定到 DOM 元素上：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 访问 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 例如，设置焦点</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 使用 <code>forwardRef</code> 转发 Ref</strong></p>\n<p>要在函数组件中访问子组件的 DOM 元素或通过 ref 传递组件实例，可以使用 <code>React.forwardRef</code> 来转发 ref：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useImperativeHandle</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 子组件使用 forwardRef 来接收父组件的 ref</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ChildComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> localRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useImperativeHandle</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    focus</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">localRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        localRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">localRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 父组件使用 ref 来访问子组件的方法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> childRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 调用子组件的 focus 方法</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      childRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">childRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. <code>useImperativeHandle</code> 的作用</strong></p>\n<p><code>useImperativeHandle</code> 钩子允许你定制通过 ref 访问的实例值。例如，可以将特定的方法暴露给父组件，通过 ref 调用这些方法：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useImperativeHandle</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> CustomInput</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> localRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useImperativeHandle</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    focus</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      localRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">localRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">CustomInput</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Focus Input</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"React Reconciler 为何要采用 fiber 架构？","description":"","answer":"<p>React Reconciler 采用 Fiber 架构主要是为了提升性能和用户体验。Fiber 是 React 16 引入的一种新的协调算法，它相对于旧版的 Reconciler 具备以下优势：</p>\n<p><strong>1. 增量渲染</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：一次性计算并更新整个 UI 树，可能会导致性能瓶颈，尤其是在大型应用中。</li>\n<li><strong>Fiber 架构</strong>：支持增量渲染，将渲染任务拆分为小的单元，分批执行。这样可以在长时间运行的任务中插入中断点，使得 UI 更响应式。</li>\n</ul>\n<p><strong>2. 中断和优先级</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：一旦开始更新，渲染过程无法中断，可能会阻塞用户交互。</li>\n<li><strong>Fiber 架构</strong>：允许中断和恢复工作，可以根据任务的优先级来调整渲染顺序。低优先级的任务可以在高优先级任务完成后再继续执行，提高了用户交互的流畅性。</li>\n</ul>\n<p><strong>3. 任务调度</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：没有任务调度机制，所有更新都按顺序执行。</li>\n<li><strong>Fiber 架构</strong>：使用任务调度机制（Scheduler）来管理和调度不同优先级的更新任务，确保重要任务（如用户输入、动画）优先处理。</li>\n</ul>\n<p><strong>4. 异常处理</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：异常处理能力有限，无法优雅地处理渲染过程中的错误。</li>\n<li><strong>Fiber 架构</strong>：允许局部错误处理，确保在渲染过程中即使发生异常，也能保证 UI 的部分更新和恢复。</li>\n</ul>\n<p><strong>5. 渲染中断与恢复</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：无法中断和恢复渲染。</li>\n<li><strong>Fiber 架构</strong>：支持在渲染过程中中断并恢复，能够平滑处理长时间运行的任务。</li>\n</ul>\n<p><strong>6. 事务管理</strong></p>\n<ul>\n<li><strong>旧版 Reconciler</strong>：处理复杂的事务和操作较为困难。</li>\n<li><strong>Fiber 架构</strong>：将渲染任务分解为独立的事务，每个事务可以独立地管理和控制，简化了复杂操作的管理。</li>\n</ul>\n"},{"title":"fiber 架构的工作原理？","description":"","answer":"<p>React 中的 Fiber 架构是一种新的协调算法，旨在提高 React 的性能和用户体验。它通过引入新的数据结构和机制，使得 React 能够更高效地处理 UI 更新。以下是 Fiber 架构的工作原理：</p>\n<p><strong>1. Fiber 数据结构</strong></p>\n<ul>\n<li><strong>Fiber 节点</strong>：Fiber 是一个表示组件的内部数据结构，每个 Fiber 节点对应一个 React 组件。它包含了组件的状态、更新信息和子组件的引用等。</li>\n<li><strong>Fiber 树</strong>：Fiber 节点形成了一棵 Fiber 树，类似于旧版的虚拟 DOM 树。每个 Fiber 节点指向其父节点、子节点和兄弟节点。</li>\n</ul>\n<p><strong>2. 工作单元和增量渲染</strong></p>\n<ul>\n<li><strong>工作单元</strong>：渲染过程被分解为多个工作单元，每个单元代表一个小的渲染任务。这样可以将渲染过程拆分成可中断的任务，以避免长时间的阻塞。</li>\n<li><strong>增量渲染</strong>：Fiber 允许将渲染任务拆分为增量的操作，逐步完成整个渲染过程。每次渲染会处理 Fiber 树的一部分，允许在任务之间插入中断点，从而提高了渲染的响应性。</li>\n</ul>\n<p><strong>3. 调度优先级</strong></p>\n<ul>\n<li><strong>优先级调度</strong>：Fiber 引入了任务调度机制，允许根据任务的优先级来决定渲染的顺序。高优先级的任务（如用户输入、动画）会优先处理，而低优先级的任务（如数据加载）会在空闲时间处理。</li>\n<li><strong>任务中断和恢复</strong>：Fiber 支持在渲染过程中中断并恢复任务。当重要任务需要处理时，当前的渲染任务可以被中断，待重要任务完成后再恢复继续。</li>\n</ul>\n<p><strong>4. 更新和协调</strong></p>\n<ul>\n<li><strong>更新队列</strong>：每个 Fiber 节点都有一个更新队列，用于存储与组件相关的更新信息。更新队列可以包含多个更新，React 会根据更新的优先级和顺序进行协调。</li>\n<li><strong>协调过程</strong>：Fiber 通过对比新旧 Fiber 树来决定哪些部分需要更新。这一过程称为协调（Reconciliation），它会检查节点的变更，生成更新的补丁。</li>\n</ul>\n<p><strong>5. 渲染阶段和提交阶段</strong></p>\n<ul>\n<li><strong>渲染阶段</strong>：在渲染阶段，Fiber 架构会计算出需要更新的部分，但不会立即更新 DOM。这一阶段主要用于计算新的 Fiber 树，并生成更新任务。</li>\n<li><strong>提交阶段</strong>：在提交阶段，Fiber 会将渲染阶段计算出的更新应用到实际的 DOM 上。这个阶段是同步的，确保所有的更改都被正确地应用。</li>\n</ul>\n<p><strong>6. 错误处理</strong></p>\n<ul>\n<li><strong>错误边界</strong>：Fiber 提供了更好的错误处理机制，可以局部地处理渲染中的错误。即使在渲染过程中发生错误，也能保证 UI 的部分更新和恢复。</li>\n</ul>\n"},{"title":"说说 React render 阶段的执行过程","description":"","answer":"<p>在 React 的 Fiber 架构中，<code>render</code> 阶段是处理组件更新和生成虚拟 DOM 的关键阶段。</p>\n<p>以下是 React 在 <code>render</code> 阶段的执行过程的详细步骤：</p>\n<ol>\n<li><strong>触发渲染</strong></li>\n</ol>\n<ul>\n<li><strong>更新请求</strong>：组件的状态或属性发生变化时，会触发一次渲染。更新可以由用户交互、网络请求响应或内部状态变化等引起。</li>\n<li><strong>调度更新</strong>：React 会将渲染任务调度到 Fiber 树的更新队列中。调度过程使用 React 的调度器来确定任务的优先级。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>开始 Fiber 树的协调</strong></li>\n</ol>\n<ul>\n<li><strong>创建 Fiber 节点</strong>：在 <code>render</code> 阶段，React 会为每个组件创建或更新 Fiber 节点。Fiber 节点用于表示组件及其状态，包括当前的属性、子节点和更新队列等。</li>\n<li><strong>更新 Fiber 树</strong>：React 会将新的 Fiber 节点与旧的 Fiber 节点进行比较。这一步称为协调（Reconciliation）。React 会遍历 Fiber 树，对比新旧 Fiber 节点，计算出最小的更新集合。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>执行 <code>render</code> 方法</strong></li>\n</ol>\n<ul>\n<li><strong>执行组件的 <code>render</code> 方法</strong>：对于每个 Fiber 节点，React 会执行组件的 <code>render</code> 方法。<code>render</code> 方法会返回一个虚拟 DOM 树，这个虚拟 DOM 树会被包装成新的 Fiber 节点。</li>\n<li><strong>构建新的 Fiber 树</strong>：<code>render</code> 方法返回的虚拟 DOM 会被转换成新的 Fiber 节点，并替代旧的 Fiber 节点。新的 Fiber 节点将会作为子节点插入到父节点的子节点链中。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>更新 Fiber 节点</strong></li>\n</ol>\n<ul>\n<li><strong>处理更新</strong>：在 Fiber 节点中，React 会处理更新队列，应用新的状态或属性。<code>pendingProps</code> 和 <code>memoizedProps</code> 分别表示待处理的属性和已记忆的属性。</li>\n<li><strong>标记更新类型</strong>：React 会在 Fiber 节点中设置 <code>effectTag</code>，标记当前 Fiber 节点的更新类型，如插入、更新或删除。这些标记将用于提交阶段的实际 DOM 更新。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>构建 Fiber 树的副作用</strong></li>\n</ol>\n<ul>\n<li><strong>保存副作用</strong>：在 <code>render</code> 阶段，React 会收集和保存副作用（side effects），例如需要在组件挂载或更新时执行的副作用操作（如数据获取、事件监听等）。这些副作用将在 <code>commit</code> 阶段应用到实际 DOM 上。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>完成 <code>render</code> 阶段</strong></li>\n</ol>\n<ul>\n<li><strong>生成新的 Fiber 树</strong>：完成 <code>render</code> 阶段后，React 会生成一棵新的 Fiber 树，这棵树包含了所有更新后的 Fiber 节点。</li>\n<li><strong>准备提交</strong>：新的 Fiber 树会被提交到 <code>commit</code> 阶段进行实际的 DOM 更新。提交过程包括应用副作用和实际的 DOM 操作。</li>\n</ul>\n"},{"title":"说说 Fiber 的含义与数据结构","description":"","answer":"<p>在 React 的 Fiber 架构中，“Fiber” 是一种表示组件及其状态的内部数据结构。它是对 React 组件的详细描述，旨在提高组件的渲染性能和用户体验。以下是 Fiber 的含义和数据结构的详细解释：</p>\n<p><strong>1. Fiber 的含义</strong></p>\n<ul>\n<li><strong>Fiber 是一种内部数据结构</strong>：它用于表示每个 React 组件的状态和属性。每个 Fiber 对象包含有关组件的信息，如更新状态、子组件、位置信息等。</li>\n<li><strong>Fiber 的目标</strong>：通过 Fiber 数据结构，React 可以更高效地处理 UI 更新，支持增量渲染、任务中断和优先级调度。</li>\n</ul>\n<p><strong>2. Fiber 数据结构</strong></p>\n<p>Fiber 数据结构由多个字段组成，每个字段用于存储与组件相关的不同信息。主要字段包括：</p>\n<ul>\n<li><strong><code>tag</code></strong>：指示 Fiber 节点的类型，如函数组件、类组件或 DOM 元素。</li>\n<li><strong><code>key</code></strong>：唯一标识 Fiber 节点的键，用于优化子节点的匹配。</li>\n<li><strong><code>elementType</code></strong>：组件的类型，表示组件的类型（函数组件、类组件等）。</li>\n<li><strong><code>type</code></strong>：组件的具体类型或组件实例。例如，对于 DOM 元素，它可能是 <code>'div'</code> 或 <code>'span'</code>；对于类组件，它是类构造函数。</li>\n<li><strong><code>return</code></strong>：指向 Fiber 节点的父节点。形成 Fiber 树的父子关系。</li>\n<li><strong><code>child</code></strong>：指向 Fiber 节点的第一个子节点。用于构建 Fiber 树的结构。</li>\n<li><strong><code>sibling</code></strong>：指向 Fiber 节点的下一个兄弟节点。用于在同一层级遍历子节点。</li>\n<li><strong><code>stateNode</code></strong>：保存与组件关联的实际 DOM 节点或组件实例。例如，对于类组件，它是组件的实例；对于 DOM 元素，它是实际的 DOM 节点。</li>\n<li><strong><code>alternate</code></strong>：指向 Fiber 节点的旧版本（即上一次渲染时的 Fiber 节点）。用于比较新旧 Fiber 树，进行更新和协调。</li>\n<li><strong><code>updateQueue</code></strong>：保存组件的更新队列，包含需要应用的更新信息。每个更新记录可能包含一个新的状态或属性。</li>\n<li><strong><code>effectTag</code></strong>：用于标记 Fiber 节点的更新效果（如插入、更新或删除）。在提交阶段，React 会根据这些标记进行实际的 DOM 更新。</li>\n<li><strong><code>pendingProps</code></strong> 和 <strong><code>memoizedProps</code></strong>：分别表示待处理的属性和已记忆的属性。<code>pendingProps</code> 是新传入的属性，而 <code>memoizedProps</code> 是上一次渲染时的属性。</li>\n</ul>\n<p><strong>3. Fiber 树</strong></p>\n<ul>\n<li><strong>Fiber 树结构</strong>：Fiber 树类似于虚拟 DOM 树，表示组件的层级结构。每个 Fiber 节点代表一个组件或 DOM 元素。Fiber 树通过 <code>return</code>、<code>child</code> 和 <code>sibling</code> 字段构建成树形结构。</li>\n<li><strong>更新和协调</strong>：在 Fiber 架构中，React 使用 Fiber 数据结构来处理组件更新和协调（Reconciliation）。通过比较新旧 Fiber 树，React 可以计算出需要更新的部分并生成补丁。</li>\n</ul>\n<p><strong>4. Fiber 的优势</strong></p>\n<ul>\n<li><strong>增量渲染</strong>：Fiber 支持将渲染任务拆分为多个增量的工作单元，允许中断和恢复渲染，避免长时间的阻塞。</li>\n<li><strong>优先级调度</strong>：Fiber 引入了任务优先级调度，允许高优先级的任务（如用户输入）优先处理，提高响应性。</li>\n<li><strong>错误边界</strong>：Fiber 提供了更好的错误处理机制，可以局部地处理渲染中的错误，保证应用的稳定性。</li>\n</ul>\n"},{"title":"说说 React render 阶段的执行过程","description":"","answer":"<p>在 React 的 Fiber 架构中，<code>render</code> 阶段是处理组件更新和生成虚拟 DOM 的关键阶段。</p>\n<p>以下是 React 在 <code>render</code> 阶段的执行过程的详细步骤：</p>\n<ol>\n<li><strong>触发渲染</strong></li>\n</ol>\n<ul>\n<li><strong>更新请求</strong>：组件的状态或属性发生变化时，会触发一次渲染。更新可以由用户交互、网络请求响应或内部状态变化等引起。</li>\n<li><strong>调度更新</strong>：React 会将渲染任务调度到 Fiber 树的更新队列中。调度过程使用 React 的调度器来确定任务的优先级。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>开始 Fiber 树的协调</strong></li>\n</ol>\n<ul>\n<li><strong>创建 Fiber 节点</strong>：在 <code>render</code> 阶段，React 会为每个组件创建或更新 Fiber 节点。Fiber 节点用于表示组件及其状态，包括当前的属性、子节点和更新队列等。</li>\n<li><strong>更新 Fiber 树</strong>：React 会将新的 Fiber 节点与旧的 Fiber 节点进行比较。这一步称为协调（Reconciliation）。React 会遍历 Fiber 树，对比新旧 Fiber 节点，计算出最小的更新集合。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>执行 <code>render</code> 方法</strong></li>\n</ol>\n<ul>\n<li><strong>执行组件的 <code>render</code> 方法</strong>：对于每个 Fiber 节点，React 会执行组件的 <code>render</code> 方法。<code>render</code> 方法会返回一个虚拟 DOM 树，这个虚拟 DOM 树会被包装成新的 Fiber 节点。</li>\n<li><strong>构建新的 Fiber 树</strong>：<code>render</code> 方法返回的虚拟 DOM 会被转换成新的 Fiber 节点，并替代旧的 Fiber 节点。新的 Fiber 节点将会作为子节点插入到父节点的子节点链中。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>更新 Fiber 节点</strong></li>\n</ol>\n<ul>\n<li><strong>处理更新</strong>：在 Fiber 节点中，React 会处理更新队列，应用新的状态或属性。<code>pendingProps</code> 和 <code>memoizedProps</code> 分别表示待处理的属性和已记忆的属性。</li>\n<li><strong>标记更新类型</strong>：React 会在 Fiber 节点中设置 <code>effectTag</code>，标记当前 Fiber 节点的更新类型，如插入、更新或删除。这些标记将用于提交阶段的实际 DOM 更新。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>构建 Fiber 树的副作用</strong></li>\n</ol>\n<ul>\n<li><strong>保存副作用</strong>：在 <code>render</code> 阶段，React 会收集和保存副作用（side effects），例如需要在组件挂载或更新时执行的副作用操作（如数据获取、事件监听等）。这些副作用将在 <code>commit</code> 阶段应用到实际 DOM 上。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>完成 <code>render</code> 阶段</strong></li>\n</ol>\n<ul>\n<li><strong>生成新的 Fiber 树</strong>：完成 <code>render</code> 阶段后，React 会生成一棵新的 Fiber 树，这棵树包含了所有更新后的 Fiber 节点。</li>\n<li><strong>准备提交</strong>：新的 Fiber 树会被提交到 <code>commit</code> 阶段进行实际的 DOM 更新。提交过程包括应用副作用和实际的 DOM 操作。</li>\n</ul>\n"},{"title":"说说 React commit 阶段的执行过程","description":"","answer":"<p>在 React 的 Fiber 架构中，<code>commit</code> 阶段是将更新应用到实际 DOM 的关键步骤。这个阶段处理在 <code>render</code> 阶段中计算出的所有副作用，并实际更新页面内容。以下是 <code>commit</code> 阶段的详细执行过程：</p>\n<ol>\n<li><strong>提交 Fiber 树</strong></li>\n</ol>\n<ul>\n<li><strong>获取 Fiber 树</strong>：<code>commit</code> 阶段开始时，React 会获取从 <code>render</code> 阶段生成的 Fiber 树。这棵树包含所有需要更新的 Fiber 节点及其副作用标记。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>遍历 Fiber 树</strong></li>\n</ol>\n<ul>\n<li><strong>递归遍历</strong>：React 会递归遍历 Fiber 树，从根节点开始，逐层处理每个 Fiber 节点。每个节点会根据其 <code>effectTag</code> 属性执行相应的操作。</li>\n<li><strong>处理副作用</strong>：副作用包括插入、更新和删除 DOM 元素、执行生命周期方法、调用 <code>useEffect</code> 和 <code>useLayoutEffect</code> 的回调函数等。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>应用副作用</strong></li>\n</ol>\n<ul>\n<li><strong>插入节点</strong>：对于标记为插入的 Fiber 节点，React 会在实际 DOM 中插入对应的节点。这包括创建新的 DOM 元素、设置属性和插入到正确的位置。</li>\n<li><strong>更新节点</strong>：对于标记为更新的 Fiber 节点，React 会更新现有的 DOM 元素。这包括更新元素的属性、文本内容和样式等。</li>\n<li><strong>删除节点</strong>：对于标记为删除的 Fiber 节点，React 会从实际 DOM 中移除对应的节点。这包括删除元素、清理事件监听器等。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>处理生命周期方法和副作用</strong></li>\n</ol>\n<ul>\n<li><strong>调用生命周期方法</strong>：在 <code>commit</code> 阶段，React 会调用组件的生命周期方法，如 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code>。</li>\n<li><strong>执行 <code>useEffect</code> 和 <code>useLayoutEffect</code></strong>：React 会执行 <code>useEffect</code> 和 <code>useLayoutEffect</code> 的回调函数。这些回调函数在组件挂载和更新后执行，用于处理副作用操作（如数据获取、事件绑定等）。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>更新 Fiber 树</strong></li>\n</ol>\n<ul>\n<li><strong>更新 Fiber 节点</strong>：在 <code>commit</code> 阶段完成后，React 会更新 Fiber 节点的状态和属性，将 <code>current</code> 树指向新的 Fiber 树。</li>\n<li><strong>清理工作</strong>：完成副作用处理后，React 会清理 Fiber 节点上的副作用标记和临时状态，为下一次渲染做好准备。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>浏览器布局和绘制</strong></li>\n</ol>\n<ul>\n<li><strong>布局计算</strong>：在实际 DOM 更新后，浏览器会进行布局计算，确定元素的最终位置和尺寸。</li>\n<li><strong>绘制</strong>：浏览器会根据布局计算结果绘制页面内容。这个过程包括将元素绘制到屏幕上，并处理样式、颜色和图像等。</li>\n</ul>\n"},{"title":"React 中，fiber 是如何实现时间切片的？","description":"","answer":"<p>Fiber 的时间切片（Time Slicing）是一种优化 React 渲染性能的技术，它允许将长时间运行的任务分解成多个小任务，以便在主线程上交替执行其他任务，从而提高用户界面的响应性。以下是时间切片在 Fiber 架构中实现的主要原理和步骤：</p>\n<p><strong>1. 任务拆分和优先级</strong></p>\n<ul>\n<li><strong>任务拆分</strong>：Fiber 架构允许将长时间运行的任务（如组件更新）拆分成多个小的 Fiber 节点处理单元。这些小任务可以在浏览器的空闲时间中逐步完成，而不是一次性处理所有任务。</li>\n<li><strong>优先级调度</strong>：React 为不同的更新任务分配不同的优先级。例如，用户输入相关的更新（如点击和输入事件）通常会被赋予较高的优先级，而低优先级的更新（如数据预取）则可能在用户操作之后执行。优先级调度可以确保重要的任务优先处理。</li>\n</ul>\n<p><strong>2. 任务调度</strong></p>\n<ul>\n<li><strong>调度器（Scheduler）</strong>：React 使用调度器来控制任务的执行。调度器决定何时执行 Fiber 节点的更新工作，以及在主线程上分配的时间片。调度器会根据任务的优先级和浏览器的空闲时间来安排任务执行。</li>\n<li><strong>时间片切换</strong>：时间切片的核心思想是将长时间运行的任务分割成多个时间片（时间段），并在每个时间片内处理一部分任务。在每个时间片结束时，React 会检查是否有更高优先级的任务需要处理，或者是否需要将当前任务暂停，等待下一次时间片继续处理。</li>\n</ul>\n<p><strong>3. Fiber 节点的处理</strong></p>\n<ul>\n<li><strong>工作单元</strong>：每个 Fiber 节点代表一个工作单元，处理 Fiber 节点的任务被称为“工作单元”。在时间切片过程中，React 会逐步处理这些工作单元，以便将渲染任务拆分成较小的部分。</li>\n<li><strong>中断与恢复</strong>：如果在处理 Fiber 节点的过程中，浏览器遇到用户交互（如点击或滚动），React 可以中断当前任务，并优先处理这些用户交互相关的高优先级任务。一旦用户交互处理完成，React 会恢复中断的任务，继续处理剩余的 Fiber 节点。</li>\n</ul>\n<p><strong>4. 流程实现</strong></p>\n<ol>\n<li><strong>任务开始</strong>：当 React 开始执行更新任务时，它会将任务拆分成多个 Fiber 节点的处理单元，并根据优先级安排这些任务。</li>\n<li><strong>调度执行</strong>：调度器会分配时间片来处理这些 Fiber 节点。每个时间片内，React 会处理一定数量的 Fiber 节点，更新虚拟 DOM 和实际 DOM。</li>\n<li><strong>检查任务状态</strong>：在每个时间片结束时，React 会检查是否有高优先级任务需要处理，或者是否需要暂停当前任务。调度器决定是否继续执行当前任务或切换到其他任务。</li>\n<li><strong>恢复执行</strong>：如果任务被中断，React 会在下一次时间片中恢复执行，继续处理未完成的 Fiber 节点。</li>\n</ol>\n<p><strong>5. 用户交互</strong></p>\n<ul>\n<li><strong>响应用户操作</strong>：时间切片技术确保用户操作（如输入、点击）能够及时响应。React 在处理高优先级任务时，能够快速响应用户交互，提高页面的交互性能。</li>\n<li><strong>优化渲染</strong>：通过将长时间运行的任务分解成多个时间片，React 能够避免阻塞主线程，提高页面的整体性能和响应性。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>Fiber 的时间切片实现使得 React 能够高效地处理长时间运行的渲染任务，通过将任务拆分成多个小任务，并在主线程上分配时间片来逐步完成这些任务。这种方法可以显著提高用户界面的响应性和性能，确保高优先级任务能够及时处理，并优化页面渲染体验。</p>\n"},{"title":"说说你对 createPortal 的了解","description":"","answer":"<p><code>ReactDOM.createPortal</code> 是 React 的一个 API，用于将子节点渲染到 DOM 的不同部分，而不是当前组件的父级节点中。这对于需要在 DOM 的不同层级中插入内容（如模态框、工具提示、下拉菜单等）非常有用，因为它允许我们将子元素渲染到指定的 DOM 节点中，保持其逻辑上的位置和结构。</p>\n<p><strong><code>createPortal</code> 的用法</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createPortal</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> container</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong><code>child</code></strong>：要渲染的子元素或 React 元素。</li>\n<li><strong><code>container</code></strong>：要将 <code>child</code> 渲染到的 DOM 节点。</li>\n</ul>\n<p><strong>特点和使用场景</strong></p>\n<ol>\n<li><strong>DOM 层级结构</strong>：\n<ul>\n<li>通过 <code>createPortal</code>，你可以将子元素插入到 DOM 的任意位置，这对于需要在页面不同层级中展示内容的情况很有帮助。例如，模态框通常需要渲染在页面的顶层。</li>\n</ul>\n</li>\n<li><strong>维持 React 组件的生命周期和状态</strong>：\n<ul>\n<li>使用 <code>createPortal</code> 渲染的元素仍然保持在 React 组件树中，因此它们会遵循 React 的生命周期方法，状态和上下文不会受到影响。</li>\n</ul>\n</li>\n<li><strong>避免 CSS 影响</strong>：\n<ul>\n<li>在某些情况下，使用 <code>createPortal</code> 可以避免子组件的 CSS 被父组件的样式干扰，因为渲染到的 DOM 节点通常是在 <code>body</code> 或其他顶层容器中。</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Modal</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createPortal</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">modal</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">I'm a modal!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onClose</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Close</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>,</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#A0ADA0\">  // Modal 将被渲染到 body 元素中</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> Modal</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>原理</strong></p>\n<ul>\n<li><code>createPortal</code> 创建的组件会挂载到指定的 DOM 节点 <code>container</code> 中，但它仍然在 React 的组件树中。这意味着 React 可以处理它的生命周期和更新，而不是直接操作 DOM。</li>\n</ul>\n"},{"title":"React 中的 createContext 和 useContext 分别有什么用？","description":"","answer":"<p>在 React 中，<code>createContext</code> 和 <code>useContext</code> 是处理上下文的两个相关 API，但它们的功能和用途有所不同：</p>\n<p><strong>1. <code>createContext</code></strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：用于创建一个新的上下文对象。</p>\n</li>\n<li>\n<p><strong>用法</strong>：调用 <code>createContext</code> 会返回一个上下文对象，这个对象包含 <code>Provider</code> 和 <code>Consumer</code> 组件。<code>Provider</code> 用于提供上下文的值，而 <code>Consumer</code> 用于消费上下文的值。</p>\n</li>\n<li>\n<p>示例：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 创建上下文对象</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MyContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> createContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">defaultValue</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 提供上下文的值</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">MyContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">someValue</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#A0ADA0\">/* 子组件 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">MyContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 消费上下文的值</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">MyContext.Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =></span><span style=\"color:#A0ADA0\"> /* 使用上下文的值 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">MyContext.Consumer</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. <code>useContext</code></strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：用于在函数组件中访问上下文的值。</p>\n</li>\n<li>\n<p><strong>用法</strong>：<code>useContext</code> 是一个 Hook，用于在函数组件中消费上下文的值，而不需要使用 <code>Consumer</code> 组件。</p>\n</li>\n<li>\n<p>示例：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useContext</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 在函数组件中访问上下文</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">MyContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n"},{"title":"使用 react-router 跳转时，如何将参数传递给下一个页面？","description":"","answer":"<p>在 <code>react-router</code> 中实现页面跳转并传递参数，可以通过以下几种方式来完成：</p>\n<p><strong>通过 URL 参数传递</strong></p>\n<p><strong>定义路由时：</strong></p>\n<p>在定义路由时，可以使用 URL 参数。例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/user/:id</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">User</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>跳转时：</strong></p>\n<p>使用 <code>useHistory</code> 或 <code>useNavigate</code>（在 React Router v6 中）进行跳转时，可以将参数添加到 URL 中：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useHistory</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> history</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useHistory</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">/user/123</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 跳转到 /user/123</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User 123</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v6</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">/user/123</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 跳转到 /user/123</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User 123</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>接收参数：</strong></p>\n<p>在目标组件中，可以使用 <code>useParams</code> 钩子（在 React Router v6 中也是 <code>useParams</code>）来接收 URL 参数：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useParams</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> User</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useParams</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User ID: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li><strong>通过查询字符串传递</strong></li>\n</ol>\n<p><strong>跳转时：</strong></p>\n<p>可以将参数作为查询字符串添加到 URL 中：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useHistory</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> history</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useHistory</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">/user?id=123</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 跳转到 /user?id=123</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v6</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">/user?id=123</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 跳转到 /user?id=123</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>接收查询参数：</strong></p>\n<p>可以使用 <code>URLSearchParams</code> 来获取查询参数：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useLocation</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> User</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> search</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useLocation</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> URLSearchParams</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">search</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">id</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User ID: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"3\">\n<li><strong>通过状态传递</strong></li>\n</ol>\n<p><strong>跳转时：</strong></p>\n<p>可以将参数作为状态传递：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useHistory</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> history</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useHistory</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      pathname</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/user</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      state</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 123</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // React Router v6</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> RedirectToUser</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/user</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> state</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 123</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Go to User</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>接收状态：</strong></p>\n<p>在目标组件中，可以通过 <code>useLocation</code> 钩子获取传递的状态：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useLocation</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> User</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useLocation</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User ID: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"react 中，数组用 useState 做状态管理的时候，使用 push，pop，splice 等直接更改数组对象，会引起页面渲染吗？","description":"","answer":"<p>在 React 中，直接使用 <code>push</code>、<code>pop</code>、<code>splice</code> 等方法修改数组不会触发页面重新渲染。React 的状态更新机制依赖于状态的不可变性（immutability），即通过创建新的状态对象来更新状态。直接修改原始状态对象（如数组）不会创建新的对象引用，因此 React 不会检测到状态的变化，也不会触发重新渲染。</p>\n<p><strong>为什么直接修改数组不触发渲染</strong></p>\n<p>React 使用 <code>Object.is</code>（或其变体）来检查状态是否发生了变化。直接对数组进行 <code>push</code>、<code>pop</code>、<code>splice</code> 等操作，修改了原始数组的内容，但数组的引用（内存地址）没有改变。React 仅通过引用变化来判断状态是否更新，因此直接修改原始数组不会触发更新。</p>\n<p><strong>正确的做法</strong></p>\n<p>为了触发渲染，应该遵循不可变数据模式，即通过创建新数组来更新状态。以下是使用 <code>useState</code> 管理数组状态的推荐方法：</p>\n<p><strong>示例：使用 <code>concat</code>、<code>slice</code>、<code>map</code> 等方法</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setItems</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 添加新项</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> addItem</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setItems</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prevItems</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">prevItems</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 移除最后一项</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> removeLastItem</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setItems</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prevItems</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> prevItems</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 更新特定项</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> updateItem</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newItem</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setItems</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prevItems</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> prevItems</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> newItem</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> addItem</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Add Item</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">removeLastItem</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Remove Last Item</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">ul</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">                {</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">                    &#x3C;</span><span style=\"color:#1E754F\">li</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">li</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">                ))}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;/</span><span style=\"color:#1E754F\">ul</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> MyComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>解释</strong></p>\n<ol>\n<li><strong>添加新项</strong>：\n<ul>\n<li>使用展开运算符 <code>[...prevItems, item]</code> 创建一个新数组，并将新项添加到末尾。</li>\n</ul>\n</li>\n<li><strong>移除最后一项</strong>：\n<ul>\n<li>使用 <code>slice(0, -1)</code> 创建一个新数组，去除最后一项。</li>\n</ul>\n</li>\n<li><strong>更新特定项</strong>：\n<ul>\n<li>使用 <code>map</code> 方法创建一个新数组，并根据条件更新特定项。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"react 中，在什么场景下需要使用 useContext？","description":"","answer":"<p>在 React 中，<code>useContext</code> 是一个用于在组件树中共享状态或数据的钩子。它允许我们在没有通过属性逐层传递的情况下，将数据从祖先组件传递到后代组件。<code>useContext</code> 主要用于避免 prop drilling 问题，即当需要将数据从顶层组件传递到深层嵌套的组件时，可能会涉及多层组件传递属性，代码会变得冗长和难以维护。</p>\n<p><strong>使用 <code>useContext</code> 的场景</strong></p>\n<ol>\n<li>\n<p><strong>全局状态管理</strong>：</p>\n<ul>\n<li>当你需要在多个组件之间共享全局状态时，<code>useContext</code> 是一个简单而有效的工具。例如，用户认证状态、主题设置或语言选择等全局数据可以通过 <code>useContext</code> 在整个应用中访问。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> UserContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setUser</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#998418\">UserProfile</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UserProfile</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">UserContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">user</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">Welcome, </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">name</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Not logged in</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>避免 prop drilling</strong>：</p>\n<ul>\n<li>当数据需要从顶层组件传递到深层嵌套的子组件时，使用 <code>useContext</code> 可以避免将数据逐层通过 <code>props</code> 传递。这样可以减少中间组件不必要的属性传递，保持代码的简洁和清晰。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ThemeContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> theme</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">dark</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">ThemeContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">theme</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#998418\">Toolbar</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">ThemeContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Toolbar</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#998418\">ThemedButton</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ThemedButton</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> theme</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ThemeContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> className</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">theme</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Themed Button</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>跨组件通信</strong>：</p>\n<ul>\n<li>在组件树的不同部分之间进行通信时，<code>useContext</code> 提供了一种简单的方式来共享信息，而不需要通过复杂的回调或全局事件总线。</li>\n</ul>\n</li>\n<li>\n<p><strong>复杂应用中的配置和设置</strong>：</p>\n<ul>\n<li>在需要全局配置（如路由、表单验证、国际化等）的复杂应用中，<code>useContext</code> 使得这些配置可以被所有需要的组件访问，而不需要反复传递。</li>\n</ul>\n</li>\n<li>\n<p><strong>在与 <code>useReducer</code> 结合使用时</strong>：</p>\n<ul>\n<li><code>useReducer</code> 可以用来管理复杂的本地状态。将 <code>useReducer</code> 与 <code>useContext</code> 结合使用时，可以将状态和分发函数提供给需要的组件，而无需逐层传递。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> CountContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    switch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        default</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            throw</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Error</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Counter</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reducer</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">CountContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={{</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\"> }}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#998418\">CountContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChildComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">CountContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">            Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">+</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">            &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">-</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n<p><strong>适用性与注意事项</strong></p>\n<ul>\n<li><strong>适用性</strong>：\n<ul>\n<li><code>useContext</code> 适用于需要跨多个组件共享状态的场景，避免不必要的属性传递，特别是在状态涉及到多个组件层级时。</li>\n</ul>\n</li>\n<li><strong>注意事项</strong>：\n<ul>\n<li>不要滥用 <code>useContext</code>。如果数据仅在少量组件之间共享，或局部状态足够处理问题，可能并不需要使用 <code>useContext</code>。</li>\n<li><code>useContext</code> 提供的数据是引用类型的，如果上下文中的数据变化会导致使用该上下文的所有组件重新渲染。因此，确保合理组织和管理上下文的数据以避免性能问题。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"React 中的 hooks 和 memorizedState 是什么关系?","description":"","answer":"<p>在 React 中，<strong>Hooks</strong> 和 <strong>MemorizedState</strong> 都与组件的状态管理和性能优化有关，但它们的作用和实现方式不同。</p>\n<p><strong>Hooks</strong></p>\n<p>Hooks 是 React 16.8 引入的一组 API，使函数组件能够拥有状态和副作用管理的能力，之前这些特性只有在类组件中才可以使用。常用的 Hooks 包括：</p>\n<ul>\n<li><strong><code>useState</code></strong>：用于在函数组件中添加状态。</li>\n<li><strong><code>useEffect</code></strong>：用于处理副作用，如数据获取和订阅。</li>\n<li><strong><code>useContext</code></strong>：用于在组件树中共享状态。</li>\n<li><strong><code>useReducer</code></strong>：用于处理更复杂的状态逻辑。</li>\n<li><strong><code>useMemo</code></strong> 和 <strong><code>useCallback</code></strong>：用于性能优化，避免不必要的重新渲染。</li>\n</ul>\n<p><strong>MemorizedState</strong></p>\n<p><strong>MemorizedState</strong> 是 React 内部的一种实现机制，用于优化组件的性能。它是 React 在内部管理组件状态时使用的一种状态存储方式，尤其是与 Hooks 的实现密切相关。</p>\n<ul>\n<li><strong>在 React 中，<code>useState</code> 和 <code>useReducer</code> 的实现依赖于 MemorizedState</strong>：当你调用 <code>useState</code> 或 <code>useReducer</code> 时，React 会为每个组件实例创建一个 <code>MemorizedState</code> 对象来存储状态。这些状态在组件重新渲染时会被保留，确保组件的状态在生命周期中保持一致。</li>\n<li><strong><code>MemorizedState</code> 的作用是优化性能</strong>：它帮助 React 追踪状态的变化，并在组件重新渲染时有效地管理和更新状态。</li>\n</ul>\n<p><strong>Hooks 与 MemorizedState 的关系</strong></p>\n<ol>\n<li><strong>状态管理</strong>：Hooks（如 <code>useState</code> 和 <code>useReducer</code>）允许你在函数组件中管理状态。它们背后使用了 MemorizedState 来存储和管理这些状态。</li>\n<li><strong>性能优化</strong>：\n<ul>\n<li><strong><code>useMemo</code> 和 <code>useCallback</code></strong>：这些 Hooks 依赖于 MemorizedState 来缓存计算结果和函数，从而避免不必要的重新计算和重新渲染。</li>\n<li><strong>MemorizedState 的缓存机制</strong>：React 使用 MemorizedState 来缓存组件的状态和计算结果，这与 <code>useMemo</code> 和 <code>useCallback</code> 的功能类似，但在更底层的实现中起作用。</li>\n</ul>\n</li>\n<li><strong>内部实现</strong>：\n<ul>\n<li><strong><code>useState</code> 和 <code>useReducer</code></strong>：当调用这些 Hooks 时，React 内部会创建一个 MemorizedState 对象来存储状态值。</li>\n<li><strong>性能优化 Hooks</strong>：<code>useMemo</code> 和 <code>useCallback</code> 使用 MemorizedState 来存储缓存的计算结果或函数引用，从而避免每次渲染时重新计算。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"React 中，怎么给 children 添加额外的属性？","description":"","answer":"<p>在 React 中，<code>children</code> 是一个特殊的 prop，用于传递子组件或元素。虽然直接给 <code>children</code> 添加属性是不可能的，但可以使用一些方法来为子组件传递额外的属性。</p>\n<p><strong>方法一：使用 React.cloneElement</strong></p>\n<p><code>React.cloneElement</code> 是 React 提供的一个 API，用于克隆一个元素并添加额外的属性。这种方法适用于在渲染过程中动态地为 <code>children</code> 添加属性。</p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> children</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 为每个子元素添加额外的属性</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> childrenWithProps</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">Children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =></span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">cloneElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> extraProp</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">value</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">childrenWithProps</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChildComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">extraProp</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>说明</strong>：</p>\n<ul>\n<li><code>React.Children.map</code> 遍历 <code>children</code> 并应用 <code>React.cloneElement</code>。</li>\n<li><code>React.cloneElement</code> 克隆每个子元素，并添加 <code>extraProp</code> 属性。</li>\n</ul>\n<p><strong>方法二：使用 Context API</strong></p>\n<p>另一种方法是使用 React 的 Context API 传递额外的属性。这种方法适用于全局传递数据或配置，尤其是当有多个嵌套组件时。</p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> createContext</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useContext</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 创建一个 Context</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ExtraPropsContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> createContext</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> extraProp</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">default</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> children</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> extraProps</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> extraProp</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">value</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ExtraPropsContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">extraProps</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">ExtraPropsContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChildComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> extraProp</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ExtraPropsContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">extraProp</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>使用 <code>createContext</code> 和 <code>Provider</code> 传递额外的属性。</li>\n<li>使用 <code>useContext</code> 在子组件中获取这些属性。</li>\n</ul>\n<p><strong>方法三：通过 Props 传递</strong></p>\n<p>直接将额外的属性作为普通的 prop 传递给子组件，这种方法适用于显式传递和少量的属性。</p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> children</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> extraProp</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">value</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">React</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">Children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =></span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">isValidElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">cloneElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> extraProp</span><span style=\"color:#999999\"> })</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> child</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      )}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChildComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">extraProp</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ChildComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">ParentComponent</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>在父组件中为子组件添加额外的 prop。</li>\n</ul>\n"},{"title":"React 中，构建组件的方式有哪些？","description":"","answer":"<p>在 React 中，构建组件的方式主要有以下几种：</p>\n<p><strong>1. 函数组件 (Function Components)</strong></p>\n<p>函数组件是最常用的组件形式，使用 JavaScript 函数来定义。自 React Hooks 引入以来，函数组件得到了广泛使用。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, Function Component!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> MyComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 类组件 (Class Components)</strong></p>\n<p>类组件是通过 ES6 的类语法定义的，适合需要使用生命周期方法的场景。虽然现在推荐使用函数组件和 Hooks，但类组件依然在一些老旧代码中存在。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyClassComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, Class Component!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> MyClassComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 高阶组件 (Higher-Order Components, HOCs)</strong></p>\n<p>高阶组件是接受一个组件作为参数并返回一个新的组件的函数。这种模式用于代码复用和逻辑封装。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> withExtraInfo</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">WrappedComponent</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">WrappedComponent</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Additional Info</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> withExtraInfo</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>4. 组合组件 (Composition Components)</strong></p>\n<p>通过组合多个小组件来构建复杂组件。使用组合的方式可以提高组件的复用性和可维护性。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ChildComponentA</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">ChildComponentB</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>5. Render Props</strong></p>\n<p>通过将一个函数作为 props 传递给组件，允许调用该函数来控制组件的渲染。这种模式用于实现复杂的逻辑和状态共享。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> DataProvider</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> render</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* some data */</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> render</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">DataProvider</span><span style=\"color:#B07D48\"> render</span><span style=\"color:#999999\">={(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>6. 自定义 Hook</strong></p>\n<p>虽然不直接构建组件，但自定义 Hook 是一种封装逻辑和状态的方式，可以在函数组件中复用。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> useFetchData</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setData</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">())</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setData</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"React 是怎么渲染出页面的？","description":"","answer":"<p>React 渲染页面的过程主要包括以下几个步骤：</p>\n<p><strong>1. 创建虚拟 DOM</strong></p>\n<ul>\n<li><strong>组件定义</strong>：当你定义一个组件并调用 <code>render</code> 方法时，React 会根据组件的 JSX 结构创建一个虚拟 DOM。这是一个轻量级的 JavaScript 对象，描述了 UI 的结构。</li>\n</ul>\n<p><strong>2. 渲染到真实 DOM</strong></p>\n<ul>\n<li><strong>初始渲染</strong>：在组件首次渲染时，React 会将虚拟 DOM 转换为实际的 DOM 元素，并将其插入到页面中。通常是通过 <code>ReactDOM.render()</code> 方法完成的。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 组件更新</strong></p>\n<ul>\n<li><strong>状态或属性变化</strong>：当组件的状态（state）或属性（props）发生变化时，React 会重新调用组件的 <code>render</code> 方法，生成新的虚拟 DOM。</li>\n</ul>\n<p><strong>4. Diff 算法</strong></p>\n<ul>\n<li><strong>比较新旧虚拟 DOM</strong>：React 使用高效的 Diff 算法对比新旧虚拟 DOM，以找到需要更新的部分。这个过程称为“调和”（reconciliation）。</li>\n</ul>\n<p><strong>5. 更新真实 DOM</strong></p>\n<ul>\n<li><strong>最小化 DOM 操作</strong>：根据 Diff 算法的结果，React 会计算出最小的 DOM 更新操作，只对那些发生变化的部分进行实际更新，而不是重新渲染整个页面。</li>\n</ul>\n<p><strong>6. 生命周期方法</strong></p>\n<ul>\n<li><strong>调用生命周期方法</strong>：在渲染过程中，React 会调用组件的生命周期方法，例如 <code>componentDidMount</code>、<code>componentDidUpdate</code> 等，以允许开发者在不同的渲染阶段执行特定的逻辑。</li>\n</ul>\n<p><strong>7. 批处理更新</strong></p>\n<ul>\n<li><strong>批量更新</strong>：在事件处理时，React 会将多个状态更新合并为一次渲染，减少不必要的 DOM 操作，提高性能。</li>\n</ul>\n<p><strong>8. 异步渲染</strong></p>\n<ul>\n<li><strong>并发渲染</strong>：从 React 16 开始，React 支持异步渲染，可以在不阻塞主线程的情况下进行 UI 更新，以提升用户体验。</li>\n</ul>\n"},{"title":"React 中，如何实现类似于 Vue-router 提供的路由守卫？","description":"","answer":"<p>在 React 中，虽然没有像 Vue-router 这样内置的路由守卫功能，但我们可以通过组合 React Router 和一些自定义逻辑来实现类似于 Vue-router 提供的路由守卫功能。</p>\n<p>下面介绍几种实现方式。</p>\n<p><strong>方法一：使用 <code>useEffect</code> 钩子在组件层面实现</strong></p>\n<p>对于需要进行路由守卫的组件，可以在组件的 <code>useEffect</code> 中添加相应的导航逻辑。这种方式类似于 Vue 的 <code>beforeRouteEnter</code> 守卫。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ProtectedComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> checkAuthentication</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 自定义的身份验证逻辑</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 如果未登录，重定向到登录页面</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">navigate</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Protected Content</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>方法二：使用高阶组件 (Higher-Order Component)</strong></p>\n<p>通过高阶组件（HOC），可以将路由守卫的逻辑封装在组件外部，从而实现类似全局路由守卫的功能。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> withAuthGuard</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">WrappedComponent</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> checkAuthentication</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 自定义的验证逻辑</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 如果未通过验证，重定向</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">navigate</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">WrappedComponent</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> ProtectedComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Protected Content</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#59873A\"> withAuthGuard</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ProtectedComponent</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>方法三：通过 React Router <code>Outlet</code> 和中间件模式</strong></p>\n<p>React Router 提供了 <code>&lt;Outlet /&gt;</code> 组件，它可以允许我们将路由守卫逻辑应用到某些路由集合上。可以通过中间件模式对路由进行守卫。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Navigate</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> Outlet</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> ProtectedRoute</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Outlet</span><span style=\"color:#999999\"> /></span><span style=\"color:#AB5959\"> :</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Navigate</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用：</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/protected</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#998418\">ProtectedRoute</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">authStatus</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dashboard</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#998418\">Dashboard</span><span style=\"color:#999999\"> />}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">settings</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#998418\">Settings</span><span style=\"color:#999999\"> />}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#998418\">Route</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的例子中，如果用户未通过身份验证，<code>ProtectedRoute</code> 将重定向到 <code>/login</code>，否则允许继续加载子路由。</p>\n<p><strong>方法四：在路由配置中实现路由守卫逻辑</strong></p>\n<p>可以通过在路由配置中直接实现身份验证或其他守卫逻辑。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Route</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> Routes</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> Navigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> PrivateRoute</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">rest</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">Route</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {...</span><span style=\"color:#B07D48\">rest</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      element</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Component</span><span style=\"color:#999999\"> /></span><span style=\"color:#AB5959\"> :</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Navigate</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> />}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> checkAuthentication</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 自定义验证逻辑</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">Routes</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#998418\">Login</span><span style=\"color:#999999\"> />}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">PrivateRoute</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/dashboard</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#998418\">Dashboard</span><span style=\"color:#999999\"> />}</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">Routes</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>方法五：使用 Redux 或 Context 实现全局守卫</strong></p>\n<p>结合 <code>useContext</code> 或 <code>Redux</code>，可以将身份验证状态存储在全局状态中，然后在每个需要守卫的组件或路由上进行判断。</p>\n<ol>\n<li><strong>通过 Context 实现：</strong></li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useContext</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> AuthContext</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./AuthProvider</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ProtectedComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">AuthContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 重定向到登录页面</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Protected Content</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol>\n<li><strong>通过 Redux 实现：</strong></li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useSelector</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-redux</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useNavigate</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-router-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ProtectedComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> isAuthenticated</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useSelector</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">auth</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useNavigate</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      navigate</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">isAuthenticated</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> navigate</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Protected Content</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"为什么 react 组件中， 都需要声明 import React from 'react'?","description":"","answer":"<p>与 React 的早期设计和 JSX 语法的处理密切相关，具体来说，主要是以下原因：</p>\n<ol>\n<li><strong>JSX 需要 React</strong></li>\n</ol>\n<p>在 React 的早期版本中，JSX（JavaScript XML）是通过 JavaScript 语法扩展来实现的。JSX 代码本质上是一个类似 XML 的语法糖，它会被 Babel 转换为 <code>React.createElement()</code> 调用。</p>\n<p>例如，下面的 JSX 代码：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, world!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在 Babel 转译后，会变成类似如下的代码：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">h1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Hello, world!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>可以看到，JSX 最终会被转换为 <code>React.createElement()</code> 的调用。因此，在使用 JSX 时，必须导入 <code>React</code>，否则编译器会找不到 <code>React.createElement</code> 函数，导致错误。</p>\n<ol start=\"2\">\n<li><strong>React 需要作为一个全局对象</strong></li>\n</ol>\n<p><code>React.createElement()</code> 是创建 React 元素的基础函数。为了能够正确生成虚拟 DOM 和管理组件，React 库提供了必要的 API。因此，导入 <code>React</code> 是为了能够调用这些方法。</p>\n<ol start=\"3\">\n<li><strong>Babel 的转换（之前的工作原理）</strong></li>\n</ol>\n<p>在 JSX 编译阶段，Babel 会将 JSX 转换为 <code>React.createElement()</code> 函数调用。因此，React 在 JSX 文件中成为了必需的导入项。如果没有导入 React，Babel 在转换过程中将无法找到 <code>React.createElement</code>，从而导致错误。</p>\n<p><strong>随着 React 17 的更新：</strong></p>\n<p>自 React 17 版本开始，<strong>JSX 转换</strong>的工作有所变化。React 17 引入了新的 JSX 转换方式，允许开发者不再显式地导入 <code>React</code>。这是通过新的 JSX 编译器来实现的，不再需要将 JSX 转换为 <code>React.createElement</code> 调用。</p>\n<p>在 React 17 及以后的版本中，Babel 会自动处理 <code>React</code> 的引入，具体来说：</p>\n<ul>\n<li><strong>不再需要显式地导入 React</strong>：如果你使用了 React 17 或更高版本，并且配置了正确的 Babel 插件（如 <code>@babel/preset-react</code>），JSX 的编译器会自动将 <code>React</code> 导入到每个文件中，从而不再需要手动编写 <code>import React from 'react';</code>。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>向后兼容</strong></li>\n</ol>\n<p>虽然 React 17 之后不再强制要求显式导入 <code>React</code>，但由于许多项目仍然使用较旧的 React 版本，或者代码库中有其他工具、库的兼容性问题，开发者可能仍然看到许多项目中保留 <code>import React from 'react';</code>。此外，如果你使用 TypeScript，或者一些特殊的工具链配置，可能仍然需要手动导入。</p>\n"},{"title":"在 React 项目中， 是否可以不用 react-router， 使用浏览器原生 history 路由来组织页面路由？","description":"","answer":"<p>在 React 项目中，<strong>可以不用 <code>react-router</code></strong>，直接使用浏览器原生的 <strong><code>history</code></strong> API 来组织页面路由。实际上，<code>react-router</code> 本质上也是基于浏览器的 <code>history</code> API 实现的路由功能，它提供了一个封装好的、更易于使用的路由管理工具。</p>\n<p>使用浏览器原生 <code>history</code> API 进行路由管理</p>\n<p>React 提供了 <code>history</code> API 作为浏览器的原生路由系统，包含了 <code>window.history</code> 相关方法（如 <code>pushState</code>, <code>replaceState</code>, <code>popState</code> 等）。你可以通过这些 API 手动实现路由的控制，并结合 React 状态管理来更新页面视图。</p>\n<p>以下是使用原生 <code>history</code> API 管理路由的基本步骤：</p>\n<ol>\n<li><strong>创建路由管理逻辑</strong></li>\n</ol>\n<p>使用原生 <code>history</code> API，你需要自己处理 URL 的变化、浏览器历史栈的管理以及与 React 组件的匹配。</p>\n<p>示例代码：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useEffect</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 简单的路由管理器</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> useHistory</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setLocation</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 监听浏览器的历史变化</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> handlePopState</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      setLocation</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">popstate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> handlePopState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">removeEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">popstate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> handlePopState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> push</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pushState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setLocation</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">  // 更新当前路径</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> replace</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">replaceState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setLocation</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">  // 更新当前路径</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> push</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> replace</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> Route</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 主应用组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> push</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useHistory</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">nav</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> push</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">Home</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> push</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/about</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)}></span><span style=\"color:#393A34\">About</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">nav</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Home Page</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">Route</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">/about</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> component</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">About Page</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> App</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li><strong>解释代码</strong></li>\n</ol>\n<ul>\n<li><code>useHistory</code> 是自定义 Hook，用来管理路由的变化和浏览器的历史记录。</li>\n<li><code>window.history.pushState</code> 用来修改浏览器的 URL，而不刷新页面。它会向历史记录栈中添加一个新的记录。</li>\n<li><code>window.history.replaceState</code> 用来替换当前的 URL，而不新增历史记录。</li>\n<li>通过监听 <code>popstate</code> 事件来处理浏览器后退、前进操作，确保页面和历史状态同步。</li>\n<li><code>Route</code> 组件根据当前的 <code>window.location.pathname</code> 来判断是否匹配当前路由并渲染对应的内容。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>优缺点分析</strong></li>\n</ol>\n<p>优点：</p>\n<ul>\n<li><strong>控制性更强</strong>：使用原生的 <code>history</code> API，你完全控制路由的行为，可以根据需求自由设计路由逻辑。</li>\n<li><strong>依赖较少</strong>：不需要额外安装第三方路由库（如 <code>react-router</code>），减少了项目的依赖。</li>\n<li><strong>更细粒度的控制</strong>：可以在路由变更时执行自定义逻辑，比如路由过渡动画、权限控制等。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li><strong>代码复杂度较高</strong>：需要自己处理路由匹配、页面切换、浏览器历史栈管理等逻辑，容易出现重复代码和潜在的 bug。</li>\n<li><strong>缺少功能</strong>：像 <code>react-router</code> 提供的路由嵌套、动态路由、参数提取、重定向等功能需要你自己实现。</li>\n<li><strong>性能优化问题</strong>：手动管理路由时，需要自己优化性能，尤其是与 React 组件的渲染结合时，可能需要更多的工作来确保视图的高效更新。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>与 <code>react-router</code> 的比较</strong></li>\n</ol>\n<p><code>react-router</code> 提供了大量现成的功能，如路由嵌套、重定向、动态路由匹配、路由守卫等，这些都是你使用原生 <code>history</code> API 时需要自己实现的。如果你的应用比较简单，不需要复杂的路由功能，使用原生 <code>history</code> API 是完全可行的。</p>\n<p>但对于大型应用，<code>react-router</code> 提供了更加简洁、可扩展的路由管理方式，能大大减少开发成本，并且有广泛的社区支持。</p>\n<ol start=\"5\">\n<li><strong>何时选择原生 <code>history</code> API</strong></li>\n</ol>\n<p>你可以选择使用原生 <code>history</code> API 的情况包括：</p>\n<ul>\n<li>应用的路由需求简单，不需要复杂的路由嵌套、动态路由、权限控制等功能。</li>\n<li>希望减少第三方库的依赖，或者希望自己对路由的行为进行更细粒度的控制。</li>\n<li>学习或实践如何在前端实现路由。</li>\n</ul>\n"},{"title":"React 为什么要自己实现调度器， 而不是直接使用 requestIdleCallback ？","description":"","answer":"<p>主要是因为以下几个原因：</p>\n<ol>\n<li><strong>对任务优先级的精确控制</strong></li>\n</ol>\n<p>React 需要根据不同类型的任务（例如更新视图、处理事件、执行动画等）来控制任务的优先级，而 <code>requestIdleCallback</code> 并不提供足够细粒度的优先级控制。</p>\n<ul>\n<li><strong>React 的调度器</strong>（比如 React Fiber 调度器）允许它精确地控制任务的优先级，支持 <strong>高优先级任务</strong>（例如用户输入）和 <strong>低优先级任务</strong>（例如空闲时的渲染更新）。</li>\n<li><code>requestIdleCallback</code> 只提供了一个简单的空闲时间回调，它并没有内建对任务优先级的控制能力。所有的任务都会在浏览器空闲时执行，这样可能会导致一些高优先级任务被低优先级任务阻塞，无法及时处理。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>任务的中断与抢占</strong></li>\n</ol>\n<p>React 需要在渲染过程中支持任务的中断和抢占，以保证用户交互的流畅性和响应性。React 调度器实现了 <strong>时间切片</strong> 和 <strong>任务中断</strong>，可以在渲染过程中暂停低优先级的任务，去执行高优先级的任务（比如响应用户输入）。</p>\n<ul>\n<li><strong><code>requestIdleCallback</code></strong> 是在浏览器空闲时才执行的，无法灵活地中断正在进行的任务并优先处理高优先级任务。因此，React 需要更细粒度的调度来中断低优先级的渲染任务，确保用户交互的即时反馈。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>跨浏览器兼容性</strong></li>\n</ol>\n<p><code>requestIdleCallback</code> 是一个相对较新的浏览器 API，并不是所有浏览器都支持它，特别是在旧版浏览器中。为了确保 React 在更多浏览器上都能正常工作，React 选择使用自定义的调度机制来处理任务，而不依赖于 <code>requestIdleCallback</code>。</p>\n<ul>\n<li>React 的调度器（例如 Fiber 调度器）能在所有浏览器中正常工作，而不依赖于特定的浏览器 API。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>能耗管理</strong></li>\n</ol>\n<p>React 自己实现的调度器可以对空闲时间和浏览器的任务执行进行优化，最大限度地减少电池消耗和资源浪费。通过精确控制何时以及如何执行任务，React 可以避免不必要的计算，尤其是在移动设备上。</p>\n<ul>\n<li><code>requestIdleCallback</code> 调度任务的时机完全取决于浏览器空闲的状态，这可能导致在设备负载较高时浏览器频繁执行不必要的回调，消耗更多电量和计算资源。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>更强的可定制性</strong></li>\n</ol>\n<p>React 需要支持许多不同类型的任务，例如事件处理、动画、数据加载和视图更新。React 自己的调度器能够更灵活地处理这些任务的优先级和执行时机。而 <code>requestIdleCallback</code> 仅提供一个回调，无法处理那么多类型的任务。</p>\n"},{"title":"React 中的 forwardsRef，作用是什么， 有哪些使用场景？","description":"","answer":"<p>在 React 中，<code>forwardRef</code> 是一个高阶组件（HOC），用于**转发引用（ref）**到子组件的 DOM 元素或子组件内部的某个实例上。通常，React 的 <code>ref</code> 是用来直接访问 DOM 元素或组件实例的，但是在函数组件中，<code>ref</code> 是无法直接使用的，因为函数组件没有实例。</p>\n<p><code>forwardRef</code> 允许我们在函数组件中<strong>传递</strong> <code>ref</code>，将其绑定到组件内部的 DOM 元素或组件实例上，从而能够在父组件中访问这个子组件的 DOM 或实例方法。</p>\n<ol>\n<li><strong><code>forwardRef</code> 的作用</strong></li>\n</ol>\n<p><code>forwardRef</code> 使得我们能够将 <code>ref</code> 从父组件转发到子组件中，使得父组件能够访问子组件的内部 DOM 元素或方法。</p>\n<ol start=\"2\">\n<li><strong><code>forwardRef</code> 的语法</strong></li>\n</ol>\n<p><code>forwardRef</code> 接受一个函数组件，并返回一个新的组件，该组件会接收 <code>ref</code> 参数并将其转发到子组件。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用 forwardRef 创建一个转发 ref 的组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> MyButton</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> MyButton</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的例子中，<code>MyButton</code> 组件是一个函数组件，接受 <code>props</code> 和 <code>ref</code> 作为参数。<code>forwardRef</code> 将 <code>ref</code> 转发到 <code>&lt;button&gt;</code> 元素上。</p>\n<ol start=\"3\">\n<li><strong>使用场景</strong></li>\n</ol>\n<p>场景 1：访问子组件的 DOM 元素</p>\n<p>父组件想要直接访问子组件的 DOM 元素或执行某些操作（例如聚焦某个输入框）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 定义一个转发 ref 的函数组件</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> Input</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ParentComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> inputRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleFocus</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    inputRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">focus</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">  // 访问子组件的 DOM 元素，执行聚焦操作</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Input</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">inputRef</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleFocus</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Focus Input</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> ParentComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在这个例子中，<code>Input</code> 组件通过 <code>forwardRef</code> 转发 <code>ref</code>，让父组件能够直接访问并操作 <code>&lt;input&gt;</code> 元素，例如聚焦。</p>\n<p>场景 2：将 <code>ref</code> 转发到第三方库的组件</p>\n<p>在使用第三方库时，通常我们需要通过 <code>ref</code> 来获取其组件的 DOM 元素或实例方法。如果该库的组件是一个函数组件，而不是类组件，<code>ref</code> 默认是无法传递的。此时可以使用 <code>forwardRef</code> 来实现。</p>\n<p>例如，第三方库中的一个组件：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// ThirdPartyComponent.js</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ThirdPartyComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Some third party component</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> ThirdPartyComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>如果我们想要通过 <code>ref</code> 访问这个 <code>div</code>，就可以使用 <code>forwardRef</code> 进行封装：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// WrappedComponent.js</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ThirdPartyComponent</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./ThirdPartyComponent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> WrappedComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">ThirdPartyComponent</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> WrappedComponent</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>场景 3：高阶组件中的 <code>ref</code> 转发</p>\n<p>在某些高阶组件中，我们需要将 <code>ref</code> 转发到被包装组件的根元素。这样父组件可以使用 <code>ref</code> 获取到子组件的 DOM 元素。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> forwardRef</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> withExtraStyles</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">Component</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> forwardRef</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">Component</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">red</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }}</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> Button</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\"> {...</span><span style=\"color:#B07D48\">props</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Click me</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> StyledButton</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> withExtraStyles</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">Button</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> buttonRef</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleClick</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">buttonRef</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 访问按钮的 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">StyledButton</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">buttonRef</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleClick</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在这个例子中，<code>withExtraStyles</code> 是一个高阶组件（HOC），它通过 <code>forwardRef</code> 将 <code>ref</code> 转发到 <code>Button</code> 组件，并在 <code>StyledButton</code> 中添加样式。</p>\n"},{"title":"React 19 有哪些新特性？","description":"","answer":"<p>Action</p>\n<p>React 应用的一个常见场景是执行数据突变，然后更新状态作为响应。举个栗子，当用户提交表单更改姓名时，我们会发出 API 请求，然后处理响应。</p>\n<p>回首往昔，我们需要手动处理待定状态、错误、乐观更新和顺序请求。</p>\n<p>举个栗子，我们会这样处理 <code>useState</code> 中的待定状态和错误状态：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// Action 之前的写法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UpdateName</span><span style=\"color:#999999\">({})</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setName</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setError</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">isPending</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setIsPending</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">false</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleSubmit</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> async</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setIsPending</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">true</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> updateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setIsPending</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">false</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      setError</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    redirect</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/path</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> onChange</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleSubmit</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> disabled</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isPending</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">        Update</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">error</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在 React 19 中，我们添加了在过渡中使用异步函数的支持，自动处理待定状态、错误、表单和乐观更新。</p>\n<p>举个栗子，我们可以使用 <code>useTransition</code> 处理待定状态：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 使用 action 中的待定状态</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UpdateName</span><span style=\"color:#999999\">({})</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setName</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setError</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">isPending</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> startTransition</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useTransition</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleSubmit</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> async</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    startTransition</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">async</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> updateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setError</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      redirect</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/path</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> onChange</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleSubmit</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> disabled</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isPending</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">        Update</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">error</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>异步过渡会立即把 <code>isPending</code> 状态设置为 <code>true</code>，发出异步请求，并在任何过渡后把 <code>isPending</code> 切换为 <code>false</code>。这允许我们在数据更改时，保持当前 UI 的响应能力和交互性。</p>\n<p>粉丝请注意，<strong>按照惯例，使用异步过渡的函数称为“Action”（操作）</strong>。</p>\n<p>Action 会自动为我们管理提交数据：</p>\n<ul>\n<li><strong>待定状态</strong>：Action 提供待定状态，该状态在请求开始时启动，且在提交最终状态更新时自动重置。</li>\n<li><strong>乐观更新</strong>：Action 支持全新的 <code>useOptimistic</code> hook，因此我们可以在提交请求时，向用户表演即时反馈。</li>\n<li><strong>错误处理</strong>：Action 提供错误处理，这样我们可以在请求失败时显示错误边界，且自动将乐观更新恢复为其原始值。</li>\n<li><strong>表单</strong>：<code>&lt;form&gt;</code> 元素现在支持将函数传递给 <code>action</code> 和 <code>formAction</code> 属性。将函数传递给 <code>action</code> 属性默认使用 Action，并在提交后自动重置表单。</li>\n</ul>\n<p>React 19 构建于 Action 之上，引入 <code>useOptimistic</code> 来管理乐观更新，并引入全新的 <code>React.useActionState</code> hook 来处理 Action 的常见情况。</p>\n<p>在 <code>react-dom</code> 中，我们添加了 <code>&lt;form&gt;</code> Action 自动管理表单，并添加了 <code>useFormStatus</code> 支持表单中 Action 的常见情况。</p>\n<p>在 React 19 中，上述例子可以简化为：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 使用 &#x3C;form> Action 和 useActionState</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChangeName</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setName</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> submitAction</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> isPending</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useActionState</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    async</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">previousState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> formData</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> updateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">formData</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#B07D48\"> error</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      redirect</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/path</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">form</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">submitAction</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">text</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">submit</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> disabled</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">isPending</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">        Update</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">error</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>{</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">form</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>新型 hook：<code>useActionState</code></p>\n<p>为了使 Action 更容易处理常见情况，我们添加了一个全新的 <code>useActionState</code> hook：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> submitAction</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> isPending</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useActionState</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  async</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">previousState</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newName</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> updateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">newName</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 我们可以返回该 Action 的任何结果。</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 比如，这里我们只返回了 error。</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> error</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 处理成功的逻辑</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>useActionState</code> 接受一个“Action”函数，并返回一个包装的 Action 来调用。</p>\n<p>这能奏效，因为 Action 可以组合。当调用包装的 Action 时，<code>useActionState</code> 会返回 Action 的结果作为 <code>data</code>，并将 Action 的待定状态返回为 <code>pending</code>。</p>\n<p>请注意，<code>React.useActionState</code> 以前在 Canary 版本中被称为 <code>ReactDOM.useFormState</code>，但我们已将其重命名，并弃用 <code>useFormState</code>。</p>\n<p>React DOM：<code>&lt;form&gt;</code> Action</p>\n<p>Action 还集成了 React 19 <code>react-dom</code> 中的 <code>&lt;form&gt;</code> 新功能。</p>\n<p>我们添加了对将函数作为 <code>action</code> 和 <code>&lt;form&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;button&gt;</code> 等元素的 <code>formAction</code> 属性传递的支持，使用 Action 自动提交表单的元素：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">form</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">actionFunction</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>当 <code>&lt;form&gt;</code> Action 成功时，React 会自动重置非受控组件的表单。如果我们需要手动重置 <code>&lt;form&gt;</code>，可以调用全新的 <code>requestFormReset</code> React DOM API。</p>\n<p>React DOM：新型 hook：<code>useFormStatus</code></p>\n<p>在设计系统中，通常会编写需要访问其所在 <code>&lt;form&gt;</code> 信息的设计组件，而无需将 <code>props</code> 向下透传到组件。</p>\n<p>这可以通过 Context 实现，但为了使常见情况更容易，我们添加了一个全新的 <code>useFormStatus</code> Hook：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useFormStatus</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-dom</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> DesignButton</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> pending</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useFormStatus</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">submit</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> disabled</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">pending</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>useFormStatus</code> 读取父级 <code>&lt;form&gt;</code> 的状态，就好像表单是 Context provider 一样。</p>\n<p>新型 hook：<code>useOptimistic</code></p>\n<p>执行数据突变时的另一种常见 UI 模式是，在异步请求进行时乐观地展示最终状态。</p>\n<p>在 React 19 中，我们添加了一个全新的 <code>useOptimistic</code> hook，从而简化此操作：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> ChangeName</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> currentName</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> onUpdateName</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">optimisticName</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setOptimisticName</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useOptimistic</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">currentName</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> submitAction</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> async</span><span style=\"color:#B07D48\"> formData</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> newName</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> formData</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setOptimisticName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">newName</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> updatedName</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> updateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">newName</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    onUpdateName</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">updatedName</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">form</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">submitAction</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Your name is: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">optimisticName</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Change Name:</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">label</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">input</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">text</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          disabled</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">currentName</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> optimisticName</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">form</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>当 <code>updateName</code> 请求正在进行时，<code>useOptimistic</code> hook 会立即渲染 <code>optimisticName</code>。当更新完成或出错时，React 会自动切换回 <code>currentName</code> 的值。</p>\n<p>新型 API：<code>use</code></p>\n<p>在 React 19 中，我们引入了一个全新的 <code>use</code> API 来读取渲染中的资源。</p>\n<p>举个栗子，我们可以使用 <code>use</code> 读取 promise 对象，React 会暂停直到该 promise 对象解决：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> use</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Comments</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> commentsPromise</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // use 会暂停直到 promise 解决。</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> comments</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> use</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">commentsPromise</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> comments</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">comment</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">comment</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">comment</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">>)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Page</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> commentsPromise</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 当 use 在 Comments 组件中暂停时，</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 这个 Suspense 会展示出来。</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">Suspense</span><span style=\"color:#B07D48\"> fallback</span><span style=\"color:#999999\">={&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Loading...</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">Comments</span><span style=\"color:#B07D48\"> commentsPromise</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">commentsPromise</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">Suspense</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>粉丝请注意，<strong><code>use</code> 不支持渲染中创建的 promise 对象</strong>。</p>\n<p>如果我们尝试将渲染中创建的 promise 对象传递给 <code>use</code>，React 会发出警告。</p>\n<p>要修复此问题，我们需要传递一个支持缓存 promise 对象的框架或 Suspense 驱动的库中的 promise 对象。将来，我们计划发布某些功能，更轻松地在渲染中缓存 promise 对象。</p>\n<p>我们还可以使用 <code>use</code> 读取 Context，这允许我们条件读取 Context，比如在提前返回后：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> use</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ThemeContext</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./ThemeContext</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Heading</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> children</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">children</span><span style=\"color:#AB5959\"> ==</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 由于提前返回，</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 这里使用 useContext 无法奏效。</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> theme</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> use</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ThemeContext</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#B07D48\"> style</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\"> color</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> theme</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">color</span><span style=\"color:#999999\"> }}>{</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>use</code> API 能且仅能在 <code>render</code> 中调用，类似于 hook。与 hook 不同，<code>use</code> 可以条件调用。未来我们计划支持更多方式使用 <code>use</code> 在渲染中消费资源。</p>\n"},{"title":"React 服务器组件","description":"","answer":"<p>服务器组件</p>\n<p>服务器组件是一个新选项，允许在打包之前在与客户端应用或 SSR 服务器分开的环境中提前渲染组件。</p>\n<p>这个独立的环境是服务器组件中的“服务器”。服务器可以在构建时在 CI 服务器上运行一次，也可以使用 Web 服务器针对每个请求运行。</p>\n<p>React 19 包含 Canary 版本中包含的所有服务器组件功能。这意味着，伴随服务器组件一起提供的库现在可以将 React 19 作为具有 <code>react-server</code> 导出条件的 peer 依赖，以便在支持全栈 React 架构的框架中使用。</p>\n<p>粉丝请注意，<strong>如何建立对服务器组件的支持</strong>？</p>\n<p>虽然 React 19 的服务器组件是稳定的，且不会在主版本间损坏，但用于实现服务器组件的打包器器或框架的底层 API 不遵循语义化版本规范，且可能在 React 19.x 的次版本间损坏。</p>\n<p>为了支持服务器组件作为打包器或框架，我们建议锁定特定的 React 版本，或者使用 Canary 版本。我们会继续与打包器和框架合作，以稳定将来用于实现服务器组件的 API。</p>\n<p>Server Action（服务器操作）</p>\n<p>服务器操作允许客户端组件调用在服务器上执行的异步函数。</p>\n<p>当使用 <code>&quot;use server&quot;</code> 指令定义服务器操作时，您的框架会自动创建对服务器函数的引用，并将该引用传递给客户端组件。当客户端调用该函数时，React 会向服务器发送请求来执行该函数，并返回结果。</p>\n<p>请注意，<strong>没有专属服务器组件的指令</strong>。</p>\n<p>一个常见的误区是，服务器组件会使用 <code>&quot;use server&quot;</code> 表示，但其实服务器组件没有专属指令。<code>&quot;use server&quot;</code> 指令用于服务器操作。</p>\n<p>服务器操作可以在服务器组件中创建，并作为属性传递给客户端组件，也可以在客户端组件中导入和使用。</p>\n"},{"title":"React 中，如何避免使用 context 时， 引起整个挂载节点树的重新渲染","description":"","answer":"<p>在 React 中，使用 <code>context</code> 的一个常见问题是，当 <code>context</code> 的值发生变化时，整个依赖该 <code>context</code> 的组件树会重新渲染。</p>\n<p>为了避免这种性能开销，可以采用以下优化策略：</p>\n<p><strong>1. 将 Context 分离到更小的粒度</strong></p>\n<p>将 <code>context</code> 拆分成多个独立的 <code>context</code>，每个 <code>context</code> 只管理独立的数据，而不是将所有状态集中在一个 <code>context</code> 中。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> UserContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ThemeContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 分离用户数据和主题数据到不同的 context</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={{</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">ThemeContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dark</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">SomeComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#998418\">ThemeContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>这种方式能确保更改 <code>ThemeContext</code> 的值时，不会导致依赖 <code>UserContext</code> 的组件重新渲染。</p>\n<p><strong>2. 使用 <code>React.memo</code> 优化子组件</strong></p>\n<p>如果某些组件只需要 <code>context</code> 的一部分值，但渲染逻辑中不直接依赖它们，可以通过 <code>React.memo</code> 阻止不必要的渲染。</p>\n<p><strong>示例：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>const UserContext = React.createContext();</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>function UserName() {</span></span>\n<span class=\"line\"><span>  const { name } = React.useContext(UserContext);</span></span>\n<span class=\"line\"><span>  console.log('UserName renders'); // 检查是否重新渲染</span></span>\n<span class=\"line\"><span>  return &#x3C;div>User: {name}&#x3C;/div>;</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>const MemoizedUserName = React.memo(UserName);</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>function App() {</span></span>\n<span class=\"line\"><span>  const [user, setUser] = React.useState({ name: 'John' });</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>  return (</span></span>\n<span class=\"line\"><span>    &#x3C;UserContext.Provider value={user}></span></span>\n<span class=\"line\"><span>      &#x3C;MemoizedUserName /></span></span>\n<span class=\"line\"><span>      &#x3C;button onClick={() => setUser({ name: 'Doe' })}>Change Name&#x3C;/button></span></span>\n<span class=\"line\"><span>    &#x3C;/UserContext.Provider></span></span>\n<span class=\"line\"><span>  );</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>3. 使用 <code>context</code> 的选择器</strong></p>\n<p>借助外部库（如 <code>react-context-selector</code>）实现细粒度选择器，只订阅 <code>context</code> 的部分值，而不是整个 <code>context</code> 对象。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> createContext</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> useContextSelector</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">use-context-selector</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> UserContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UserName</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useContextSelector</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">UserContext</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">UserName renders</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 检查是否重新渲染</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setUser</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> age</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">UserName</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setUser</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Doe</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> age</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\"> })}></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">        Change Name</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在这种方式下，<code>UserName</code> 只会重新渲染当 <code>user.name</code> 发生变化时，而不会受到 <code>user.age</code> 的影响。</p>\n<p><strong>4. 使用嵌套 <code>Provider</code></strong></p>\n<p>对于大型项目，可以将 <code>context</code> 的范围限制到尽可能小的组件子树。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> UserContext</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createContext</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UserName</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useContext</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">UserContext</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setUser</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">}></span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#998418\">UserName</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#998418\">UserContext.Provider</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#A0ADA0\">/* 其他子树不受 UserContext 的影响 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>5. 通过子组件的 props 传递 context 的值</strong></p>\n<p>当 <code>context</code> 只需要被特定子组件使用时，可以直接将其值作为 <code>props</code> 传递，而不是通过 <code>useContext</code>。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> UserName</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\"> })</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">UserName renders</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 检查是否重新渲染</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">User: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setUser</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useState</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">UserName</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setUser</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Doe</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">Change Name</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"React 的循环渲染中，为什么不推荐使用 index 作为元素的 key？","description":"","answer":"<p>在 React 中，<code>key</code> 是用于标识每个列表项的唯一标识符，以便在渲染过程中有效跟踪每个元素的变化。</p>\n<p>虽然可以使用 <code>index</code> 作为 <code>key</code>，但并不推荐这样做，原因如下：</p>\n<p><strong>1. 会导致不必要的重新渲染</strong></p>\n<p>当使用 <code>index</code> 作为 <code>key</code> 时，如果列表项的顺序发生变化（如增删或移动），React 无法正确识别哪个项是真正变化的。它可能会重用错误的 DOM 节点，导致性能问题或错误的 UI 展现。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用 index 作为 key</span></span>\n<span class=\"line\"><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">))}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 假设删除了第一个项</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> newItems</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>React 会将第二个列表项 <code>B</code> 误认为是原来的第一个项，因为它们的 <code>key</code> 是相同的。</p>\n<p><strong>2. 导致状态错乱</strong></p>\n<p>如果列表项中有状态（如输入框的值），当列表顺序变化时，状态可能被错误地绑定到其他项上，造成用户体验问题。</p>\n<p><strong>示例：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setItems</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">useState</span><span style=\"color:#999999\">([</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleRemove</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setItems</span><span style=\"color:#999999\">([</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">input</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">}</span><span style=\"color:#B07D48\"> defaultValue</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      ))}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleRemove</span><span style=\"color:#999999\">}></span><span style=\"color:#393A34\">Remove First</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>移除第一项后，输入框的值会混乱，因为 React 认为 <code>B</code> 的输入框与原来的第一个输入框是同一个节点。</p>\n<p><strong>3. 不满足唯一性要求</strong></p>\n<p>React 要求每个 <code>key</code> 在同一级别的列表中必须是唯一的。如果使用 <code>index</code> 作为 <code>key</code>，当列表项的内容本身需要独立标识时，<code>index</code> 无法提供准确的唯一性。</p>\n<p><strong>推荐的做法</strong></p>\n<ol>\n<li>\n<p><strong>使用唯一标识符</strong>：如果列表项有唯一的 <code>id</code>，优先使用 <code>id</code> 作为 <code>key</code>。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [{</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }];</span></span>\n<span class=\"line\"><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">}>{</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">))}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>动态生成唯一标识符</strong>：如果列表项没有唯一 <code>id</code>，可以使用库（如 <code>uuid</code>）生成唯一的 <code>key</code>。</p>\n</li>\n<li>\n<p><strong>仅在静态列表中使用 <code>index</code></strong>：如果列表内容不会动态增删或重排，可以安全使用 <code>index</code>。</p>\n</li>\n</ol>\n"},{"title":"说说你对 React 生态的了解","description":"","answer":"<p>React 的生态系统非常丰富，是支撑其成为主流前端框架的重要原因之一。</p>\n<p>可以从几个主要方面简要说明：</p>\n<ol>\n<li><strong>状态管理</strong></li>\n</ol>\n<ul>\n<li><strong>Redux</strong>：经典的状态管理方案，适合大型应用，配合中间件（如 redux-thunk、redux-saga）处理异步逻辑。</li>\n<li><strong>Zustand / Jotai / Recoil</strong>：更现代、轻量的替代方案，适合中小型项目。</li>\n<li><strong>React Context + useReducer</strong>：适合简单全局状态的共享，不依赖外部库。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>路由管理</strong></li>\n</ol>\n<ul>\n<li><strong>React Router</strong>：React 官方推荐的路由库，支持嵌套路由、懒加载、动态路由等。</li>\n<li><strong>Next.js 自带路由</strong>：基于文件系统的路由方案，简化配置流程。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>异步数据管理</strong></li>\n</ol>\n<ul>\n<li><strong>SWR / React Query</strong>：支持缓存、自动重试、请求去重、依赖刷新等功能，极大提升了数据请求体验。</li>\n<li><strong>Axios / Fetch</strong>：底层请求库，通常配合上述工具使用。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>组件库</strong></li>\n</ol>\n<ul>\n<li><strong>Ant Design / Material UI</strong>：完整的企业级组件库，满足常规开发需求。</li>\n<li><strong>Tailwind CSS + Headless UI</strong>：更注重样式和结构分离，适合需要高度定制的项目。</li>\n<li><strong>shadcn/ui</strong>：基于 Tailwind 构建，现代化、高可定制的新兴组件库。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>框架扩展</strong></li>\n</ol>\n<ul>\n<li><strong>Next.js</strong>：服务端渲染 + 静态生成的 React 应用框架，支持 SEO、路由、API 路由等。</li>\n<li><strong>Remix</strong>：强调服务端优先的路由框架，增强数据获取和页面渲染逻辑。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>构建工具</strong></li>\n</ol>\n<ul>\n<li><strong>Vite / Webpack / Parcel</strong>：React 可以在这些工具中灵活运行，Vite 更现代、热更新更快。</li>\n<li><strong>Create React App (CRA)</strong>：React 官方脚手架，适合快速搭建项目。</li>\n</ul>\n<ol start=\"7\">\n<li><strong>测试工具</strong></li>\n</ol>\n<ul>\n<li><strong>Jest</strong>：React 官方推荐的测试框架。</li>\n<li><strong>React Testing Library</strong>：以用户视角测试组件行为，更贴近真实交互。</li>\n<li><strong>Cypress / Playwright</strong>：端到端测试工具，测试完整用户流程。</li>\n</ul>\n<ol start=\"8\">\n<li><strong>动画与交互</strong></li>\n</ol>\n<ul>\n<li><strong>Framer Motion</strong>：流畅强大的动画库，配合 React 使用简单高效。</li>\n<li><strong>React Spring</strong>：基于物理的动画方案，适合复杂动画场景。</li>\n</ul>\n"},{"title":"下面代码中，点击 “+3” 按钮后，age 的值是什么？","description":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useState</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> Counter</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">age</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setAge</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">42</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> increment</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setAge</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">age</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Your age: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">age</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        increment</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        increment</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        increment</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }}></span><span style=\"color:#393A34\">+3</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<hr>\n","answer":"<p>点击 +3 时，可能只更新为 43。</p>\n<p>这是因为 <code>setAge(age + 1)</code> 即使多次调用，也不会立即更新组件状态，而是会进行合并，最终只触发一次重新渲染。</p>\n<p>如果要实现调用三次就增加 3 ，可以将 <code>increment</code> 改为函数式更新：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> increment</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setAge</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 函数式更新</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"子组件是一个 Portal，发生点击事件能冒泡到父组件吗？","description":"","answer":"<p>React 的 Portal 通过 React 的 context 和事件冒泡的机制工作。</p>\n<p>在理解这个问题之前，首先要了解一些基本知识：</p>\n<ol>\n<li><strong>React Context</strong>：React 使用 context 来存储组件树的一些信息，比如事件处理程序。当组件使用 Portal 时，Portal 在 React 内部仍然保持在父组件树中，即使在 DOM 上渲染到其他地方。也就是说，Portal 的 context 依然从其父组件继承而来。</li>\n<li><strong>DOM 事件冒泡</strong>：DOM 中的事件（例如点击事件）通常会从触发事件的元素开始，然后逐步向上冒泡到父元素，直到 document 元素。在这个过程中，事件会按照 DOM 树的层级一层层地向上传递。</li>\n<li><strong>React 的事件代理</strong>：React 使用事件代理模式将所有事件都代理到顶层（<code>document</code> 或者 <code>root</code> DOM 节点）进行处理。这意味着当在子组件中触发一个事件时，无论子组件是否使用了 Portal，React 都会将事件传递到其父组件，然后逐级往上冒泡，直到到达代理事件的顶层。</li>\n</ol>\n<p>在 React 中，当一个子组件使用 Portal 将其内容渲染到其他 DOM 节点时，尽管在 DOM 结构上子组件不再是父组件的直接子节点，但在 React 的组件树中，子组件仍然是父组件的子节点。这意味着 React 在监听和处理事件时，会沿着组件树的路径（而不是 DOM 树的路径）冒泡事件。因此，子组件中触发的事件仍然会冒泡到父组件。</p>\n<p>总结：Portal 在 DOM 结构上将子组件渲染到其他位置，但在 React 的组件树中，它仍然是父组件的子组件。这使得事件可以从子组件沿着组件树冒泡到父组件。</p>\n"},{"title":"React 为什么要废弃 componentWillMount、componentWillReceiveProps、componentWillUpdate 这三个生命周期钩子？它们有哪些问题呢？React 又是如何解决的呢？","description":"","answer":"<p>React 在 16.3 版本中：</p>\n<ul>\n<li>将 <code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code> 三个生命周期钩子加上了 <code>UNSAFE</code> 前缀，变为 <code>UNSAFE_componentWillMount</code>、<code>UNSAFE_componentWillReceiveProps</code> 和 <code>UNSAFE_componentWillUpdate</code>。</li>\n<li>并引入了一个新的生命周期钩子：<code>getDerivedStateFromProps</code>。</li>\n</ul>\n<p>并在 17.0 以及之后的版本中：</p>\n<ul>\n<li>删除了 <code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code> 这三个生命周期钩子。</li>\n<li>不过 <code>UNSAFE_componentWillMount</code>、<code>UNSAFE_componentWillReceiveProps</code> 和 <code>UNSAFE_componentWillUpdate</code> 还是可以用的。</li>\n</ul>\n<p>我们知道 React 的更新流程分为：render 阶段和 commit 阶段。</p>\n<p><code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code> 这三个生命周期钩子都是在 render 阶段执行的。</p>\n<p>在 fiber 架构被应用之前，render 阶段是不能被打断的。当页面逐渐复杂之后，就有可能会阻塞页面的渲染，于是 React 推出了 fiber 架构。在应用 fiber 架构之后，低优先级任务的 render 阶段可以被高优先级任务打断。</p>\n<p>而这导致的问题就是：<strong>在 render 阶段执行的生命周期函数可能被执行多次</strong>。</p>\n<p>componentWillMount、componentWillReceiveProps、componentWillUpdate 这三个生命周期钩子，如果我们在其中执行一些具有副作用的操作，例如发送网络请求，就有可能导致一个同样的网络请求被执行多次，这显然不是我们想看到的。</p>\n<p>而 React 又没法强迫开发者不去这样做，因为怎么样使用 React 是开发者的自由，所以 React 就新增了一个静态的生命周期 <code>getDerivedStateFromProps</code>，来解决这个问题。</p>\n<p>用一个静态函数 <code>getDerivedStateFromProps </code>来取代被废弃的几个生命周期函数，这样开发者就无法通过 this 获取到组件的实例，也不能发送网络请求以及调用 this.setState。它就是强制开发者在 render 之前只做无副作用的操作，间接强制我们无法进行这些不合理不规范的操作，从而避免对生命周期的滥用。</p>\n"},{"title":"为什么 react 需要 fiber 架构，而 Vue 却不需要？","description":"","answer":"<p>React引入Fiber架构的主要原因是为了实现更好的异步渲染和更高效的任务调度。Fiber架构使得React能够更细粒度地控制和中断渲染过程，以便更好地响应用户交互、实现懒加载等功能。Vue在设计上采用了不同的策略，因此并不需要类似于Fiber的架构。</p>\n<p>以下是一些原因解释为什么React选择了Fiber架构，而Vue没有类似的架构：</p>\n<ol>\n<li><strong>异步渲染和任务优先级：</strong> React的Fiber架构使得实现异步渲染和任务优先级变得更加容易。这对于复杂的用户界面和大规模应用中的性能优化非常重要。React可以通过中断和恢复渲染过程，根据任务的优先级调度渲染工作，从而更好地响应用户输入和满足实时性要求。</li>\n<li><strong>更好的中断和恢复机制：</strong> Fiber架构提供了一种更灵活的中断和恢复机制，允许React在渲染过程中暂停、中断，然后根据优先级恢复。这使得React能够更好地处理复杂的渲染逻辑，并在需要时放弃低优先级的工作。</li>\n<li><strong>增量更新：</strong> Fiber允许React实现增量更新，即只更新变化的部分而不必重新渲染整个组件树。这对于提高渲染性能和减少不必要的工作非常有帮助。</li>\n</ol>\n<p>Vue在设计上采用了一种不同的响应式系统和渲染机制，不需要像React那样进行复杂的中断和任务调度。Vue的设计目标可能更注重简洁性和开发体验，而React的目标之一是提供更灵活和强大的性能优化工具。每个框架在设计上都有权衡和取舍，选择适合其目标和使用场景的策略。</p>\n"},{"title":"react 和 react-dom 是什么关系？","description":"","answer":"<p><code>react</code> 和 <code>react-dom</code> 是 React 库的两个主要部分，它们分别负责处理不同的事务。它们之间的关系可以理解为：</p>\n<ol>\n<li><strong><code>react</code>：</strong> 这是 React 库的核心部分，包含了 React 的核心功能，如组件、状态、生命周期等。它提供了构建用户界面所需的基本构建块。当你编写 React 组件时，你实际上是在使用 <code>react</code> 包。</li>\n<li><strong><code>react-dom</code>：</strong> 这是 React 专门为 DOM 环境提供的包，它包含了与浏览器 DOM 相关的功能。<code>react-dom</code> 提供了用于在浏览器中渲染 React 组件的方法，包括 <code>ReactDOM.render</code>。在 Web 开发中，<code>react-dom</code> 被用于将 React 应用渲染到浏览器的 DOM 中。</li>\n</ol>\n<p>基本上，<code>react</code> 和 <code>react-dom</code> 是为了分离 React 的核心功能，以便更好地处理不同的环境和平台。这种分离使得 React 更加灵活，可以适应不同的渲染目标，而不仅仅局限于浏览器环境。</p>\n<p>在使用 React 开发 Web 应用时，通常会同时安装和引入这两个包：</p>\n<pre><code class=\"language-shell\"><div class=\"language-shell \"><span class=\"lang\">shell</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">npm</span><span style=\"color:#B56959\"> install</span><span style=\"color:#B56959\"> react</span><span style=\"color:#B56959\"> react-dom</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>然后在代码中引入：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, React!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">h1</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">render</span><span style=\"color:#999999\">(&#x3C;</span><span style=\"color:#998418\">App</span><span style=\"color:#999999\"> />,</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的例子中，<code>react</code> 库提供了 <code>App</code> 组件的定义，而 <code>react-dom</code> 库提供了 <code>ReactDOM.render</code> 方法，用于将组件渲染到 HTML 页面中。这种分工让 React 在不同平台上能够更灵活地适应各种渲染目标。</p>\n"},{"title":"React Portals 有什么用？","description":"","answer":"<p>React Portals 是 React 提供的一种机制，用于将子组件渲染到父组件 DOM 层次结构之外的位置。它在处理一些特殊情况下的 UI 布局或交互时非常有用。以下是一些使用 React Portals 的常见情况：</p>\n<ol>\n<li><strong>在模态框中使用：</strong> 当你需要在应用的根 DOM 结构之外显示模态框（对话框）时，React Portals 可以帮助你将模态框的内容渲染到根 DOM 之外的地方，而不影响布局。</li>\n<li><strong>处理 z-index 问题：</strong> 在一些复杂的布局中，可能存在 z-index 的层级关系导致组件无法按照预期的方式叠加显示。使用 React Portals 可以将组件渲染到具有更高 z-index 的容器中，以解决这些问题。</li>\n<li><strong>在全局位置显示组件：</strong> 如果你希望某个组件在页面的固定位置显示，而不受父组件的定位影响，React Portals 可以将该组件渲染到 body 或其他容器中。</li>\n<li><strong>在动画中使用：</strong> 当你需要在页面中的某个位置执行动画时，React Portals 可以帮助你将动画的内容渲染到离该位置更近的 DOM 结构中，以提高动画性能。</li>\n</ol>\n<p>使用 React Portals 的基本步骤如下：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react-dom</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MyPortalComponent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> ReactDOM</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createPortal</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 子组件的内容</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#393A34\">      This is rendered using a portal!</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>,</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 渲染目标的 DOM 元素</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getElementById</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">portal-root</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 在应用的根组件中渲染 MyPortalComponent</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#A0ADA0\">/* 此处的内容在正常的 DOM 结构中 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">This is a normal component.</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">      {</span><span style=\"color:#A0ADA0\">/* 使用 React Portals 渲染到 'portal-root' 元素外 */</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#998418\">MyPortalComponent</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> App</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的例子中，<code>MyPortalComponent</code> 中的内容会被渲染到具有 id 为 'portal-root' 的 DOM 元素外。</p>\n"},{"title":"useMemo 和 useCallback 有什么区别？","description":"","answer":"<p>在 React 中，<code>useMemo</code> 和 <code>useCallback</code> 都是用来优化性能的钩子函数，但它们的用途和作用稍有不同。</p>\n<ol>\n<li><strong>useMemo</strong>: <code>useMemo</code> 的主要作用是在组件重新渲染时，用来缓存计算结果，以避免不必要的重复计算。它接收两个参数：一个回调函数和一个依赖数组。回调函数用于进行计算，而依赖数组用于指定在数组中列出的依赖项发生变化时，才重新计算并返回新的值，否则会返回上一次缓存的值。</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> memoizedValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useMemo</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 进行耗时的计算</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> someValue</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dependency1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dependency2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的示例中，只有当 <code>dependency1</code> 或者 <code>dependency2</code> 发生变化时，<code>useMemo</code> 才会重新计算并返回新的值，否则会复用之前的值。</p>\n<ol>\n<li><strong>useCallback</strong>: <code>useCallback</code> 的作用是在组件重新渲染时，返回一个记忆化的回调函数，以避免不必要的函数重新创建。它也接收两个参数：一个回调函数和一个依赖数组。当依赖项发生变化时，会返回一个新的回调函数，否则会复用之前的回调函数。</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> memoizedCallback</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useCallback</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理事件的回调函数</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dependency1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dependency2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在这个示例中，只有当 <code>dependency1</code> 或者 <code>dependency2</code> 发生变化时，<code>useCallback</code> 才会返回一个新的回调函数，否则会返回之前的回调函数。</p>\n<p>总结区别：</p>\n<ul>\n<li><code>useMemo</code> 主要用于缓存计算结果，适用于任何需要缓存值的场景。</li>\n<li><code>useCallback</code> 主要用于缓存回调函数，适用于需要传递给子组件的事件处理函数，以避免不必要的重新渲染。</li>\n</ul>\n<p>另外，在大多数情况下，你不必在每个函数组件中都使用 <code>useMemo</code> 或 <code>useCallback</code>。</p>\n<p>只有当你在性能测试中发现了性能问题，或者在特定情况下需要优化函数的创建和计算时，再考虑使用这些钩子。</p>\n"},{"title":"我们应该在什么场景下使用 useMemo 和 useCallback ？","description":"","answer":""},{"title":"说说你对 useReducer 的理解","description":"","answer":"<p><code>useReducer</code> 是 React 提供的一个 Hook，用于在函数组件中管理状态。它与 <code>useState</code> 类似，但通常在需要处理复杂状态逻辑时使用，特别是当状态的更新依赖于先前的状态或需要多个值时。<code>useReducer</code> 的设计灵感来源于 Redux，它通过将状态管理逻辑抽象为一个“reducer”函数来让状态的变更变得更加清晰和可控。</p>\n<ol>\n<li><strong><code>useReducer</code> 的基本语法</strong></li>\n</ol>\n<p><code>useReducer</code> 接受两个参数：</p>\n<ul>\n<li><strong>reducer</strong>：一个纯函数，用于处理状态的更新。它接收当前状态和一个动作对象，然后返回一个新的状态。</li>\n<li><strong>initialState</strong>：初始状态，可以是任意类型的值（数字、对象、数组等）。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reducer</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><code>state</code>：当前的状态值。</li>\n<li><code>dispatch</code>：一个函数，用来分发动作，触发状态更新。</li>\n</ul>\n<ol start=\"2\">\n<li><strong><code>reducer</code> 函数的定义</strong></li>\n</ol>\n<p><code>reducer</code> 函数接收两个参数：</p>\n<ul>\n<li><strong>state</strong>：当前的状态。</li>\n<li><strong>action</strong>：包含了要更新状态的指令或者数据的对象。</li>\n</ul>\n<p><code>reducer</code> 函数根据 <code>action</code> 的不同类型，返回一个新的状态。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  switch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    default</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"3\">\n<li><strong>如何使用 <code>useReducer</code></strong></li>\n</ol>\n<p>在使用 <code>useReducer</code> 时，你需要：</p>\n<ol>\n<li>定义一个 <code>reducer</code> 函数来指定如何更新状态。</li>\n<li>使用 <code>useReducer</code> 获取 <code>state</code> 和 <code>dispatch</code>。</li>\n<li>使用 <code>dispatch</code> 来触发状态更新。</li>\n</ol>\n<p><strong>示例：简单的计数器</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useReducer</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 定义初始状态</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 定义 reducer 函数</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  switch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> count</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    default</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Counter</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reducer</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}&#x3C;/</span><span style=\"color:#1E754F\">p</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">increment</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">Increment</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">button</span><span style=\"color:#B07D48\"> onClick</span><span style=\"color:#999999\">={()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">decrement</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> })}></span><span style=\"color:#393A34\">Decrement</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">button</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> Counter</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上面的例子中，<code>useReducer</code> 管理了计数器的状态。<code>dispatch</code> 函数用于触发不同类型的动作（<code>increment</code> 和 <code>decrement</code>），<code>reducer</code> 函数根据动作类型返回新的状态。</p>\n<ol start=\"4\">\n<li><strong>使用场景</strong></li>\n</ol>\n<p><code>useReducer</code> 适合处理以下场景：</p>\n<ul>\n<li><strong>复杂状态逻辑</strong>：当一个状态依赖于多个字段时，或者状态更新涉及多个值的变化，<code>useReducer</code> 提供了更好的结构化方式。</li>\n<li><strong>多个状态更新依赖于先前的状态</strong>：当状态更新涉及先前状态的计算时（例如，多个操作之间的连锁反应），使用 <code>useReducer</code> 更容易控制和管理。</li>\n<li><strong>优化性能</strong>：在某些情况下，<code>useReducer</code> 可以帮助避免不必要的重渲染，因为它可以更精确地控制状态更新和渲染过程，尤其是当使用 <code>dispatch</code> 更新复杂状态时。</li>\n</ul>\n<p><strong>例子：表单管理</strong></p>\n<p>对于一个表单，如果每个输入字段的状态都需要管理，并且每个字段的更新需要独立处理，<code>useReducer</code> 会比 <code>useState</code> 更具可维护性。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useReducer</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 初始状态</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> email</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// reducer 函数</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  switch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">SET_NAME</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">payload</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    case</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">SET_EMAIL</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> {</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> email</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">payload</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    default</span><span style=\"color:#999999\">:</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> state</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Form</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dispatch</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reducer</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> initialState</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleNameChange</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">SET_NAME</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> payload</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> handleEmailChange</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    dispatch</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">SET_EMAIL</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> payload</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;</span><span style=\"color:#1E754F\">form</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">text</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        onChange</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleNameChange</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        placeholder</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Name</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">input</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">email</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        value</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">email</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        onChange</span><span style=\"color:#999999\">={</span><span style=\"color:#B07D48\">handleEmailChange</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        placeholder</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Email</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    &#x3C;/</span><span style=\"color:#1E754F\">form</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#B07D48\"> Form</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"5\">\n<li><strong><code>useReducer</code> 与 <code>useState</code> 的区别</strong></li>\n</ol>\n<ul>\n<li><strong>状态管理复杂度</strong>：<code>useReducer</code> 通常用于复杂状态管理，特别是当状态依赖于多个字段，或者更新逻辑复杂时。而 <code>useState</code> 更适合处理简单的、独立的状态。</li>\n<li><strong>可预测性和结构化</strong>：<code>useReducer</code> 可以通过 <code>reducer</code> 函数将状态更新逻辑结构化，便于管理和调试。而 <code>useState</code> 每次更新状态都需要单独处理更新逻辑，随着状态复杂度增加，代码会变得难以维护。</li>\n<li><strong>性能</strong>：<code>useReducer</code> 和 <code>useState</code> 在性能上没有显著的差异，但 <code>useReducer</code> 更适合在需要多次更新状态或复杂状态操作时使用。</li>\n</ul>\n"},{"title":"讲讲 React.memo 和 JS 的 memorize 函数的区别","description":"","answer":"<p>React.memo() 和 JS 的 memorize 函数都是用来对函数进行结果缓存，提高函数的性能表现。不过，它们之间还是有一些区别的：</p>\n<ol>\n<li><strong>适用范围不同</strong>：React.memo() 主要适用于优化 React 组件的性能表现，而 memorize 函数可以用于任何 JavaScript 函数的结果缓存。</li>\n<li><strong>实现方式不同</strong>：React.memo() 是一个 React 高阶组件（HOC），通过浅层比较 props 是否发生变化来决定是否重新渲染组件。而 memorize 函数则是通过将函数的输入参数及其计算结果保存到一个缓存对象中，以避免重复计算相同的结果。</li>\n<li><strong>缓存策略不同</strong>：React.memo() 的缓存策略是浅比较（shallow compare），只比较props 的第一层属性值是否相等，不会递归比较深层嵌套对象或数组的内容。而 memorize 函数的缓存策略是将输入参数转换成字符串后，作为缓存的键值。如果传入的参数不是基本类型时，则需要自己实现缓存键值的计算。</li>\n<li><strong>应用场景不同</strong>：React.memo() 主要适用于对不经常变化的组件进行性能优化，而 memorize 函数则主要适用于对计算量大、执行时间长的函数进行结果缓存。例如，对于状态不变的组件或纯函数，可以使用 React.memo() 进行优化；对于递归计算、复杂数学运算等耗时操作，可以使用 memorize 函数进行结果缓存。</li>\n</ol>\n<p>综上所述，React.memo() 和 JS 的 memorize 函数虽然都是用于提高函数的性能表现，但其适用范围、实现方式、缓存策略和应用场景等方面还是有一定的区别。开发者需要根据具体情况来选择合适的性能优化手段，以提高应用程序的性能和响应速度。</p>\n"},{"title":"如果在 useEffect 的第一个参数中 return 了一个函数，那么第二个参数分别传空数组和传依赖数组，该函数分别是在什么时候执行？","description":"","answer":"<p>在 React 中，当 useEffect 第一个参数中返回一个函数时，这个函数会在组件卸载时执行。当传递空数组 [] 时，useEffect 只会在组件挂载和卸载时调用一次，因此返回的函数也只会在组件卸载时执行一次。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 在挂载时执行</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 在卸载时执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>当传递依赖数组时，useEffect 会在组件挂载和依赖项更新时调用，因此返回的函数也会随着组件更新而执行。每次组件重新渲染时都会检查依赖项列表是否有变化，如果有变化则重新执行 useEffect，并在执行新的 useEffect 前先执行上一个 useEffect 返回的函数（如果存在）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 在挂载、依赖列表变化及卸载时执行</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 在下一次 useEffect 执行前执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dep1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dep2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>需要注意，这个函数的作用通常是清除 effect 留下的副作用，例如取消定时器、取消订阅等等。在函数中应该清理掉之前设置的任何 effect，在组件卸载时避免不必要的内存泄漏和资源浪费。</p>\n"},{"title":"useEffect 的第二个参数, 传空数组和传依赖数组有什么区别？","description":"","answer":"<p>在 React 中，useEffect 是一个常用的 Hook，它用于处理组件生命周期中的副作用。</p>\n<p>useEffect 接收两个参数，第一个是要执行的函数，第二个是依赖数组（可选）。</p>\n<p>当传递空数组 [] 时，useEffect 只会在组件挂载和卸载时调用一次。这种情况下，useEffect 不会监听任何变量，并且不会对组件进行重新渲染。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 只在挂载和卸载时执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> []);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>当传递依赖数组时，useEffect 会在组件挂载和依赖项更新时调用。当依赖项中的任何一个值发生变化时，useEffect 都将被重新调用。如果依赖数组为空，则每次组件重新渲染时都会调用 useEffect。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 在挂载、依赖列表变化及卸载时执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">dep1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> dep2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>下面是这两种情况的总结：</p>\n<ul>\n<li>当传递空数组 [] 时，useEffect 只会在组件挂载和卸载时调用一次，不会对组件进行重新渲染。</li>\n<li>当传递依赖数组时，useEffect 会在组件挂载和依赖项更新时调用，每次更新时都会检查依赖项列表是否有变化，如果有变化则重新执行。</li>\n</ul>\n<p>如果 useEffect 中使用了闭包函数，则应该确保所有引用的变量都在依赖项中被显示声明，否则可能会导致不必要的重新渲染或者无法获取最新的状态。</p>\n"},{"title":"怎么判断一个对象是否是 React 元素？","description":"","answer":"<p>如果想要判断一个对象是否是 React 元素，可以使用 <code>React.isValidElement()</code> 方法进行判断。该方法接收一个参数，返回一个布尔值，用于表示指定的对象是否是 React 元素。</p>\n<p>以下是一个示例代码：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> React</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> MyComponent</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">Hello, world!</span><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">>;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> elem</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#998418\">MyComponent</span><span style=\"color:#999999\"> />;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">isValidElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">elem</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // true</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">React</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">isValidElement</span><span style=\"color:#999999\">({}));</span><span style=\"color:#A0ADA0\">   // false</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在上述代码中，定义了一个简单的组件 <code>MyComponent</code>，并通过 JSX 语法创建了一个 React 元素 <code>elem</code>。然后，使用 <code>React.isValidElement()</code> 方法对 <code>elem</code> 和一个普通对象 <code>{}</code> 进行判断，并输出结果。</p>\n<p>需要注意的是，<code>React.isValidElement()</code> 方法只能用于判断是否为 React 元素，并不能判断元素的类型和其他属性。如果需要获取元素的类型或其他属性，可以直接访问元素的属性，例如 <code>type</code>、<code>props</code>、<code>key</code> 等。</p>\n"},{"title":"react是否支持给标签设置自定义的属性，比如给video标签设置webkit-playsinline？","description":"","answer":"<p>如果你在react中这么样写：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// Your code:</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> mycustomattribute</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">something</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在react 15中将被渲染成：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// React 15 output:</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>在react 16及之后的版本中将被渲染成：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// React 16 output:</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> mycustomattribute</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">something</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>但这个会有限制，如果自定义的属性不是 <code>string</code>, <code>number</code> 或者 <code>object</code>，该属性依然会被忽略。</p>\n<p>所以目前可以这样添加 webkit-playsinline 属性：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">video</span><span style=\"color:#B07D48\"> width</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">750</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> height</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">500</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> controls</span><span style=\"color:#B07D48\"> webkit-playsinline</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">true</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#999999\">\t&#x3C;</span><span style=\"color:#1E754F\">source</span><span style=\"color:#B07D48\"> src</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">https://media.w3.org/2010/05/sintel/trailer.mp4</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> type</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">video/mp4</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">/></span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">video</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>另外，还可以通过 <code>setAttribute</code> 进行设置，比如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#1E754F\"> as</span><span style=\"color:#2E8F82\"> React</span><span style=\"color:#2E8F82\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> Component</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> class</span><span style=\"color:#2E8F82\"> VideoComponent</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Component</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  videoContainer</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">HTMLDivElement</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  componentDidMount</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> video</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">video</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    video</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">autoplay</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    video</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">loop</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    video</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">muted</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // fixes autoplay in chrome</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    video</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setAttribute</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">playsinline</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">true</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // fixes autoplay in webkit (ie. mobile safari)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> source</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">source</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    source</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/path/to/your/video.mp4</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    source</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">video/mp4</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    video</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">source</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">videoContainer</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">video</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  render</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">={(</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">videoContainer</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">;</span><span style=\"color:#999999\"> }}</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"说说你对 dangerouslySetInnerHTML 的理解","description":"","answer":""},{"title":"说说你对 React Hook的闭包陷阱的理解，有哪些解决方案？","description":"","answer":""},{"title":"React18新特性","description":"","answer":"<p>React 18 引入了许多重要的特性，主要集中在以下方面：</p>\n<ol>\n<li><strong>并发渲染 (Concurrent Rendering)</strong></li>\n</ol>\n<p>React 18 引入了 <strong>并发模式</strong>，它允许 React 在后台异步渲染部分组件，从而提高用户界面的响应速度。并发渲染的引入可以显著提高复杂应用的性能，尤其是当涉及到大量状态更新时。</p>\n<p><strong>主要特点：</strong></p>\n<ul>\n<li><strong>自动批处理</strong>：React 18 中的并发渲染自动批处理多个状态更新，避免了多次渲染的浪费。</li>\n<li><strong><code>startTransition</code> API</strong>：使开发者能够标记不需要优先渲染的更新，减少应用的卡顿感。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Suspense 的改进</strong></li>\n</ol>\n<p>React 18 中对 <strong>Suspense</strong> 进行了改进，使其能够支持更多的场景，特别是在数据获取和代码分割的场景中。通过与并发模式结合，Suspense 可以使应用的加载过程更加平滑和高效。</p>\n<p><strong>新特性：</strong></p>\n<ul>\n<li><strong><code>Suspense</code> 支持在服务端渲染（SSR）中</strong>：React 18 支持在服务器端渲染时使用 <code>Suspense</code>，从而实现更灵活的渲染过程。</li>\n<li><strong><code>SuspenseList</code></strong>：可以将多个 Suspense 组件组合起来，使多个异步加载的组件能够更平滑地显示。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>React Server Components (实验性功能)</strong></li>\n</ol>\n<p>React Server Components 是 React 18 中的一个实验性特性，它允许在服务器上渲染一部分 UI，而将其他部分交给客户端渲染。这样可以减少 JavaScript 的体积，优化应用的加载速度，尤其是在复杂的应用中。</p>\n<p><strong>主要特点：</strong></p>\n<ul>\n<li>将 React 组件拆分为 &quot;客户端组件&quot; 和 &quot;服务器组件&quot;，服务器组件不需要发送到客户端，减少了 JavaScript 包的大小。</li>\n<li>提供更高效的数据加载和渲染流程。</li>\n</ul>\n<ol start=\"4\">\n<li><strong><code>useId</code> Hook</strong></li>\n</ol>\n<p>React 18 引入了 <code>useId</code> hook，用于生成独一无二的 ID，特别是在服务端渲染和客户端渲染中需要保证一致性时。<code>useId</code> 可以帮助开发者避免由于客户端和服务端渲染结果不一致导致的 ID 冲突问题。</p>\n<p><strong>用途：</strong></p>\n<ul>\n<li>生成一致的、唯一的 ID，确保在服务器端渲染时和客户端渲染时 ID 一致。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>并发 Suspense 和流控制（Streaming and Suspense）</strong></li>\n</ol>\n<p>React 18 在 <strong>流式渲染</strong>（Streaming Rendering）方面做了很多增强。流式渲染允许应用按需加载组件，并且这些组件可以并行加载，从而加速页面的呈现速度。</p>\n<p><strong>主要特点：</strong></p>\n<ul>\n<li>使用流式渲染，开发者可以更好地控制在服务器上渲染哪些部分，然后根据需要将其传输到客户端。</li>\n<li>与 Suspense 配合，能更好地支持部分内容的异步加载。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>更好的 SSR 支持（服务端渲染）</strong></li>\n</ol>\n<p>React 18 加强了对服务端渲染（SSR）的支持，包括对 Suspense 的支持，使得 SSR 渲染更加高效和灵活。React 18 引入了一个新的 SSR API，提供了更多的流控制和数据加载优化，允许更快的页面加载。</p>\n<ol start=\"7\">\n<li><strong>React 18 中的自动批处理（Automatic Batching）</strong></li>\n</ol>\n<p>React 18 引入了自动批处理机制，它使得在多个状态更新中，只会触发一次渲染，从而减少渲染次数，提高性能。以前，状态更新的批处理只有在事件处理函数中有效，而 React 18 将这种机制扩展到所有异步操作中（如 <code>setTimeout</code>, <code>Promise</code>, <code>fetch</code> 等）。</p>\n<ol start=\"8\">\n<li><strong><code>useSyncExternalStore</code> Hook</strong></li>\n</ol>\n<p>React 18 提供了 <code>useSyncExternalStore</code> Hook，用于订阅外部的、同步的数据源，并能够确保与 React 的渲染周期同步。这对于外部数据源（例如 Redux、zustand 等）非常有用，能够确保应用状态的一致性。</p>\n<p><strong>用途：</strong></p>\n<ul>\n<li>用于访问外部存储（如 Redux store）时，确保状态的同步更新，特别是在服务端渲染的情况下。</li>\n</ul>\n<ol start=\"9\">\n<li><strong>更新的 <code>useEffect</code> 和 <code>useLayoutEffect</code> 行为</strong></li>\n</ol>\n<p>React 18 对 <code>useEffect</code> 和 <code>useLayoutEffect</code> 的行为进行了优化，特别是如何与并发渲染结合。这些优化减少了副作用的执行时机，提高了性能和用户体验。</p>\n<ol start=\"10\">\n<li><strong>增强的开发者工具</strong></li>\n</ol>\n<p>React 18 引入了对 <strong>React DevTools</strong> 的改进，使得开发者能够更好地调试和理解并发渲染、Suspense 和其他新特性。React DevTools 会显示更多关于组件的加载状态和渲染阶段的信息，帮助开发者分析性能瓶颈和优化路径。</p>\n"},{"title":"实现一个 useTimeout Hook","description":"","answer":"<p><code>useTimeout</code> 是可以在函数式组件中，处理 <code>setTimeout</code> 计时器函数</p>\n<p><strong>解决了什么问题？</strong></p>\n<p>如果直接在函数式组件中使用 <code>setTimeout</code> ，会遇到以下问题：</p>\n<ul>\n<li>多次调用setTimeout</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setState</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setState</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">state</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> (</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">        // 我们原本的目的是在页面渲染完3s后修改一下state，但是你会发现当state+1后，触发了页面的重新渲染，就会重新有一个3s的定时器出现来给state+1，既而变成了每3秒+1。  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">}</span><span style=\"color:#999999\"> &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    );</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>hooks 的闭包缺陷</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> App</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCount</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">countTimeout</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> setCountTimeout</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useState</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">          setCountTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      setCount</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [])</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">       //count发生了变化，但是3s后setTimout的count却还是0  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#393A34\">          Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">count</span><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          &#x3C;</span><span style=\"color:#1E754F\">br</span><span style=\"color:#999999\"> /></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#393A34\">          setTimeout Count: </span><span style=\"color:#999999\">{</span><span style=\"color:#B07D48\">countTimeout</span><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      &#x3C;/</span><span style=\"color:#1E754F\">div</span><span style=\"color:#999999\">></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  )</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>useTimeout 实现</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> useTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">callback</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> delay</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> memorizeCallback</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useRef</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    memorizeCallback</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> callback</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">callback</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useEffect</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">delay</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> timer</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        memorizeCallback</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">current</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span><span style=\"color:#B07D48\"> delay</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        clearTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">timer</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">delay</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>如何使用</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">  // callback 回调函数， delay 延迟时间</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  useTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">callback</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> delay</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"实现 useUpdate 方法，调用时强制组件重新渲染","description":"","answer":"<p>可以利用 <code>useReducer</code> 每次调用 <code>updateReducer</code> 方法，来达到强制组件重新渲染的目的。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useReducer</span><span style=\"color:#999999\"> }</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">react</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> updateReducer</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">number</span><span style=\"color:#999999\">):</span><span style=\"color:#2E8F82\"> number</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">num</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> %</span><span style=\"color:#2F798A\"> 1_000_000</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> useUpdate</span><span style=\"color:#999999\">():</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#2E8F82\"> void</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [,</span><span style=\"color:#B07D48\"> update</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useReducer</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">updateReducer</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> update</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"}]