[{"title":"说说你对算法的理解，应用场景？","description":"","answer":"<p>我对算法的理解是<strong>用高效、明确的步骤解决特定问题</strong>。在前端开发中，算法常用于以下场景：</p>\n<ol>\n<li><strong>性能优化</strong>：如虚拟滚动通过计算可视区域动态渲染，减少DOM操作；</li>\n<li><strong>数据处理</strong>：如复杂表单联动时，用拓扑排序解决依赖关系校验；</li>\n<li><strong>交互逻辑</strong>：如拖拽排序结合稳定排序算法，保证用户体验一致性；</li>\n<li><strong>框架底层</strong>：如虚拟DOM Diff策略减少渲染开销。\n我习惯在需求中识别算法切入点，例如曾用LRU缓存策略优化H5页面资源加载速度，并持续通过LeetCode保持逻辑敏感度。</li>\n</ol>\n"},{"title":"说说你对数据结构的理解？有哪些？区别？","description":"","answer":"<p><strong>数据结构是数据组织和操作的逻辑模型</strong>，核心在于<strong>平衡存储效率与操作性能</strong>。常见类型及区别：</p>\n<ol>\n<li>\n<p><strong>线性结构</strong></p>\n<ul>\n<li><strong>数组</strong>：连续内存，通过索引快速访问，但插入/删除成本高（需移动元素）；</li>\n<li><strong>链表</strong>：节点离散存储，通过指针连接，增删高效但查询需遍历；</li>\n<li><strong>栈（LIFO）</strong>：函数调用栈、撤销操作；</li>\n<li><strong>队列（FIFO）</strong>：异步任务队列、浏览器事件循环。</li>\n</ul>\n</li>\n<li>\n<p><strong>非线性结构</strong></p>\n<ul>\n<li><strong>树</strong>：层级关系，如DOM树、组件树，B+树用于数据库索引；</li>\n<li><strong>图</strong>：多对多关联，如社交网络关系、依赖分析（Webpack模块图）；</li>\n<li><strong>哈希表</strong>：键值映射（JS的<code>Map</code>），通过哈希函数快速存取，冲突用拉链法/开放寻址解决。</li>\n</ul>\n</li>\n</ol>\n<p><strong>前端典型场景</strong>：</p>\n<ul>\n<li>虚拟DOM用树结构比对差异；</li>\n<li>路由历史管理用栈结构；</li>\n<li>防抖/节流任务调度用队列；</li>\n<li>LocalStorage缓存淘汰策略（如LRU）依赖哈希表+双向链表。</li>\n</ul>\n"},{"title":"什么是时间复杂度，空间复杂度？","description":"","answer":"<p><strong>时间复杂度</strong>衡量算法执行时间随数据规模增长的趋势，<strong>空间复杂度</strong>衡量算法内存消耗的增速，二者都用大O表示法描述。</p>\n<p><strong>前端典型场景</strong>：</p>\n<ul>\n<li><strong>时间复杂度</strong>：\n<ul>\n<li>遍历数组操作 → O(n)</li>\n<li>双重循环比对节点 → O(n²)（需警惕性能瓶颈）</li>\n<li>虚拟DOM Diff优化 → 通过Key策略降为O(n)</li>\n</ul>\n</li>\n<li><strong>空间复杂度</strong>：\n<ul>\n<li>递归调用层级 → O(n)（可能栈溢出）</li>\n<li>深拷贝对象 → O(n)（内存翻倍需谨慎）</li>\n<li>状态管理库内存占用 → 关注数据缓存策略</li>\n</ul>\n</li>\n</ul>\n<p>理解复杂度能帮助在编码时权衡性能，例如用哈希表（O(1)查询）替代数组遍历（O(n)）来优化高频操作。</p>\n"},{"title":"什么是链表？如何实现一个简单的单链表？","description":"","answer":"<p><strong>链表</strong>是由节点组成的线性数据结构，每个节点包含<strong>数据域</strong>和<strong>指针域</strong>（指向下个节点），内存非连续存储。与数组相比，链表插入/删除高效（O(1)~O(n)），但随机访问低效（O(n)）。</p>\n<p><strong>JavaScript实现单链表</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Node</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> LinkedList</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 尾部添加节点</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  append</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Node</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 删除匹配的第一个节点</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> list</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> LinkedList</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">list</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">append</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">list</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">append</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">list</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 删除头节点</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点</strong>：</p>\n<ol>\n<li><strong>插入</strong>：遍历到尾节点修改指针（O(n)）；</li>\n<li><strong>删除</strong>：需定位前驱节点（如删除头节点特殊处理）；</li>\n<li><strong>应用场景</strong>：React Fiber架构中任务调度队列、浏览器历史记录管理等。</li>\n</ol>\n"},{"title":"说说你对树的理解？应用场景？","description":"","answer":"<p><strong>树是层级化的非线性数据结构</strong>，核心特征是节点间存在父子关系且无循环。前端典型场景：</p>\n<ol>\n<li><strong>DOM树</strong>：浏览器解析HTML生成的节点树，前端框架（如React/Vue）通过虚拟DOM Diff算法比对树结构差异，高效更新视图。</li>\n<li><strong>组件树</strong>：React Fiber架构将组件关系抽象为树，实现任务优先级调度和异步渲染。</li>\n<li><strong>路由配置</strong>：嵌套路由用树形结构管理（如Vue Router的children），动态生成导航菜单。</li>\n<li><strong>数据结构优化</strong>：\n<ul>\n<li>二叉搜索树：快速查找（时间复杂度O(logn)）</li>\n<li>Trie树：自动补全/关键词过滤（前缀匹配）</li>\n<li>决策树：可视化配置工具的条件分支逻辑</li>\n</ul>\n</li>\n</ol>\n<p><strong>实现示例（二叉树遍历）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> TreeNode</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 前序遍历（根-左-右）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">),</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">)];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 应用场景：克隆组件树结构  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> cloneTree</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> TreeNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> cloneTree</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> cloneTree</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>树的优势在于<strong>天然映射层级关系</strong>，适合处理嵌套数据和递归逻辑，但需警惕深层次遍历的性能问题（如栈溢出）。</p>\n"},{"title":"说说你对堆，栈，队列的理解？应用场景？","description":"","answer":"<p><strong>堆、栈、队列是三种基础数据结构</strong>，核心区别在于<strong>操作规则与使用场景</strong>：</p>\n<p><strong>1. 栈（Stack）</strong></p>\n<ul>\n<li><strong>特性</strong>：后进先出（LIFO），仅允许在栈顶操作（push/pop）。</li>\n<li><strong>前端应用</strong>：\n<ul>\n<li><strong>函数调用栈</strong>：执行上下文压栈/弹栈（递归调用时的堆栈溢出问题）；</li>\n<li><strong>撤销操作</strong>：编辑器或表单的Undo/Redo（如用两个栈实现历史记录）；</li>\n<li><strong>路由管理</strong>：浏览器History API的<code>pushState</code>和<code>popState</code>；</li>\n<li><strong>算法场景</strong>：括号匹配、DFS非递归实现。</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 用数组模拟栈实现撤销功能  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> UndoStack</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">action</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">[</span><span style=\"color:#AB5959\">++</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> action</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 截断后续记录  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  undo</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">[</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  redo</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> >=</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">[</span><span style=\"color:#AB5959\">++</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 队列（Queue）</strong></p>\n<ul>\n<li><strong>特性</strong>：先进先出（FIFO），队尾入队（enqueue）、队头出队（dequeue）。</li>\n<li><strong>前端应用</strong>：\n<ul>\n<li><strong>事件循环</strong>：宏任务队列（如setTimeout）、微任务队列（Promise）；</li>\n<li><strong>异步请求控制</strong>：并发请求队列（如限制同时最多5个请求）；</li>\n<li><strong>动画调度</strong>：保证动画执行顺序（如GSAP的TweenMax队列）；</li>\n<li><strong>算法场景</strong>：BFS层级遍历、缓存淘汰策略（如最近最少使用队列）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 请求并发控制队列  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> RequestQueue</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">concurrency</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">concurrency</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> concurrency</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">running</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">requestFn</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> requestFn</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">next</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  next</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">running</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">concurrency</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> requestFn</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">shift</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">running</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      requestFn</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reject</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">finally</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">running</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">next</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 堆（Heap）</strong></p>\n<ul>\n<li><strong>特性</strong>：完全二叉树结构，根节点为极值（最大堆/最小堆）。</li>\n<li><strong>前端应用</strong>：\n<ul>\n<li><strong>优先级队列</strong>：React Scheduler中的任务调度（高优先级任务优先执行）；</li>\n<li><strong>Top K问题</strong>：日志系统中统计高频报错类型；</li>\n<li><strong>性能监控</strong>：统计页面加载时间的P90/P99分位值（无需全排序）；</li>\n<li><strong>算法场景</strong>：堆排序、合并K个有序链表。</li>\n</ul>\n</li>\n</ul>\n<p><strong>逻辑示例（React Scheduler中的堆应用）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 简化版最小堆实现任务优先级调度  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MinHeap</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">task</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">task</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">bubbleUp</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  pop</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> min</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">heap</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sinkDown</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> min</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 上浮与下沉操作（具体实现略）  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 任务调度器使用堆管理任务  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> scheduler</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> MinHeap</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">scheduler</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> priority</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> task</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> renderComponentA</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">scheduler</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> priority</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> task</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> urgentUpdateB</span><span style=\"color:#999999\"> });</span><span style=\"color:#A0ADA0\"> // 更高优先级  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> nextTask</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> scheduler</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 优先执行priority 0的任务  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>栈</strong>：LIFO，适合对称性操作（如函数调用）；</li>\n<li><strong>队列</strong>：FIFO，保证顺序公平性（如异步任务）；</li>\n<li><strong>堆</strong>：动态极值获取，优化高频查询场景（如优先级调度）。</li>\n</ul>\n"},{"title":"什么是图？","description":"","answer":"<p><strong>图（Graph）</strong> 是由 <strong>节点（顶点）</strong> 和 <strong>边</strong> 组成的非线性数据结构，用于描述多对多关系。其核心特点是能表达复杂关联性，主要分两类：</p>\n<ul>\n<li><strong>有向图</strong>：边有方向（如A→B），如任务依赖关系、微博关注网络；</li>\n<li><strong>无向图</strong>：边无方向（如A-B），如社交好友关系、地铁线路图。</li>\n</ul>\n<p><strong>前端典型应用场景</strong></p>\n<ol>\n<li>\n<p><strong>依赖分析</strong></p>\n<ul>\n<li>Webpack 模块依赖图：解析文件间的<code>import/require</code>关系，构建有向图进行打包顺序优化；</li>\n<li>循环依赖检测：通过遍历图判断是否存在环（如使用DFS+路径记录）。</li>\n</ul>\n</li>\n<li>\n<p><strong>可视化工具</strong></p>\n<ul>\n<li>低代码平台的节点连线（如流程图设计器）；</li>\n<li>组织架构图、知识图谱渲染。</li>\n</ul>\n</li>\n<li>\n<p><strong>状态管理</strong></p>\n<ul>\n<li>复杂表单的字段关联关系（如某个选项触发多个字段显隐）；</li>\n<li>前端路由权限的节点访问控制（如角色与页面的关联图）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>代码示例（邻接表实现图）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Graph</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 节点表：key为节点ID，value为相邻节点集合  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 添加节点  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  addNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">());</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 添加有向边（A→B）  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  addDirectedEdge</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">from</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">from</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">from</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 检测循环依赖（DFS）  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  hasCycle</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> visited</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> recursionStack</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> dfs</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">recursionStack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">visited</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      visited</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      recursionStack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> neighbors</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> neighbor</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> neighbors</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\"> (</span><span style=\"color:#59873A\">dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">neighbor</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      recursionStack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">nodes</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#59873A\">dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：检测模块依赖是否有环  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> graph</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Graph</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addDirectedEdge</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addDirectedEdge</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addDirectedEdge</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">C</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 形成A→B→C→A的环  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">hasCycle</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // true  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>图的算法与前端结合</strong></p>\n<ul>\n<li><strong>最短路径</strong>：可视化地图路径规划（如Dijkstra算法）；</li>\n<li><strong>拓扑排序</strong>：构建任务执行顺序（如Vite的插件执行顺序）；</li>\n<li><strong>连通性检测</strong>：判断组件树的子模块是否可独立卸载。</li>\n</ul>\n<p>图的优势在于 <strong>灵活表达复杂关系</strong>，但需注意大规模数据下的性能问题（如遍历优化、内存占用）。</p>\n"},{"title":"什么是哈希表？如何使用对象实现一个简单的哈希表？","description":"","answer":"<p><strong>哈希表（Hash Table）</strong> 是通过哈希函数将键映射到存储位置的数据结构，实现高效查找（理想时间复杂度O(1)）。核心是解决<strong>哈希冲突</strong>，常见方法有链地址法和开放寻址法。</p>\n<p><strong>JavaScript实现简单哈希表（链地址法）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> HashTable</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">size</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 32</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">buckets</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">size</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> []);</span><span style=\"color:#A0ADA0\"> // 每个桶用数组存键值对  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">size</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> size</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 哈希函数（简单示例：ASCII码累加取模）  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  _hash</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> strKey</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> String</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> strKey</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      hash</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#B07D48\"> strKey</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">charCodeAt</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#AB5959\"> %</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">size</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 插入/更新键值对  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">_hash</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">buckets</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> existing</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">pair</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">existing</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      existing</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 更新已有键  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      bucket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">([</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">]);</span><span style=\"color:#A0ADA0\"> // 新增键值对  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 获取值  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">_hash</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">buckets</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">pair</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#AB5959\"> undefined</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 删除键  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">_hash</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">buckets</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> pairIndex</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> bucket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">findIndex</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">pair</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">pairIndex</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      bucket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">splice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">pairIndex</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> table</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> HashTable</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">table</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Alice</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">table</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">age</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">table</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">name</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // Alice  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">table</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">age</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">table</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">age</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // undefined  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点解析</strong></p>\n<ol>\n<li>\n<p><strong>哈希函数设计</strong>：</p>\n<ul>\n<li>目标：均匀分布键以减少冲突；</li>\n<li>示例中用ASCII码累加取模，实际生产环境需更复杂算法（如djb2）。</li>\n</ul>\n</li>\n<li>\n<p><strong>冲突处理</strong>：</p>\n<ul>\n<li><strong>链地址法</strong>：同一索引的键值对存入数组/链表，查找时遍历；</li>\n<li><strong>开放寻址法</strong>：冲突时探测下一个空位（如线性探测）。</li>\n</ul>\n</li>\n<li>\n<p><strong>前端应用场景</strong>：</p>\n<ul>\n<li>快速缓存数据（如React Fiber节点的缓存查询）；</li>\n<li>路由参数解析（键值对存储）；</li>\n<li>状态管理库（如Redux中的快速状态索引）。</li>\n</ul>\n</li>\n<li>\n<p><strong>性能优化</strong>：</p>\n<ul>\n<li><strong>动态扩容</strong>：当负载因子（元素数/桶数）超过阈值时，倍增桶数并重新哈希；</li>\n<li><strong>哈希函数优化</strong>：减少碰撞概率（如使用质数模数）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>哈希表与JavaScript对象的差异</strong></p>\n<ul>\n<li><strong>键类型</strong>：对象仅支持字符串/Symbol键，哈希表可支持任意类型（需序列化处理）；</li>\n<li><strong>顺序性</strong>：ES6后对象保留插入顺序，哈希表通常无序；</li>\n<li><strong>冲突处理</strong>：对象内部使用更复杂的优化策略（如V8引擎的隐藏类）。</li>\n</ul>\n<p>通过手动实现哈希表，能更深入理解数据结构原理及其在前端性能优化中的潜在价值。</p>\n"},{"title":"如何实现深度优先搜索（DFS）和广度优先搜索（BFS）？","description":"<p><strong>深度优先搜索（DFS）</strong></p>\n<p><strong>核心思想</strong>：尽可能深地遍历分支，直到末端再回溯。</p>\n<p><strong>实现方式</strong>：</p>\n<ol>\n<li><strong>递归法</strong>（隐式调用栈）：</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 处理当前节点  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li><strong>迭代法</strong>（显式使用栈）：</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 子节点逆序入栈以保证顺序正确（如左→右）  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">reverse</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>应用场景</strong>：</p>\n<ul>\n<li>DOM树遍历（如查找嵌套组件）；</li>\n<li>路径探索（如迷宫问题）；</li>\n<li>依赖解析（Webpack模块循环检测）。</li>\n</ul>\n<p><strong>广度优先搜索（BFS）</strong></p>\n<p><strong>核心思想</strong>：逐层遍历，先处理离根节点最近的节点。</p>\n<p><strong>实现方式</strong>（使用队列）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> bfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">shift</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 改用索引（如指针）优化性能  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优化队列</strong>（避免<code>shift</code>低效）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> bfsOptimized</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 手动维护指针  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">children</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>应用场景</strong>：</p>\n<ul>\n<li>最短路径问题（如社交网络好友层级）；</li>\n<li>按层级渲染组件（如树形表格）；</li>\n<li>任务调度（如异步请求并发控制）。</li>\n</ul>\n<p><strong>关键对比</strong></p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>DFS</th>\n<th>BFS</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"说说你对二分查找的理解？应用场景？","description":"","answer":"<p><strong>二分查找理解</strong></p>\n<p>二分查找是<strong>针对有序数据的高效搜索算法</strong>，核心通过 <strong>“折半淘汰”</strong> 缩小范围，时间复杂度 <strong>O(logn)</strong>。关键点：</p>\n<ol>\n<li><strong>前提条件</strong>：数据必须有序（或可间接排序）；</li>\n<li><strong>核心操作</strong>：取中间值比较，动态调整左右边界；</li>\n<li><strong>终止条件</strong>：左边界超过右边界。</li>\n</ol>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li>\n<p><strong>性能优化</strong></p>\n<ul>\n<li>日志时间戳快速定位（如监控系统按时间排序的日志）；</li>\n<li>长列表渲染时计算可视区域起始索引（虚拟列表优化）。</li>\n</ul>\n</li>\n<li>\n<p><strong>功能实现</strong></p>\n<ul>\n<li>自动补全建议词匹配（有序词库中查找前缀）；</li>\n<li>版本号比较（如语义化版本数组中找到最近的兼容版本）。</li>\n</ul>\n</li>\n<li>\n<p><strong>框架底层</strong></p>\n<ul>\n<li>React Scheduler 中任务优先级排序；</li>\n<li>Babel 插件按条件范围匹配 AST 节点。</li>\n</ul>\n</li>\n</ol>\n<p><strong>代码实现（JavaScript）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> binarySearch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">sortedArray</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> sortedArray</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> mid</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">floor</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">left</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> /</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> midVal</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> sortedArray</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">mid</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">midVal</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> mid</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 找到目标  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">midVal</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      left</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> mid</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 淘汰左半区  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      right</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> mid</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 淘汰右半区  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 未找到  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 5</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 7</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 9</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">binarySearch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 5</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 2  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>边界与变种问题</strong></p>\n<ol>\n<li><strong>重复元素</strong>：\n<ul>\n<li>查找第一个/最后一个匹配项（如LeetCode 34题）；</li>\n</ul>\n</li>\n<li><strong>非显式有序</strong>：\n<ul>\n<li>旋转排序数组查找（如LeetCode 33题）；</li>\n</ul>\n</li>\n<li><strong>抽象场景</strong>：\n<ul>\n<li>数值范围二分（如求平方根）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><strong>数值溢出</strong>：<code>mid = left + (right - left) &gt;&gt; 1</code> 替代 <code>(left+right)/2</code>；</li>\n<li><strong>浮点处理</strong>：精度控制（如保留小数位）；</li>\n<li><strong>业务结合</strong>：数据是否频繁变动（决定是否维护排序成本）。</li>\n</ul>\n<p>二分查找的价值在于 <strong>用有序性换时间效率</strong>，适合前端大数据量下的性能敏感场景。</p>\n"},{"title":"说说你对动态规划的理解？应用场景？","description":"","answer":"<p><strong>动态规划（DP）</strong> 是通过 <strong>拆解子问题+复用中间解</strong> 解决复杂问题的策略，核心是 <strong>状态转移方程</strong> 和 <strong>最优子结构</strong>。</p>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li>\n<p><strong>性能优化</strong></p>\n<ul>\n<li>虚拟DOM Diff中最小化操作（如最长公共子序列算法优化移动逻辑）；</li>\n<li>资源预加载策略（按依赖关系动态规划加载顺序）。</li>\n</ul>\n</li>\n<li>\n<p><strong>交互逻辑</strong></p>\n<ul>\n<li>富文本差异比对（如协同编辑的OT算法中状态合并）；</li>\n<li>动画路径规划（贝塞尔曲线关键帧的最优插值计算）。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据处理</strong></p>\n<ul>\n<li>文本相似度计算（如Levenshtein最短编辑距离）；</li>\n<li>动态表单校验（多步骤校验结果复用）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>代码示例（最短编辑距离）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> minEditDistance</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">strA</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> strB</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">m</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">strA</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> strB</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">m</span><span style=\"color:#AB5959\">+</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\">+</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 初始化边界条件  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> m</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">][</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> m</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">strA</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> strB</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">];</span><span style=\"color:#A0ADA0\"> // 字符相同无需操作  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">min</span><span style=\"color:#999999\">(</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">   // 删除  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">   // 插入  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#A0ADA0\">  // 替换  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        );</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">m</span><span style=\"color:#999999\">][</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">minEditDistance</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">kitten</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">sitting</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 3  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点</strong></p>\n<ul>\n<li><strong>状态定义</strong>：明确<code>dp[i][j]</code>含义（如<code>i/j</code>表示子串长度）；</li>\n<li><strong>转移方程</strong>：根据业务逻辑推导递推关系；</li>\n<li><strong>空间优化</strong>：滚动数组压缩（如二维DP转一维）。</li>\n</ul>\n<p>动态规划的价值在于 <strong>用空间换时间的高效复杂决策</strong>，适合前端高复杂度且可拆解的交互场景。</p>\n"},{"title":"说说你对贪心算法，回溯算法的理解？应用场景？","description":"<p><strong>贪心算法</strong></p>\n<p><strong>理解</strong>：每一步选择当前最优解，期望得到全局最优。<strong>特点</strong>是高效但不保证全局最优，需验证贪心策略是否成立。</p>\n<p><strong>前端应用场景</strong>：</p>\n<ol>\n<li><strong>资源分配</strong>\n<ul>\n<li>按需加载优先级（如首屏关键资源优先加载）；</li>\n<li>图片懒加载顺序（按视口距离动态计算加载顺序）。</li>\n</ul>\n</li>\n<li><strong>调度优化</strong>\n<ul>\n<li>React Scheduler 中高优先级任务插队（如用户交互优先于渲染）；</li>\n<li>请求并发控制（优先处理耗时短的任务）。</li>\n</ul>\n</li>\n<li><strong>近似解场景</strong>\n<ul>\n<li>离线缓存策略（如Service Worker按访问频率缓存资源）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>代码示例（找零问题-贪心）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> greedyCoinChange</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">coins</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> amount</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  coins</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> b</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 降序排序  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> coin</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> coins</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">amount</span><span style=\"color:#999999\"> >=</span><span style=\"color:#B07D48\"> coin</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      amount</span><span style=\"color:#AB5959\"> -=</span><span style=\"color:#B07D48\"> coin</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      count</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> amount</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 仅适用特定币种（如人民币）  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">greedyCoinChange</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 5</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#999999\">],</span><span style=\"color:#2F798A\"> 28</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 10+10+5+1+1+1 → 6枚  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>回溯算法</strong></p>\n<p><strong>理解</strong>：通过试错遍历所有可能解，走不通时回退（剪枝）。<strong>特点</strong>是暴力穷举，时间复杂度高但能找所有解。</p>\n<p><strong>前端应用场景</strong>：</p>\n<ol>\n<li><strong>组合问题</strong>\n<ul>\n<li>动态表单多条件联动校验（如某选项触发后续字段显隐组合校验）；</li>\n<li>权限路由树生成（遍历角色权限组合生成可用路由）。</li>\n</ul>\n</li>\n<li><strong>路径探索</strong>\n<ul>\n<li>低代码平台节点连线合法性校验（如禁止循环依赖）；</li>\n<li>游戏类页面解谜逻辑（如迷宫路径回溯渲染）。</li>\n</ul>\n</li>\n<li><strong>决策场景</strong>\n<ul>\n<li>可视化配置工具的条件分支生成（如嵌套<code>if-else</code>规则树）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>代码示例（全排列-回溯）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> permute</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> backtrack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> used</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">([...</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">used</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">])</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      used</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> used</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      used</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  backtrack</span><span style=\"color:#999999\">([],</span><span style=\"color:#999999\"> []);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">permute</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">]));</span><span style=\"color:#A0ADA0\"> // [[1,2,3],[1,3,2],...]  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>对比与选型</strong></p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>贪心算法</th>\n<th>回溯算法</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"冒泡排序","description":"","answer":"<p><img src=\"https://file.lsj97.com/imgs/2025_04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.webp\" alt=\"\"></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> bubbleSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]></span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">+</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]){</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        [</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">+</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\">+</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> arr</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"选择排序","description":"","answer":"<p><img src=\"https://file.lsj97.com/imgs/2025_04/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.webp\" alt=\"\"></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> selectSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> min</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">min</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        min</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> j</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    [</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">min</span><span style=\"color:#999999\">]]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">min</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"插入排序","description":"","answer":"<p><img src=\"https://file.lsj97.com/imgs/2025_04/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.webp\" alt=\"\"></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> insertSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 从第 2 个元素开始遍历序列</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    //记录要插入的目标元素</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    //从 target 所在位置向前遍历，直至找到一个比目标元素小的元素，目标元素插入到该元素之后的位置</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      //移动前一个元素的位置，将其向后移动一个位置</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      j</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"快速排序","description":"","answer":"<p><img src=\"https://file.lsj97.com/imgs/2025_04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.webp\" alt=\"\"></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> arr</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> []</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> []</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      left</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">])</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\">else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      right</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">])</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [...</span><span style=\"color:#59873A\">quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">),</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">)]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> start</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\"> >=</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> start</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      left</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> >=</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      right</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      let</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> pivot</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> start</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  quickSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> array</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"归并排序","description":"","answer":"<p><img src=\"https://file.lsj97.com/imgs/2025_04/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.webp\" alt=\"\"></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> MergeSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> len</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 当每个子序列中仅有1个元素时返回</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">len</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 将给定的列表分为两半</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">floor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">len</span><span style=\"color:#AB5959\"> /</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> MergeSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> MergeSort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> merge</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> merge</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> r</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 从 left 和 right 区域中各个取出第一个元素，比较它们的大小</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> r</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 将较小的元素添加到result中，然后从较小元素所在的区域内取出下一个元素，继续进行比较；</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">r</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        l</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">r</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        r</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 如果 left 或者 right 有一方为空，则直接将另一方的所有元素依次添加到result中</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">concat</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">concat</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">r</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"反转链表","description":"","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reverseLinkList</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> pre</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">cur</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    cur</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> pre</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    pre</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cur</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    cur</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> next</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"二叉树的遍历  ","description":"","answer":"<p><strong>二叉树遍历的核心类型</strong></p>\n<ol>\n<li><strong>前序遍历（根→左→右）</strong></li>\n<li><strong>中序遍历（左→根→右）</strong></li>\n<li><strong>后序遍历（左→右→根）</strong></li>\n<li><strong>层次遍历（BFS逐层访问）</strong></li>\n</ol>\n<p><strong>代码实现（JavaScript）</strong></p>\n<ol>\n<li>前序遍历</li>\n</ol>\n<p><strong>递归实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">),</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">preorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">)];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>迭代实现（栈模拟递归）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> preorderIterative</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 右先入栈，保证左先出栈  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li>中序遍历</li>\n</ol>\n<p><strong>递归实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> inorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [...</span><span style=\"color:#59873A\">inorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">),</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">inorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">)];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>迭代实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> inorderIterative</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [],</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> curr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">curr</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">curr</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">curr</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      curr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> curr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 左子树全部入栈  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    curr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">curr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    curr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> curr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 转向右子树  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"3\">\n<li>后序遍历</li>\n</ol>\n<p><strong>递归实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> postorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [...</span><span style=\"color:#59873A\">postorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">),</span><span style=\"color:#999999\"> ...</span><span style=\"color:#59873A\">postorder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">),</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>迭代实现（逆序技巧）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> postorderIterative</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">stack</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 调整入栈顺序，结果逆序即为后序  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    stack</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reverse</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"4\">\n<li>层次遍历（BFS队列实现）</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> levelOrder</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">queue</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> levelSize</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> level</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> levelSize</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">shift</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      level</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      queue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">level</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">level</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li>\n<p><strong>DOM树操作</strong></p>\n<ul>\n<li><strong>前序</strong>：克隆DOM树结构（先复制当前节点再处理子节点）</li>\n<li><strong>后序</strong>：批量移除子节点（先清空子节点再删除父节点）</li>\n</ul>\n</li>\n<li>\n<p><strong>组件树处理</strong></p>\n<ul>\n<li><strong>中序</strong>：表单联动校验（如左侧树控件选中后更新中间表单）</li>\n<li><strong>层次遍历</strong>：按优先级渲染组件（如弹窗层级管理）</li>\n</ul>\n</li>\n<li>\n<p><strong>状态管理</strong></p>\n<ul>\n<li><strong>后序</strong>：Redux中间件执行顺序（先子中间件后父级）</li>\n<li><strong>前序</strong>：依赖注入（先父组件提供数据再子组件消费）</li>\n</ul>\n</li>\n<li>\n<p><strong>性能优化</strong></p>\n<ul>\n<li><strong>中序</strong>：AST语法树分析（Babel插件转换代码）</li>\n<li><strong>层次遍历</strong>：虚拟列表可视区域计算（分块渲染）</li>\n</ul>\n</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ol>\n<li><strong>递归风险</strong>：深层次树可能导致栈溢出，建议用迭代法处理大数据量；</li>\n<li><strong>遍历顺序</strong>：前/中/后序本质是 <strong>处理当前节点的时机不同</strong>；</li>\n<li><strong>框架应用</strong>：React Fiber架构的遍历策略结合了DFS和优先级调度。</li>\n</ol>\n<p>遍历方法的选择需结合业务目标，例如需要 <strong>快速定位叶子节点</strong> 时优先考虑后序，<strong>按层级渲染</strong> 则必须用BFS。</p>\n"},{"title":"二叉树搜索","description":"<p><strong>二叉搜索树（BST）核心特性</strong></p>\n<ol>\n<li><strong>有序性</strong>：左子树节点值 &lt; 根节点值 &lt; 右子树节点值；</li>\n<li><strong>高效性</strong>：查找/插入/删除平均时间复杂度 <strong>O(logn)</strong>（树平衡时）；</li>\n<li><strong>中序遍历</strong>：可直接输出有序数据序列。</li>\n</ol>\n<p><strong>基本操作实现（JavaScript）</strong></p>\n<ol>\n<li>查找</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> searchBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    ?</span><span style=\"color:#59873A\"> searchBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    :</span><span style=\"color:#59873A\"> searchBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li>插入</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> insertBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> TreeNode</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> insertBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> insertBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 忽略重复值  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"3\">\n<li>删除（最复杂）</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> deleteBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> deleteBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> deleteBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 找到目标节点  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 无左子树  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\">  // 无右子树  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 找右子树最小节点替代  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> minNode</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">minNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> minNode</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> minNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> minNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> deleteBST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">root</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> minNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 删除替代节点  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> root</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li>\n<p><strong>数据快速检索</strong></p>\n<ul>\n<li>大型表单中按用户ID快速查询（替代数组遍历的O(n)）；</li>\n<li>前端缓存有序数据（如商品价格区间筛选）。</li>\n</ul>\n</li>\n<li>\n<p><strong>框架底层优化</strong></p>\n<ul>\n<li>React Fiber任务优先级调度（按过期时间组织任务树）；</li>\n<li>富文本编辑器光标位置管理（按文本偏移量组织节点）。</li>\n</ul>\n</li>\n<li>\n<p><strong>可视化工具</strong></p>\n<ul>\n<li>组织架构图按层级排序渲染；</li>\n<li>时间轴工具按时间戳排序事件节点。</li>\n</ul>\n</li>\n</ol>\n<p><strong>BST的局限性及解决方案</strong></p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>后果</th>\n<th>解决方案</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"二叉树diff算法","description":"<p><strong>二叉树 Diff 算法核心思路</strong></p>\n<p>二叉树 Diff 的目标是 <strong>高效识别两棵树的结构与内容差异</strong>，通常用于虚拟 DOM 优化或数据同步。其实现需解决两个关键问题：</p>\n<ol>\n<li><strong>节点比对</strong>：判断节点是否相同（通常依赖唯一 key 或值）；</li>\n<li><strong>差异定位</strong>：识别增删改移操作。</li>\n</ol>\n<p><strong>基础实现（递归比对）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> diffTrees</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> changes</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 节点删除  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">newNode</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">REMOVE</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> node</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> changes</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 节点新增  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">ADD</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> node</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> changes</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 节点值更新  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">UPDATE</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 递归比对子树  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> leftDiff</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> diffTrees</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> rightDiff</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> diffTrees</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">changes</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">leftDiff</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">rightDiff</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优化策略</strong></p>\n<ol>\n<li>\n<p><strong>Key 标识</strong>：</p>\n<ul>\n<li>为节点添加唯一标识（如 <code>key</code>），避免仅依赖位置比对，支持跨层级移动检测。</li>\n</ul>\n</li>\n<li>\n<p><strong>哈希映射</strong>：</p>\n<ul>\n<li>预处理新树生成 <code>key-to-node</code> 哈希表，快速定位旧节点在新树中的位置。</li>\n</ul>\n</li>\n<li>\n<p><strong>动态规划（LCS）</strong>：</p>\n<ul>\n<li>通过最长公共子序列算法（如 Myers 算法）最小化操作步骤，减少节点移动成本。</li>\n</ul>\n</li>\n</ol>\n<p><strong>优化示例（哈希映射加速查找）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> optimizedDiff</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldRoot</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newRoot</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  traverse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldRoot</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> node</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> diffHelper</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldRoot</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newRoot</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> diffHelper</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> changes</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">ADD</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> node</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#B07D48\">newNode</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">REMOVE</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> node</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // Key 不同视为替换  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">REPLACE</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">oldNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">UPDATE</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 递归处理子节点  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> oldLeft</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newLeft</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> oldRight</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> oldNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> newRight</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> newNode</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> leftMatch</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> oldLeft</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> newLeft</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> newLeft</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">newLeft</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> rightMatch</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> oldRight</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> newRight</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> newRight</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">newRight</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(...</span><span style=\"color:#59873A\">diffHelper</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldLeft</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> leftMatch</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    changes</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(...</span><span style=\"color:#59873A\">diffHelper</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">oldRight</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> rightMatch</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> oldMap</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> changes</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li>\n<p><strong>虚拟 DOM 更新</strong>：</p>\n<ul>\n<li>React Reconciler 通过 Diff 算法比对 Fiber 树，生成 DOM 操作指令；</li>\n<li>Vue 3 的 Block Tree 优化静态节点比对。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据同步</strong>：</p>\n<ul>\n<li>配置系统对比新旧 JSON 树生成增量更新；</li>\n<li>协同编辑中合并多人操作（如 OT 算法）。</li>\n</ul>\n</li>\n<li>\n<p><strong>可视化工具</strong>：</p>\n<ul>\n<li>流程图版本差异对比；</li>\n<li>低代码平台组件树状态回滚。</li>\n</ul>\n</li>\n</ol>\n<p><strong>性能瓶颈与突破</strong></p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>解决方案</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"翻转二叉树","description":"<p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [4,2,7,1,3,6,9]</span></span>\n<span class=\"line\"><span>输出：[4,7,2,9,6,3,1]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [2,1,3]</span></span>\n<span class=\"line\"><span>输出：[2,3,1]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = []</span></span>\n<span class=\"line\"><span>输出：[]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/invert-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">226. 翻转二叉树</a></p>\n<hr>\n","answer":""},{"title":"K个一组翻转链表","description":"<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p>\n<p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1,2,3,4,5], k = 2</span></span>\n<span class=\"line\"><span>输出：[2,1,4,3,5]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1,2,3,4,5], k = 3</span></span>\n<span class=\"line\"><span>输出：[3,2,1,4,5]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener noreferrer\">25. K 个一组翻转链表</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> reverseKGroup</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> k</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">head</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#AB5959\"> null||</span><span style=\"color:#B07D48\">k</span><span style=\"color:#AB5959\">===</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">b</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> k</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">b</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> newHead</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> reverse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> reverseKGroup</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">k</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> reverse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> pre</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cur</span><span style=\"color:#AB5959\">!==</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      let</span><span style=\"color:#B07D48\"> next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cur</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> pre</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      pre</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cur</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cur</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> next</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> pre</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> newHead</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"删除排序链表中的重复元素","description":"<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1,1,2]</span></span>\n<span class=\"line\"><span>输出：[1,2]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/04/list2.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1,1,2,3,3]</span></span>\n<span class=\"line\"><span>输出：[1,2,3]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener noreferrer\">83. 删除排序链表中的重复元素</a></p>\n<hr>\n","answer":""},{"title":"搜索二维矩阵","description":"<p>给你一个满足下述两条属性的 <code>m x n</code> 整数矩阵：</p>\n<ul>\n<li>每行中的整数从左到右按非严格递增顺序排列。</li>\n<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n<p>给你一个整数 <code>target</code> ，如果 <code>target</code> 在矩阵中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/mat2.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span></span>\n<span class=\"line\"><span>输出：false</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/search-a-2d-matrix/\" target=\"_blank\" rel=\"noopener noreferrer\">74. 搜索二维矩阵</a></p>\n<hr>\n","answer":""},{"title":"环形链表","description":"<p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>\n<p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [3,2,0,-4], pos = 1</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span>解释：链表中有一个环，其尾部连接到第二个节点。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1,2], pos = 0</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span>解释：链表中有一个环，其尾部连接到第一个节点。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：head = [1], pos = -1</span></span>\n<span class=\"line\"><span>输出：false</span></span>\n<span class=\"line\"><span>解释：链表中没有环。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener noreferrer\">141. 环形链表</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> isRingLinkList</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">head</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> fast</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> slow</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> head</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">fast</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> fast</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    fast</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> fast</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    slow</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> slow</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">next</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">fast</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> slow</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#1E754F\"> true</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#1E754F\"> false</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"斐波那契数列","description":"<p><strong>斐波那契数</strong> （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <strong>0</strong> 和 <strong>1</strong> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>F(0) = 0，F(1) = 1</span></span>\n<span class=\"line\"><span>F(n) = F(n - 1) + F(n - 2)，其中 n > 1</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>给定 <code>n</code> ，请计算 <code>F(n)</code> 。</p>\n<p>答案需要取模 1e9+7(1000000007) ，如计算初始结果为：1000000008，请返回 1。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：n = 2</span></span>\n<span class=\"line\"><span>输出：1</span></span>\n<span class=\"line\"><span>解释：F(2) = F(1) + F(0) = 1 + 0 = 1</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：n = 3</span></span>\n<span class=\"line\"><span>输出：2</span></span>\n<span class=\"line\"><span>解释：F(3) = F(2) + F(1) = 1 + 1 = 2</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：n = 4</span></span>\n<span class=\"line\"><span>输出：3</span></span>\n<span class=\"line\"><span>解释：F(4) = F(3) + F(2) = 2 + 1 = 3</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener noreferrer\">509. 斐波那契数</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">//普通递归</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> fib</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> fib</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#59873A\"> fib</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">//尾递归</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> fib2</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> )</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#59873A\"> fib2</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">a</span><span style=\"color:#AB5959\">+</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">//动态规划</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> fib3</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> n</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        temp</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> temp</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"青蛙跳台阶问题","description":"<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<p><a href=\"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/\" target=\"_blank\" rel=\"noopener noreferrer\">LCR 127. 跳跃训练</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> jumpFloor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#2F798A\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#2F798A\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#59873A\"> jumpFloor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\">+</span><span style=\"color:#59873A\">jumpFloor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">number</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"电话号码组合","description":"<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png\" alt=\"img\"></p>\n<p><a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener noreferrer\">17. 电话号码的字母组合</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> letterCombinations</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">digits</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">digits</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> phoneMap</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">2</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">abc</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">3</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">def</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">4</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">ghi</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">5</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">jkl</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">6</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">mno</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">7</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">pqrs</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">8</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">tuv</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">9</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">wxyz</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">combination</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> nextDigits</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">nextDigits</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">combination</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> digit</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> nextDigits</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> letters</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> phoneMap</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">digit</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> letters</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">combination</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> letters</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> nextDigits</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> digits</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"全排列","description":"<p>给定一个不含重复数字的整数数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。可以 <strong>按任意顺序</strong> 返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [1,2,3]</span></span>\n<span class=\"line\"><span>输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [0,1]</span></span>\n<span class=\"line\"><span>输出：[[0,1],[1,0]]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [1]</span></span>\n<span class=\"line\"><span>输出：[[1]]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></p>\n<hr>\n","answer":""},{"title":"字符串所有排列组合","description":"<p><a href=\"https://leetcode.cn/problems/permutation-i-lcci/\" target=\"_blank\" rel=\"noopener noreferrer\">面试题 08.07. 无重复字符串的排列组合</a></p>\n<p><a href=\"https://leetcode.cn/problems/permutation-ii-lcci/\" target=\"_blank\" rel=\"noopener noreferrer\">面试题 08.08. 有重复字符串的排列组合</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> getPermutation</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">str</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> []</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> dfs</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">includes</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">str</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]))</span><span style=\"color:#1E754F\"> continue</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">])</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  dfs</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> res</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"最长回文子串","description":"<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的 回文 子串。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：s = \"babad\"</span></span>\n<span class=\"line\"><span>输出：\"bab\"</span></span>\n<span class=\"line\"><span>解释：\"aba\" 同样是符合题意的答案。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：s = \"cbbd\"</span></span>\n<span class=\"line\"><span>输出：\"bb</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/longest-palindromic-substring/\" target=\"_blank\" rel=\"noopener noreferrer\">5. 最长回文子串</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> longestPalindrome</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> maxRes</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> maxStr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> str1</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> palindrome</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">str1</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> maxRes</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      maxStr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> str1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      maxRes</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> str1</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> palindrome</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> l</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> r</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> r</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">l</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">r</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      l</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      r</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">l</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> r</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> maxStr</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"验证回文串","description":"<p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p>\n<p>字母和数字都属于字母数字字符。</p>\n<p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入: s = \"A man, a plan, a canal: Panama\"</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span>解释：\"amanaplanacanalpanama\" 是回文串。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：s = \"race a car\"</span></span>\n<span class=\"line\"><span>输出：false</span></span>\n<span class=\"line\"><span>解释：\"raceacar\" 不是回文串。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：s = \" \"</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span>解释：在移除非字母数字字符之后，s 是一个空字符串 \"\" 。</span></span>\n<span class=\"line\"><span>由于空字符串正着反着读都一样，所以是回文串。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/valid-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">125. 验证回文串</a></p>\n<hr>\n","answer":""},{"title":"有效的括号","description":"<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>每个右括号都有一个对应的相同类型的左括号。</li>\n</ol>\n<p><strong>示例 1：</strong></p>\n<p>**输入：**s = &quot;()&quot;</p>\n<p>**输出：**true</p>\n<p><strong>示例 2：</strong></p>\n<p>**输入：**s = &quot;()[]{}&quot;</p>\n<p>**输出：**true</p>\n<p><strong>示例 3：</strong></p>\n<p>**输入：**s = &quot;(]&quot;</p>\n<p>**输出：**false</p>\n<p><strong>示例 4：</strong></p>\n<p>**输入：**s = &quot;([])&quot;</p>\n<p>**输出：**true</p>\n<p><a href=\"https://leetcode.cn/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener noreferrer\">有效的括号</a></p>\n<hr>\n","answer":"<pre><code class=\"language-java\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function isValidBrackets(str) {</span></span>\n<span class=\"line\"><span>  const map = new Map([['(', ')'], ['[', ']'], ['{', '}'],])</span></span>\n<span class=\"line\"><span>  const stack = []</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>  for (let i = 0; i &#x3C; str.length; i++) {</span></span>\n<span class=\"line\"><span>    if (map.has(str[i])) {</span></span>\n<span class=\"line\"><span>      stack.push(str[i])</span></span>\n<span class=\"line\"><span>    } else if (map.get(stack[stack.length - 1]) === str[i]) {</span></span>\n<span class=\"line\"><span>      stack.pop()</span></span>\n<span class=\"line\"><span>    } else {</span></span>\n<span class=\"line\"><span>      return false</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>  return stack.length === 0</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n"},{"title":"最长递增子序列","description":"<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p>\n<p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [10,9,2,5,3,7,101,18]</span></span>\n<span class=\"line\"><span>输出：4</span></span>\n<span class=\"line\"><span>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [0,1,0,3,2,3]</span></span>\n<span class=\"line\"><span>输出：4</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [7,7,7,7,7,7,7]</span></span>\n<span class=\"line\"><span>输出：1</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">300. 最长递增子序列</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> LIS</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\"> []</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [[</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]]];</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    _update</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> _update</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> line</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> tail</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> line</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">line</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">tail</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">line</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        break</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\">else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> tail</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        results</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">results</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"滑动窗口最大值","description":"<p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 <em>滑动窗口中的最大值</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span></span>\n<span class=\"line\"><span>输出：[3,3,5,5,6,7]</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>滑动窗口的位置                最大值</span></span>\n<span class=\"line\"><span>---------------               -----</span></span>\n<span class=\"line\"><span>[1  3  -1] -3  5  3  6  7       3</span></span>\n<span class=\"line\"><span> 1 [3  -1  -3] 5  3  6  7       3</span></span>\n<span class=\"line\"><span> 1  3 [-1  -3  5] 3  6  7       5</span></span>\n<span class=\"line\"><span> 1  3  -1 [-3  5  3] 6  7       5</span></span>\n<span class=\"line\"><span> 1  3  -1  -3 [5  3  6] 7       6</span></span>\n<span class=\"line\"><span> 1  3  -1  -3  5 [3  6  7]      7</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [1], k = 1</span></span>\n<span class=\"line\"><span>输出：[1]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/sliding-window-maximum/\" target=\"_blank\" rel=\"noopener noreferrer\">239. 滑动窗口最大值</a></p>\n<hr>\n","answer":""},{"title":"两数之和","description":"<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [2,7,11,15], target = 9</span></span>\n<span class=\"line\"><span>输出：[0,1]</span></span>\n<span class=\"line\"><span>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [3,2,4], target = 6</span></span>\n<span class=\"line\"><span>输出：[1,2]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [3,3], target = 6</span></span>\n<span class=\"line\"><span>输出：[0,1]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/two-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">1. 两数之和</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> towSum</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> towSum2</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> len</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> len</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">map</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">])</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#AB5959\"> undefined</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">            return</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">map</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]),</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            map</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">target</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> nums</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"三数之和","description":"<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p>**注意：**答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [-1,0,1,2,-1,-4]</span></span>\n<span class=\"line\"><span>输出：[[-1,-1,2],[-1,0,1]]</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span></span>\n<span class=\"line\"><span>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span></span>\n<span class=\"line\"><span>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span></span>\n<span class=\"line\"><span>不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span></span>\n<span class=\"line\"><span>注意，输出的顺序和三元组的顺序并不重要。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [0,1,1]</span></span>\n<span class=\"line\"><span>输出：[]</span></span>\n<span class=\"line\"><span>解释：唯一可能的三元组和不为 0 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [0,0,0]</span></span>\n<span class=\"line\"><span>输出：[[0,0,0]]</span></span>\n<span class=\"line\"><span>解释：唯一可能的三元组和为 0 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/3sum/\" target=\"_blank\" rel=\"noopener noreferrer\">15. 三数之和</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> findThree</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 先将数组从小到大排序</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 跳过重复的arr[i]值, 比如[2, 1, 1],跳过第二个1</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">])</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> left</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 双端指针left、right</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> right</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      let</span><span style=\"color:#B07D48\"> sum</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">sum</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        right</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">sum</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        left</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">        // 先取arr[left]，然后left++, 两步合成一步；arr[right--]同样的逻辑</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">([</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">]]);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">left</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">          // 跳过重复的arr[left]值,</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          left</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">right</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">          // 跳过重复的arr[right]值</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          right</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"买卖股票的最佳时机","description":"<p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>\n<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>\n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：[7,1,5,3,6,4]</span></span>\n<span class=\"line\"><span>输出：5</span></span>\n<span class=\"line\"><span>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span></span>\n<span class=\"line\"><span>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：prices = [7,6,4,3,1]</span></span>\n<span class=\"line\"><span>输出：0</span></span>\n<span class=\"line\"><span>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"noopener noreferrer\">121. 买卖股票的最佳时机</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> bestTimeBuyStock</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prices</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> minPrice</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> Infinity</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> maxProfit</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> prices</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">prices</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> minPrice</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      minPrice</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> prices</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">prices</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> minPrice</span><span style=\"color:#999999\"> ></span><span style=\"color:#B07D48\"> maxProfit</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      maxProfit</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> prices</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> minPrice</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> maxProfit</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>其他版本买股票问题：<a href=\"https://zhuanlan.zhihu.com/p/136811810\" target=\"_blank\" rel=\"noopener noreferrer\">买卖股票的最佳时机</a></p>\n"},{"title":"计算多个数组的交集","description":"<p>给你一个二维整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 是由 <strong>不同</strong> 正整数组成的一个非空数组，按 <strong>升序排列</strong> 返回一个数组，数组中的每个元素在 <code>nums</code> <strong>所有数组</strong> 中都出现过。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]</span></span>\n<span class=\"line\"><span>输出：[3,4]</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>nums[0] = [3,1,2,4,5]，nums[1] = [1,2,3,4]，nums[2] = [3,4,5,6]，在 nums 中每个数组中都出现的数字是 3 和 4 ，所以返回 [3,4] 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [[1,2,3],[4,5,6]]</span></span>\n<span class=\"line\"><span>输出：[]</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>不存在同时出现在 nums[0] 和 nums[1] 的整数，所以返回一个空列表 [] 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/intersection-of-multiple-arrays/\" target=\"_blank\" rel=\"noopener noreferrer\">2248. 多个数组求交集</a></p>\n<hr>\n","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> getIntersection</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">arrs</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> arrs</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">pre</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> pre</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">includes</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"背包问题","description":"<p>给定容量为 <code>C</code> 的背包和 <code>N</code> 个物品，每个物品有重量 <code>w[i]</code> 和价值 <code>v[i]</code>，每个物品只能选或不选。目标是总重量不超容量的前提下，最大化总价值。</p>\n<p><a href=\"https://www.lintcode.com/problem/125/description\" target=\"_blank\" rel=\"noopener noreferrer\">LintCode 链接</a></p>\n<p><a href=\"https://leetcode.cn/problems/partition-equal-subset-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">416. 分割等和子集</a></p>\n<hr>\n<p><strong>01背包问题解析</strong></p>\n<p><strong>问题描述</strong>：给定容量为 <code>C</code> 的背包和 <code>N</code> 个物品，每个物品有重量 <code>w[i]</code> 和价值 <code>v[i]</code>，每个物品只能选或不选。目标是总重量不超容量的前提下，最大化总价值。</p>\n<p><strong>动态规划解法（最优解）</strong></p>\n<p><strong>核心思想</strong>：通过状态转移记录子问题最优解，逐步递推全局最优。  <strong>实现步骤</strong></p>\n<ol>\n<li>\n<p><strong>状态定义</strong></p>\n<ul>\n<li><code>dp[i][j]</code>：前 <code>i</code> 个物品在容量 <code>j</code> 下的最大价值。</li>\n<li><strong>空间优化</strong>：使用一维数组 <code>dp[j]</code>，逆序遍历容量避免覆盖。</li>\n</ul>\n</li>\n<li>\n<p><strong>状态转移方程</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>dp[j] = max(dp[j], dp[j - w[i]] + v[i])  （需 j >= w[i]）  </span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>代码实现</strong></p>\n</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> knapsack01</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> >=</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">];</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">max</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">15</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 20</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">knapsack01</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 35（选物品0和2，重量1+4=5超出？需修正示例）</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><em>注：示例中实际应为容量4，选物品3（重量3，价值20）和物品0（重量1，总价值35）？需要核对数据。</em></p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><strong>时间复杂度</strong>：<code>O(N*C)</code>，适合中等规模数据；</li>\n<li><strong>空间复杂度</strong>：<code>O(C)</code>，通过逆序压缩空间；</li>\n<li><strong>保证全局最优</strong>，但无法处理极大容量（如 <code>C &gt; 1e5</code>）。</li>\n</ul>\n<p><strong>贪心算法（近似解，不保证最优）</strong></p>\n<p><strong>核心思想</strong>：每一步选择当前最优策略（如价值密度最高），但无法保证全局最优。  <strong>实现步骤</strong></p>\n<ol>\n<li><strong>排序物品</strong>：按价值密度（<code>价值/重量</code>）降序排列；</li>\n<li><strong>贪心选择</strong>：依次尝试装入当前最优物品，直到容量不足。</li>\n</ol>\n<p><strong>代码实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> greedyKnapsack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> w</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> v</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#998418\"> ratio</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\">/</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\"> }));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ratio</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ratio</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> totalValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> remaining</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> remaining</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      totalValue</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      remaining</span><span style=\"color:#AB5959\"> -=</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">remaining</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> break</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> totalValue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">greedyKnapsack</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">],</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">15</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">20</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">30</span><span style=\"color:#999999\">]));</span><span style=\"color:#A0ADA0\"> // 45（选物品0和2，总重量5？需修正示例）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><em>注：示例数据需调整，例如 <code>C=5</code>，选物品0（重量1，价值15）和物品2（重量4，价值30），总价值45。</em></p>\n<p><strong>局限性</strong>：</p>\n<ul>\n<li><strong>反例</strong>：\n<ul>\n<li>容量为3，物品1（重量2，价值3）、物品2（重量3，价值4）。</li>\n<li>贪心按密度选物品1（密度1.5），总价值3；实际最优解选物品2，价值4。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：仅当物品按价值密度排序且组合无冲突时可能最优（极少情况）。</li>\n</ul>\n<p><strong>对比与选型</strong></p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>动态规划</th>\n<th>贪心算法</th>\n</tr>\n</thead>\n</table>\n","answer":"<p><strong>01背包问题解析</strong></p>\n<p><strong>问题描述</strong>：给定容量为 <code>C</code> 的背包和 <code>N</code> 个物品，每个物品有重量 <code>w[i]</code> 和价值 <code>v[i]</code>，每个物品只能选或不选。目标是总重量不超容量的前提下，最大化总价值。</p>\n<p><strong>动态规划解法（最优解）</strong></p>\n<p><strong>核心思想</strong>：通过状态转移记录子问题最优解，逐步递推全局最优。  <strong>实现步骤</strong></p>\n<ol>\n<li>\n<p><strong>状态定义</strong></p>\n<ul>\n<li><code>dp[i][j]</code>：前 <code>i</code> 个物品在容量 <code>j</code> 下的最大价值。</li>\n<li><strong>空间优化</strong>：使用一维数组 <code>dp[j]</code>，逆序遍历容量避免覆盖。</li>\n</ul>\n</li>\n<li>\n<p><strong>状态转移方程</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>dp[j] = max(dp[j], dp[j - w[i]] + v[i])  （需 j >= w[i]）  </span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>代码实现</strong></p>\n</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> knapsack01</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> >=</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">];</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">max</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> dp</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">15</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 20</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">knapsack01</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 35（选物品0和2，重量1+4=5超出？需修正示例）</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><em>注：示例中实际应为容量4，选物品3（重量3，价值20）和物品0（重量1，总价值35）？需要核对数据。</em></p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><strong>时间复杂度</strong>：<code>O(N*C)</code>，适合中等规模数据；</li>\n<li><strong>空间复杂度</strong>：<code>O(C)</code>，通过逆序压缩空间；</li>\n<li><strong>保证全局最优</strong>，但无法处理极大容量（如 <code>C &gt; 1e5</code>）。</li>\n</ul>\n<p><strong>贪心算法（近似解，不保证最优）</strong></p>\n<p><strong>核心思想</strong>：每一步选择当前最优策略（如价值密度最高），但无法保证全局最优。  <strong>实现步骤</strong></p>\n<ol>\n<li><strong>排序物品</strong>：按价值密度（<code>价值/重量</code>）降序排列；</li>\n<li><strong>贪心选择</strong>：依次尝试装入当前最优物品，直到容量不足。</li>\n</ol>\n<p><strong>代码实现</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> greedyKnapsack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">C</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> weights</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span><span style=\"color:#B07D48\"> w</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> v</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#998418\"> ratio</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> values</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\">/</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\"> }));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  items</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ratio</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ratio</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> totalValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> remaining</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> C</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> items</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> remaining</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      totalValue</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      remaining</span><span style=\"color:#AB5959\"> -=</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">w</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">remaining</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> break</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> totalValue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">greedyKnapsack</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">],</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">15</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">20</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">30</span><span style=\"color:#999999\">]));</span><span style=\"color:#A0ADA0\"> // 45（选物品0和2，总重量5？需修正示例）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><em>注：示例数据需调整，例如 <code>C=5</code>，选物品0（重量1，价值15）和物品2（重量4，价值30），总价值45。</em></p>\n<p><strong>局限性</strong>：</p>\n<ul>\n<li><strong>反例</strong>：\n<ul>\n<li>容量为3，物品1（重量2，价值3）、物品2（重量3，价值4）。</li>\n<li>贪心按密度选物品1（密度1.5），总价值3；实际最优解选物品2，价值4。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>：仅当物品按价值密度排序且组合无冲突时可能最优（极少情况）。</li>\n</ul>\n<p><strong>对比与选型</strong></p>\n<p>| 特性           | 动态规划                 | 贪心算法                     |\n|</p>\n"},{"title":"N皇后问题","description":"<p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p>\n<p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p>\n<p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：n = 4</span></span>\n<span class=\"line\"><span>输出：[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]</span></span>\n<span class=\"line\"><span>解释：如上图所示，4 皇后问题存在两个不同的解法。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：n = 1</span></span>\n<span class=\"line\"><span>输出：[[\"Q\"]]</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N 皇后</a></p>\n<hr>\n","answer":"<p><strong>解法核心：回溯算法</strong></p>\n<p><strong>步骤拆解</strong>：</p>\n<ol>\n<li><strong>逐行放置</strong>：每行仅放一个皇后，递归处理下一行。</li>\n<li><strong>冲突检测</strong>：检查当前列、主对角线（行-列）、副对角线（行+列）是否已被占用。</li>\n<li><strong>剪枝优化</strong>：通过集合记录已占用的列和对角线，避免全量遍历检查。</li>\n</ol>\n<p><strong>JavaScript代码实现</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> solveNQueens</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 初始化列、主对角线、副对角线占用集合  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> cols</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> diag1</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">  // 主对角线：row - col  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> diag2</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">  // 副对角线：row + col  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 回溯函数  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> backtrack</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">row</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">row</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 生成棋盘格式（如 [\".Q..\",\"...Q\"]）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> board</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\"> =></span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">.</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">repeat</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Q</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">.</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">repeat</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">board</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> d1</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> row</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> d2</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> row</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> col</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 冲突检测  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">cols</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> diag1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d1</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> diag2</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d2</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 选择当前列  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cols</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      diag1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      diag2</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d2</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 递归下一行  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">row</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 撤销选择  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cols</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">col</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      diag1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      diag2</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">d2</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  backtrack</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> []);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：n=4 → 输出2种解法  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">solveNQueens</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键优化点</strong></p>\n<ol>\n<li><strong>冲突检测</strong>：\n<ul>\n<li>列冲突 → <code>cols</code> 集合；</li>\n<li>主对角线 → <code>row - col</code> 的差值唯一；</li>\n<li>副对角线 → <code>row + col</code> 的和唯一。</li>\n</ul>\n</li>\n<li><strong>时间复杂度</strong>：最坏情况 <code>O(N!)</code>，但剪枝大幅减少实际计算量。</li>\n<li><strong>空间复杂度</strong>：<code>O(N)</code>（递归栈深度 + 集合存储）。</li>\n</ol>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li><strong>可视化工具</strong>：\n<ul>\n<li>棋盘交互式演示（如拖拽皇后动态校验合法性）；</li>\n<li>算法教学动画生成（回溯过程可视化）。</li>\n</ul>\n</li>\n<li><strong>游戏开发</strong>：\n<ul>\n<li>解谜类游戏关卡设计（自动生成N皇后布局）；</li>\n<li>棋类AI冲突检测逻辑。</li>\n</ul>\n</li>\n<li><strong>性能测试</strong>：\n<ul>\n<li>递归与剪枝策略的浏览器执行效率对比。</li>\n</ul>\n</li>\n</ol>\n<p><strong>变种问题</strong></p>\n<ol>\n<li><strong>统计解法数量</strong>：无需记录路径，仅计数。</li>\n<li><strong>随机合法解</strong>：在回溯过程中随机选择有效列，快速找到一个解。</li>\n<li><strong>超大N优化</strong>：位运算压缩状态（如用二进制表示列和对角线占用）。</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><strong>数据不可变性</strong>：递归时传递深拷贝或回溯时及时撤销状态；</li>\n<li><strong>N较大时的性能</strong>：浏览器中N&gt;15可能导致栈溢出或超时，需分帧计算或Web Worker处理；</li>\n<li><strong>输出格式适配</strong>：按题目要求返回数组格式（如LeetCode标准）。</li>\n</ul>\n<p>N皇后问题是回溯算法的经典案例，理解其冲突检测与状态管理机制对解决其他组合问题（如数独、排列组合）具有重要参考价值。</p>\n"},{"title":"找出数组中第K大的数","description":"<p>给你一个字符串数组 <code>nums</code> 和一个整数 <code>k</code> 。<code>nums</code> 中的每个字符串都表示一个不含前导零的整数。</p>\n<p>返回 <code>nums</code> 中表示第 <code>k</code> 大整数的字符串。</p>\n<p>**注意：**重复的数字在统计时会视为不同元素考虑。例如，如果 <code>nums</code> 是 <code>[&quot;1&quot;,&quot;2&quot;,&quot;2&quot;]</code>，那么 <code>&quot;2&quot;</code> 是最大的整数，<code>&quot;2&quot;</code> 是第二大的整数，<code>&quot;1&quot;</code> 是第三大的整数。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [\"3\",\"6\",\"7\",\"10\"], k = 4</span></span>\n<span class=\"line\"><span>输出：\"3\"</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>nums 中的数字按非递减顺序排列为 [\"3\",\"6\",\"7\",\"10\"]</span></span>\n<span class=\"line\"><span>其中第 4 大整数是 \"3\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [\"2\",\"21\",\"12\",\"1\"], k = 3</span></span>\n<span class=\"line\"><span>输出：\"2\"</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>nums 中的数字按非递减顺序排列为 [\"1\",\"2\",\"12\",\"21\"]</span></span>\n<span class=\"line\"><span>其中第 3 大整数是 \"2\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums = [\"0\",\"0\"], k = 2</span></span>\n<span class=\"line\"><span>输出：\"0\"</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>nums 中的数字按非递减顺序排列为 [\"0\",\"0\"]</span></span>\n<span class=\"line\"><span>其中第 2 大整数是 \"0\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/find-the-kth-largest-integer-in-the-array/\" target=\"_blank\" rel=\"noopener noreferrer\">1985. 找出数组中的第 K 大整数</a></p>\n<hr>\n","answer":""},{"title":"无重复字符的最长子串","description":"<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长连续子字符串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入: s = \"abcabcbb\"</span></span>\n<span class=\"line\"><span>输出: 3 </span></span>\n<span class=\"line\"><span>解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入: s = \"bbbbb\"</span></span>\n<span class=\"line\"><span>输出: 1</span></span>\n<span class=\"line\"><span>解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入: s = \"pwwkew\"</span></span>\n<span class=\"line\"><span>输出: 3</span></span>\n<span class=\"line\"><span>解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。</span></span>\n<span class=\"line\"><span>     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/wtcaE1/\" target=\"_blank\" rel=\"noopener noreferrer\">LCR 016. 无重复字符的最长子串</a></p>\n<hr>\n","answer":""},{"title":"寻找两个正序数组的中位数","description":"","answer":"<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>\n<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums1 = [1,3], nums2 = [2]</span></span>\n<span class=\"line\"><span>输出：2.00000</span></span>\n<span class=\"line\"><span>解释：合并数组 = [1,2,3] ，中位数 2</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums1 = [1,2], nums2 = [3,4]</span></span>\n<span class=\"line\"><span>输出：2.50000</span></span>\n<span class=\"line\"><span>解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\" target=\"_blank\" rel=\"noopener noreferrer\">4. 寻找两个正序数组的中位数</a></p>\n"},{"title":"洗牌算法","description":"<p>洗牌算法是将原来的数组进行打散，使原数组的某个数在打散后的数组中的每个位置上等概率的出现，即为乱序算法。</p>\n<hr>\n","answer":""},{"title":"图的最小生成树","description":"<p><strong>最小生成树（Minimum Spanting Tree, MST）的核心概念</strong></p>\n<p>最小生成树是 <strong>连通加权无向图中权值和最小的生成树</strong>，需满足：</p>\n<ol>\n<li>包含所有顶点；</li>\n<li>无环且边数 = 顶点数 - 1；</li>\n<li>总权重最小。</li>\n</ol>\n<p><strong>算法实现（JavaScript）</strong></p>\n<ol>\n<li><strong>Prim算法（贪心思想，适合稠密图）</strong></li>\n</ol>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>从任一顶点开始，初始化最小堆（按边权排序）；</li>\n<li>每次取堆顶最小边，将新顶点加入生成树，并更新相邻边入堆；</li>\n<li>重复直到所有顶点连通。</li>\n</ol>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> primMST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">graph</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> graph</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> visited</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">fill</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">false</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> minHeap</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> PriorityQueue</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 从顶点0开始  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  visited</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  graph</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> neighbor</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> minHeap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> from</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> to</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> neighbor</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weight</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">result</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weight</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> minHeap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">visited</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">])</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weight</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    visited</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    graph</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">nextWeight</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> nextNeighbor</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">nextWeight</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> !</span><span style=\"color:#B07D48\">visited</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">nextNeighbor</span><span style=\"color:#999999\">])</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        minHeap</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> from</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> to</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> nextNeighbor</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> weight</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> nextWeight</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol start=\"2\">\n<li><strong>Kruskal算法（并查集，适合稀疏图）</strong></li>\n</ol>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>将所有边按权重升序排序；</li>\n<li>按序选择边，若两端点不在同一集合（不形成环），则合并集合；</li>\n<li>重复直到选够n-1条边。</li>\n</ol>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> UnionFind</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">size</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">from</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> length</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> size</span><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">_</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  find</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  union</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> y</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> rootX</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> rootY</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">y</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">rootX</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> rootY</span><span style=\"color:#999999\">)</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">parent</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">rootY</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> rootX</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> kruskalMST</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">edges</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  edges</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">weight</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> uf</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> UnionFind</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> edge</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> edges</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> from</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> weight</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> edge</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">uf</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">from</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> uf</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">find</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">to</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      result</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">edge</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      uf</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">union</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">from</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> to</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">result</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> break</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>前端应用场景</strong></p>\n<ol>\n<li><strong>网络拓扑优化</strong>：\n<ul>\n<li>可视化工具中计算服务器节点间的最优布线方案；</li>\n<li>低代码平台组件依赖的最小连接路径生成。</li>\n</ul>\n</li>\n<li><strong>游戏开发</strong>：\n<ul>\n<li>地图生成（如村庄间道路的最低成本规划）；</li>\n<li>资源运输路径的动态计算（避免绕路）。</li>\n</ul>\n</li>\n<li><strong>数据分析</strong>：\n<ul>\n<li>用户关系图谱中的关键连接挖掘；</li>\n<li>前端监控系统依赖项的最小覆盖分析。</li>\n</ul>\n</li>\n</ol>\n<p><strong>对比与选型</strong></p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Prim算法</th>\n<th>Kruskal算法</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"数据流中的中位数","description":"<p><strong>中位数</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p>\n<ul>\n<li>例如 <code>arr = [2,3,4]</code> 的中位数是 <code>3</code> 。</li>\n<li>例如 <code>arr = [2,3]</code> 的中位数是 <code>(2 + 3) / 2 = 2.5</code> 。</li>\n</ul>\n<p>实现 MedianFinder 类:</p>\n<ul>\n<li><code>MedianFinder() </code>初始化 <code>MedianFinder</code> 对象。</li>\n<li><code>void addNum(int num)</code> 将数据流中的整数 <code>num</code> 添加到数据结构中。</li>\n<li><code>double findMedian()</code> 返回到目前为止所有元素的中位数。与实际答案相差 <code>10-5</code> 以内的答案将被接受。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入</span></span>\n<span class=\"line\"><span>[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]</span></span>\n<span class=\"line\"><span>[[], [1], [2], [], [3], []]</span></span>\n<span class=\"line\"><span>输出</span></span>\n<span class=\"line\"><span>[null, null, null, 1.5, null, 2.0]</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>解释</span></span>\n<span class=\"line\"><span>MedianFinder medianFinder = new MedianFinder();</span></span>\n<span class=\"line\"><span>medianFinder.addNum(1);    // arr = [1]</span></span>\n<span class=\"line\"><span>medianFinder.addNum(2);    // arr = [1, 2]</span></span>\n<span class=\"line\"><span>medianFinder.findMedian(); // 返回 1.5 ((1 + 2) / 2)</span></span>\n<span class=\"line\"><span>medianFinder.addNum(3);    // arr[1, 2, 3]</span></span>\n<span class=\"line\"><span>medianFinder.findMedian(); // return 2.0</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/find-median-from-data-stream/\" target=\"_blank\" rel=\"noopener noreferrer\">295. 数据流的中位数</a></p>\n<hr>\n","answer":""},{"title":"字符串相加","description":"<p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回。</p>\n<p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：num1 = \"11\", num2 = \"123\"</span></span>\n<span class=\"line\"><span>输出：\"134\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：num1 = \"456\", num2 = \"77\"</span></span>\n<span class=\"line\"><span>输出：\"533\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：num1 = \"0\", num2 = \"0\"</span></span>\n<span class=\"line\"><span>输出：\"0\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/add-strings/\" target=\"_blank\" rel=\"noopener noreferrer\">415. 字符串相加</a></p>\n<hr>\n","answer":""},{"title":"合并两个有序数组","description":"<p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>\n<p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>\n<p>**注意：**最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span></span>\n<span class=\"line\"><span>输出：[1,2,2,3,5,6]</span></span>\n<span class=\"line\"><span>解释：需要合并 [1,2,3] 和 [2,5,6] 。</span></span>\n<span class=\"line\"><span>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums1 = [1], m = 1, nums2 = [], n = 0</span></span>\n<span class=\"line\"><span>输出：[1]</span></span>\n<span class=\"line\"><span>解释：需要合并 [1] 和 [] 。</span></span>\n<span class=\"line\"><span>合并结果是 [1] 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span></span>\n<span class=\"line\"><span>输出：[1]</span></span>\n<span class=\"line\"><span>解释：需要合并的数组是 [] 和 [1] 。</span></span>\n<span class=\"line\"><span>合并结果是 [1] 。</span></span>\n<span class=\"line\"><span>注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/merge-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">88. 合并两个有序数组</a></p>\n<hr>\n","answer":""},{"title":"编辑距离","description":"<p>给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em> 。</p>\n<p>你可以对一个单词进行如下三种操作：</p>\n<ul>\n<li>插入一个字符</li>\n<li>删除一个字符</li>\n<li>替换一个字符</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：word1 = \"horse\", word2 = \"ros\"</span></span>\n<span class=\"line\"><span>输出：3</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>horse -> rorse (将 'h' 替换为 'r')</span></span>\n<span class=\"line\"><span>rorse -> rose (删除 'r')</span></span>\n<span class=\"line\"><span>rose -> ros (删除 'e')</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：word1 = \"intention\", word2 = \"execution\"</span></span>\n<span class=\"line\"><span>输出：5</span></span>\n<span class=\"line\"><span>解释：</span></span>\n<span class=\"line\"><span>intention -> inention (删除 't')</span></span>\n<span class=\"line\"><span>inention -> enention (将 'i' 替换为 'e')</span></span>\n<span class=\"line\"><span>enention -> exention (将 'n' 替换为 'x')</span></span>\n<span class=\"line\"><span>exention -> exection (将 'n' 替换为 'c')</span></span>\n<span class=\"line\"><span>exection -> execution (插入 'u')</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/edit-distance/\" target=\"_blank\" rel=\"noopener noreferrer\">72. 编辑距离</a></p>\n<hr>\n","answer":""},{"title":"路径总和","description":"<p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span></span>\n<span class=\"line\"><span>输出：true</span></span>\n<span class=\"line\"><span>解释：等于目标和的根节点到叶节点路径如上图所示。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [1,2,3], targetSum = 5</span></span>\n<span class=\"line\"><span>输出：false</span></span>\n<span class=\"line\"><span>解释：树中存在两条根节点到叶子节点的路径：</span></span>\n<span class=\"line\"><span>(1 --> 2): 和为 3</span></span>\n<span class=\"line\"><span>(1 --> 3): 和为 4</span></span>\n<span class=\"line\"><span>不存在 sum = 5 的根节点到叶子节点的路径。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [], targetSum = 0</span></span>\n<span class=\"line\"><span>输出：false</span></span>\n<span class=\"line\"><span>解释：由于树是空的，所以不存在根节点到叶子节点的路径。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/path-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">路径总和</a></p>\n<hr>\n","answer":""},{"title":"只出现一次的数字","description":"<p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p>\n<p><strong>示例 1 ：</strong></p>\n<p>**输入：**nums = [2,2,1]</p>\n<p>**输出：**1</p>\n<p><strong>示例 2 ：</strong></p>\n<p>**输入：**nums = [4,1,2,1,2]</p>\n<p>**输出：**4</p>\n<p><strong>示例 3 ：</strong></p>\n<p>**输入：**nums = [1]</p>\n<p>**输出：**1</p>\n<p><a href=\"https://leetcode.cn/problems/single-number/\" target=\"_blank\" rel=\"noopener noreferrer\">只出现一次的数字</a></p>\n<hr>\n","answer":""},{"title":"二叉树的最近公共祖先","description":"<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\" rel=\"noopener noreferrer\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span></span>\n<span class=\"line\"><span>输出：3</span></span>\n<span class=\"line\"><span>解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" alt=\"img\"></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span></span>\n<span class=\"line\"><span>输出：5</span></span>\n<span class=\"line\"><span>解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>输入：root = [1,2], p = 1, q = 2</span></span>\n<span class=\"line\"><span>输出：1</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最近公共祖先</a></p>\n<hr>\n","answer":""},{"title":"x 的平方根 ","description":"<p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p>\n<p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p>\n<p>**注意：**不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p>\n<p><a href=\"https://leetcode.cn/problems/sqrtx/\" target=\"_blank\" rel=\"noopener noreferrer\">x 的平方根 </a></p>\n<hr>\n","answer":""}]
