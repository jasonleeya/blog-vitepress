[{"title":"你对前端工程化有什么了解？","answer":"<p>前端工程化是通过规范化和工具链提升开发效率的系统方法，核心包括：</p>\n<ol>\n<li><strong>模块化开发</strong>\n<ul>\n<li>组件化（Vue/React组件）</li>\n<li>模块打包（Webpack/Vite/Rollup）</li>\n</ul>\n</li>\n<li><strong>自动化流程</strong>\n<ul>\n<li>持续集成（CI/CD Pipeline）</li>\n<li>自动化测试（Jest/Cypress）</li>\n</ul>\n</li>\n<li><strong>规范化体系</strong>\n<ul>\n<li>代码规范（ESLint/Prettier）</li>\n<li>Git工作流（Commitlint/Husky）</li>\n</ul>\n</li>\n<li><strong>性能优化</strong>\n<ul>\n<li>构建产物优化（Tree Shaking/Code Splitting）</li>\n<li>资源处理（CDN/Image Compression）</li>\n</ul>\n</li>\n<li><strong>工具链支撑</strong>\n<ul>\n<li>脚手架（Vue CLI/CRA）</li>\n<li>低代码平台（内部工具开发）</li>\n</ul>\n</li>\n</ol>\n"},{"title":"为什么现代前端应用需要打包工具进行打包编译？","answer":"<p>现代前端应用需要打包工具进行打包编译的主要原因有以下几点：</p>\n<ol>\n<li>**模块化管理：**现代前端应用通常采用模块化的开发方式，将代码划分为多个模块，每个模块具有独立的功能和依赖关系。打包工具可以将这些模块进行分析，将它们打包成一个或多个静态文件，方便管理和维护。</li>\n<li>**解决浏览器兼容性问题：**不同的浏览器对于 JavaScript 和 CSS 的支持程度不同，而且随着新特性的不断出现，旧版浏览器可能无法完全支持。打包工具可以通过转译、压缩和兼容性处理等手段，将当前前端代码转化为浏览器可识别和运行的代码，解决兼容性问题。</li>\n<li>**静态资源处理和优化：**现代前端应用涉及大量的静态资源，如图片、字体等。打包工具可以对这些资源进行处理和优化，如图片压缩、字体文件打包等，以减小资源文件的体积，提高页面的加载速度和性能。</li>\n<li>**代码分割和按需加载：**打包工具可以将应用程序拆分成多个小块，实现代码分割和按需加载。这样可以实现懒加载，只在需要时加载特定的代码块，提高页面的加载速度。</li>\n<li>**开发环境支持：**打包工具通常提供开发服务器和热模块替换（HMR）等功能，方便开发人员进行开发和调试。开发服务器可以实时预览代码变化，HMR 可以在修改代码后只替换修改的部分，而不是整个页面刷新，提高开发效率。</li>\n<li><strong>提升性能</strong>：打包工具可以通过代码优化、压缩和混淆等技术手段，减小文件体积，提升应用程序的加载速度和执行效率。</li>\n<li>**支持多种前端技术：**现代前端应用通常使用多种前端技术和语言，如JavaScript、CSS、TypeScript、Sass等。打包工具可以集成这些技术，并提供相应的编译、转译和处理功能，使开发人员能够更轻松地使用这些技术。</li>\n<li>**自动化工作流程：**打包工具可以配合其他构建工具和自动化任务运行器，如Webpack配合Grunt或Gulp，实现自动化的构建和部署流程。这可以减少手动操作，提高开发效率和代码质量。</li>\n<li>**第三方库管理：**现代前端应用通常使用大量的第三方库和框架，这些库可能包含多个文件和依赖关系。打包工具可以自动管理这些库的依赖关系，并将它们打包为单个文件，减少网络请求和提高代码的可维护性。</li>\n<li>**高度可定制化：**打包工具通常提供丰富的插件和配置选项，允许开发人员根据项目需求进行定制。可以灵活配置打包过程中的各种处理和优化方式，以满足项目的具体需求。</li>\n</ol>\n<p>总结 - 现代前端应用需要打包工具进行打包编译的原因是为了： <strong>实现模块化管理、解决兼容性问题、静态资源处理和优化、代码分割和按需加载、开发环境支持、性能提升、多技术支持、自动化工作流程、第三方库管理和可定制化等方面的需求</strong>。</p>\n"},{"title":"package.json 配置了解多少？","answer":"<p><code>package.json</code> 是项目配置的核心文件，关键配置项包括：</p>\n<ol>\n<li>\n<p><strong>基础标识</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">name</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">项目名（npm唯一性）</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">version</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">语义化版本号</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">private</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#A0ADA0\">  // 禁止发布私有项目</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>脚本管理</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">scripts</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">dev</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">vite</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">build</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">vite build</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">preview</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">vite preview --port 4173</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">prepare</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">husky install</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#A0ADA0\"> // 生命周期钩子</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>依赖控制</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dependencies</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">vue</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">^3.3.0</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#A0ADA0\">  // ^允许次版本升级</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">devDependencies</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">eslint</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">~8.56.0</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#A0ADA0\"> // ~仅补丁升级</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">peerDependencies</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span><span style=\"color:#A0ADA0\"> // 插件开发必备</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">react</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">>=16.8</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>工程化配置</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">type</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">module</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">,       </span><span style=\"color:#A0ADA0\">// 启用ES模块</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">main</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dist/index.cjs</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">, </span><span style=\"color:#A0ADA0\">// CommonJS入口</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">module</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dist/index.mjs</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">, </span><span style=\"color:#A0ADA0\">// ES模块入口</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">exports</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span><span style=\"color:#A0ADA0\">  // 条件导出</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">.</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">    \"</span><span style=\"color:#998418\">import</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">./dist/index.mjs</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">    \"</span><span style=\"color:#998418\">require</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">./dist/index.cjs</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">files</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">[</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">dist</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">]</span><span style=\"color:#393A34\">,    </span><span style=\"color:#A0ADA0\">// 限定发布目录</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">sideEffects</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#1E754F\">false</span><span style=\"color:#A0ADA0\">  // 支持Tree Shaking</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>环境约束</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">engines</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">node</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">>=18.0.0</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">npm</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">>=9.0.0</span><span style=\"color:#B5695977\">\"</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"谈谈你对Webpack的看法？","answer":"<p>Webpack 是一个现代 JavaScript 应用的静态模块打包工具，广泛应用于前端开发中。</p>\n<p>以下是 Webpack 的一些重要知识点：</p>\n<p><strong>1. 模块化打包</strong></p>\n<ul>\n<li><strong>核心功能</strong>：Webpack 的主要功能是将应用中的不同模块（如 JavaScript、CSS、图片等）打包成一个或多个输出文件，支持 CommonJS、AMD 和 ES6 模块等多种模块化方案。</li>\n</ul>\n<p><strong>2. 配置灵活性</strong></p>\n<ul>\n<li><strong>高度可定制</strong>：Webpack 通过配置文件提供了极大的灵活性，允许开发者根据项目需求定制构建流程和优化策略，支持多种配置选项和插件。</li>\n</ul>\n<p><strong>3. 代码分割与懒加载</strong></p>\n<ul>\n<li><strong>性能优化</strong>：Webpack 支持代码分割（Code Splitting），可以将应用分割为多个 chunk，从而实现按需加载，提高加载性能，尤其适合大型应用。</li>\n</ul>\n<p><strong>4. 热模块替换 (HMR)</strong></p>\n<ul>\n<li><strong>开发体验提升</strong>：Webpack 的热模块替换功能允许开发者在修改代码时无需刷新页面即可看到更改，提高了开发效率和用户体验。</li>\n</ul>\n<p><strong>5. 插件和 Loader 生态</strong></p>\n<ul>\n<li><strong>扩展性</strong>：Webpack 拥有丰富的插件和 Loader 生态，可以处理各种类型的文件和资源，支持 CSS 预处理器、图片压缩、代码优化等多种功能。</li>\n</ul>\n<p><strong>6. Tree Shaking</strong></p>\n<ul>\n<li><strong>死代码消除</strong>：Webpack 支持树摇（Tree Shaking）技术，可以在打包时自动移除未使用的代码，减小最终文件体积，提高性能。</li>\n</ul>\n<p><strong>7. 兼容性和社区支持</strong></p>\n<ul>\n<li><strong>广泛应用</strong>：Webpack 在业界得到了广泛的应用，拥有活跃的社区和丰富的文档资源，开发者可以很容易找到帮助和学习材料。</li>\n</ul>\n<p><strong>8. 适用场景</strong></p>\n<ul>\n<li><strong>多样性</strong>：Webpack 适用于各种前端项目，尤其是大型应用、单页应用（SPA）和需要复杂构建流程的项目。</li>\n</ul>\n"},{"title":"Webpack 有哪些常见配置？","answer":"<p>Webpack 的配置文件（通常为 <code>webpack.config.js</code>）中包含多种常见配置项，以下是一些主要的配置选项：</p>\n<p><strong>1. Entry</strong></p>\n<ul>\n<li>\n<p>入口：</p>\n<p>定义应用的入口点，可以是单个文件或多个文件。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">entry</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/index.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. Output</strong></p>\n<ul>\n<li>\n<p>输出：</p>\n<p>配置打包后文件的输出位置和文件名。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">output</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  filename</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">bundle.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  path</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">__dirname</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">dist</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>3. Loaders</strong></p>\n<ul>\n<li>\n<p>文件处理：</p>\n<p>使用 loaders 处理非 JavaScript 文件（如 CSS、图片、字体等）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">module</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  rules</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      test</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> /</span><span style=\"color:#BDA437\">\\.</span><span style=\"color:#AB5E3F\">css</span><span style=\"color:#1E754F\">$</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      use</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">style-loader</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">css-loader</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      test</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> /</span><span style=\"color:#BDA437\">\\.</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5E3F\">png</span><span style=\"color:#AB5959\">|</span><span style=\"color:#AB5E3F\">jpg</span><span style=\"color:#AB5959\">|</span><span style=\"color:#AB5E3F\">gif</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\">$</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      use</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">file-loader</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>4. Plugins</strong></p>\n<ul>\n<li>\n<p>插件：</p>\n<p>用于扩展 Webpack 的功能，执行各种任务（如压缩、优化等）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">plugins</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  new</span><span style=\"color:#59873A\"> HtmlWebpackPlugin</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    template</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/index.html</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  new</span><span style=\"color:#59873A\"> CleanWebpackPlugin</span><span style=\"color:#999999\">(),</span></span>\n<span class=\"line\"><span style=\"color:#999999\">],</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>5. Mode</strong></p>\n<ul>\n<li>\n<p>模式：</p>\n<p>指定构建模式（<code>development</code>）或<code>production</code>，影响默认的优化设置。</p>\n<pre><code><div class=\"language- \"><span class=\"lang\"></span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>mode: 'development', // or 'production'</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>6. DevServer</strong></p>\n<ul>\n<li>\n<p>开发服务器：</p>\n<p>配置 Webpack Dev Server，用于本地开发时的实时刷新和热模块替换。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">devServer</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  contentBase</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./dist</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  hot</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>7. Resolve</strong></p>\n<ul>\n<li>\n<p>模块解析</p>\n<p>：配置模块解析的选项，包括别名和文件扩展名。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  extensions</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">.jsx</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  alias</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">@</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\">: </span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">__dirname</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">src</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>8. Optimization</strong></p>\n<ul>\n<li>\n<p>优化设置：</p>\n<p>配置打包优化选项，如代码分割和压缩。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">optimization</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  splitChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">all</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  minimize</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>9. Devtool</strong></p>\n<ul>\n<li>\n<p>源映射</p>\n<p>：配置调试源映射，帮助开发者调试代码。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">devtool</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">source-map</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>10. Performance</strong></p>\n<ul>\n<li>\n<p>性能提示</p>\n<p>：配置性能提示，帮助识别打包后的文件大小。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">performance</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  hints</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">warning</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  maxAssetSize</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 100000</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 100kb</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n"},{"title":"谈谈你对Vite的看法?","answer":"<p>Vite 是新一代前端构建工具，通过原生 ESM 和预构建依赖实现极速开发体验。</p>\n<p><strong>核心优势</strong>：</p>\n<ol>\n<li><strong>开发效率</strong>：冷启动比 Webpack 快 10 倍+，HMR 更新毫秒级响应</li>\n<li><strong>构建机制</strong>：生产环境用 Rollup 打包，支持 Tree Shaking/Code Splitting</li>\n<li><strong>生态兼容</strong>：开箱支持 TS/JSX/CSS Modules，无缝衔接 Vue/React 框架</li>\n</ol>\n"},{"title":"Vite 的主要特点有哪些？","answer":"<ul>\n<li><strong>快速冷启动</strong>：通过预构建依赖和按需编译源码，无需全量打包16。</li>\n<li><strong>高效热更新（HMR）</strong>：仅更新修改的模块，保留应用状态47。</li>\n<li><strong>原生 ESM 支持</strong>：直接使用浏览器加载模块，减少构建步骤36。</li>\n<li><strong>丰富的插件生态</strong>：兼容 Rollup 插件体系，支持扩展功能（如 TypeScript、CSS 预处理器）</li>\n</ul>\n"},{"title":"Vite的主要配置项有哪些？","answer":"<p>Vite 的核心配置集中在 <code>vite.config.js</code> 中，主要分为开发服务、构建优化、插件集成三类配置。</p>\n<p><strong>关键配置项</strong>：</p>\n<ol>\n<li>\n<p><strong>入口与基础路径</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#59873A\"> defineConfig</span><span style=\"color:#999999\">({</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  root</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">       // 项目根目录  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  base</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/admin/</span><span style=\"color:#B5695977\">'</span><span style=\"color:#A0ADA0\">      // 部署基础路径  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">})</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>开发服务器</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">server</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  port</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">          // 端口号  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  proxy</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\">             // 接口代理  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">/api</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\">: </span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">http://localhost:8000</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  open</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#A0ADA0\">           // 自动打开浏览器  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>生产构建</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">build</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  outDir</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">dist</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">      // 输出目录  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  assetsDir</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">static</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 静态资源路径  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  rollupOptions</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\">     // 深度定制构建  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    output</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      manualChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\">  // 自定义代码分割  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        lodash</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">lodash-es</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">]</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>插件体系</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">plugins</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  vue</span><span style=\"color:#999999\">(),</span><span style=\"color:#A0ADA0\">               // 框架插件  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  visualizer</span><span style=\"color:#999999\">()</span><span style=\"color:#A0ADA0\">         // 包分析插件  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">]</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>模块解析</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  alias</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\">             // 路径别名  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">@</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\">: </span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">__dirname</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">src</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":" Webpack和Vite的核心差异？","answer":"<p>核心差异在于构建机制——Webpack 基于打包器模式，Vite 采用原生 ESM + 预构建。</p>\n<p><strong>具体对比</strong>：</p>\n<ol>\n<li><strong>开发环境</strong>\n<ul>\n<li>Webpack：启动时打包全部模块，冷启动慢</li>\n<li>Vite：浏览器直接加载 ESM，按需编译，秒级启动</li>\n</ul>\n</li>\n<li><strong>热更新（HMR）</strong>\n<ul>\n<li>Webpack：全量更新模块链，速度随项目增大下降</li>\n<li>Vite：基于 ESM 的精准 HMR，毫秒级响应</li>\n</ul>\n</li>\n<li><strong>生产构建</strong>\n<ul>\n<li>Webpack：自带打包优化（Tree Shaking/Code Split）</li>\n<li>Vite：底层使用 Rollup，构建更高效精简</li>\n</ul>\n</li>\n<li><strong>配置复杂度</strong>\n<ul>\n<li>Webpack：需手动配置 Loader/Plugin 链</li>\n<li>Vite：约定优于配置，开箱支持 TS/JSX/CSS 模块</li>\n</ul>\n</li>\n<li><strong>生态适配</strong>\n<ul>\n<li>Webpack：插件生态庞大（10,000+ 插件）</li>\n<li>Vite：兼容 Rollup 插件，专注现代浏览器特性</li>\n</ul>\n</li>\n</ol>\n<p><strong>选型建议</strong>：中小项目优先 Vite 提效，大型存量项目渐进迁移。</p>\n"},{"title":"Webpack的Loader和Plugin的区别是什么？","answer":"<p>Loader是文件加载器（处理单个文件转换），Plugin是扩展器（监听事件改变打包流程）。</p>\n<p>具体来说：</p>\n<ul>\n<li><strong>Loader</strong> 在模块加载时处理文件，如将Sass转CSS、ES6转ES5，针对文件内容进行转换。</li>\n<li><strong>Plugin</strong> 通过Webpack事件钩子介入整个打包生命周期，实现更复杂功能，如生成HTML、压缩代码、提取公共模块等。</li>\n</ul>\n"},{"title":"如何编写一个Webpack Loader？","answer":"<p>编写一个Webpack Loader的要点：</p>\n<ol>\n<li><strong>导出一个处理函数</strong>：Loader本质是一个接收源码的函数，用<code>module.exports</code>导出</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">source</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理逻辑</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">export default </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">stringify</span><span style=\"color:#999999\">(</span><span style=\"color:#B56959\">source</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol>\n<li><strong>处理输入输出</strong>：函数接收源文件内容，处理后返回JavaScript代码（通常为字符串）</li>\n<li><strong>支持链式调用</strong>：通过<code>this.callback()</code>返回多个结果（源码、sourceMap等）时需显式调用</li>\n<li><strong>异步处理</strong>（可选）：需要异步操作时使用<code>const callback = this.async()</code></li>\n</ol>\n<p>示例：一个简单的文本替换Loader：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">source</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> source</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">world</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">loader</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>配置使用：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// webpack.config.js</span></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  module</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    rules</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [{</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      test</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> /</span><span style=\"color:#BDA437\">\\.</span><span style=\"color:#AB5E3F\">txt</span><span style=\"color:#1E754F\">$</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      use</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">path/to/your-loader.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>核心思想：接收源码→转换→输出有效JS模块。注意保持职责单一，可通过多个Loader组合完成复杂需求。</p>\n"},{"title":"如何编写一个Webpack Plugin？","answer":"<p>编写Webpack Plugin的核心步骤：</p>\n<ol>\n<li><strong>创建类结构</strong>：插件本质是包含<code>apply</code>方法的类</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyPlugin</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  apply</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">compiler</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 挂载钩子</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol>\n<li><strong>使用Tapable钩子</strong>：通过compiler.hooks选择生命周期阶段（如<code>emit</code>/<code>compile</code>）</li>\n<li><strong>操作compilation对象</strong>：处理模块、资源等核心编译对象</li>\n</ol>\n<p>示例：生成版本说明文件的插件</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> VersionPlugin</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  apply</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">compiler</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    compiler</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hooks</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">emit</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">tap</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">VersionPlugin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> compilation</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      compilation</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">assets</span><span style=\"color:#999999\">[</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">version.txt</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        source</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">v1.0.0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        size</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#2F798A\"> 6</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>配置使用：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// webpack.config.js</span></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  plugins</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> VersionPlugin</span><span style=\"color:#999999\">()]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>关键点：</p>\n<ul>\n<li>通过Compiler对象访问webpack环境</li>\n<li>通过Compilation修改构建内容</li>\n<li>使用Tapable实现事件钩子</li>\n<li>异步处理用tapAsync/tapPromise</li>\n</ul>\n"},{"title":"什么是Polyfill？","answer":"<p>Polyfill是用于实现浏览器原生API缺失功能的代码垫片。</p>\n<p><strong>具体描述</strong>：通过JavaScript代码模拟浏览器未原生支持的新特性（如ES6+语法、Fetch API等），例如用<code>Object.defineProperty</code>实现ES5特性。典型应用场景包括让低版本浏览器兼容现代API，常用方案有core-js、polyfill.io动态加载等，通常配合构建工具按需引入。</p>\n"},{"title":"解释Babel的工作原理","answer":"<p><strong>工作原理</strong>：</p>\n<ol>\n<li><strong>解析</strong>（Parsing）：通过<code>@babel/parser</code>将源码转换为抽象语法树（AST）</li>\n<li><strong>转换</strong>（Transform）：利用<code>@babel/traverse</code>遍历AST，通过插件（如<code>@babel/preset-env</code>）修改语法树</li>\n<li><strong>生成</strong>（Generate）：用<code>@babel/generator</code>将转换后的AST重新生成目标代码</li>\n</ol>\n"},{"title":"babel 的工作流程是怎么样的？","answer":"<p>Babel 是一个广泛使用的 JavaScript 编译器，用于将现代 JavaScript 代码（ES6+）转译为兼容旧版浏览器和环境的 JavaScript 代码。</p>\n<p>Babel 的工作流程可以分为以下几个步骤：</p>\n<p><strong>1. 解析（Parsing）</strong></p>\n<p><strong>任务</strong>：将源代码解析成抽象语法树（AST）。</p>\n<ul>\n<li><strong>输入</strong>：原始的 JavaScript 源代码。</li>\n<li><strong>处理</strong>：Babel 使用解析器（如 <code>@babel/parser</code>）将源代码转换为抽象语法树（AST），AST 是一种树形结构，描述了代码的语法和结构。</li>\n<li><strong>输出</strong>：AST。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> code</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">const x = 1;</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ast</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> parser</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">parse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">code</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 转换（Transformation）</strong></p>\n<p><strong>任务</strong>：基于配置将 AST 转换成新的 AST。</p>\n<ul>\n<li><strong>输入</strong>：原始 AST 和 Babel 插件。</li>\n<li><strong>处理</strong>：在这个阶段，Babel 会应用配置中指定的插件来对 AST 进行转换。每个插件实现了一种特定的转换规则（例如，将箭头函数转换为普通函数）。</li>\n<li><strong>输出</strong>：转换后的 AST。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> transformedAst</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> transform</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">ast</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> plugins</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">@babel/plugin-transform-arrow-functions</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 生成（Code Generation）</strong></p>\n<p><strong>任务</strong>：将转换后的 AST 生成最终的 JavaScript 代码。</p>\n<ul>\n<li><strong>输入</strong>：转换后的 AST。</li>\n<li><strong>处理</strong>：Babel 使用代码生成器（如 <code>@babel/generator</code>）将转换后的 AST 重新生成 JavaScript 代码。</li>\n<li><strong>输出</strong>：最终的 JavaScript 源代码。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> output</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> generator</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">generate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">transformedAst</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> code</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> output</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">code</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>4. 其他处理（Optional）</strong></p>\n<p>根据具体配置，Babel 可能还会进行一些额外的处理：</p>\n<ul>\n<li><strong>源码映射（Source Maps）</strong>：生成映射文件，以帮助调试原始代码和转换后的代码之间的关系。</li>\n<li><strong>插件和预设的处理</strong>：应用特定的 Babel 插件和预设，以处理不同的 JavaScript 特性和语法。</li>\n<li><strong>环境配置</strong>：根据不同的运行环境生成不同的输出（如浏览器或 Node.js）。</li>\n</ul>\n<p><strong>完整工作流程</strong></p>\n<ol>\n<li><strong>解析</strong>：将源代码解析为 AST。</li>\n<li><strong>转换</strong>：对 AST 进行转换，生成新的 AST。</li>\n<li><strong>生成</strong>：将转换后的 AST 生成最终的 JavaScript 代码。</li>\n<li><strong>其他处理</strong>：可选的额外处理，如源码映射和环境配置。</li>\n</ol>\n<p><strong>配置</strong></p>\n<p>Babel 的工作流程受到配置文件（如 <code>.babelrc</code>、<code>babel.config.js</code>）的控制。配置文件定义了 Babel 使用的插件、预设、源代码映射等设置。</p>\n<p><strong>示例 <code>.babelrc</code> 配置</strong></p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">presets</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">@babel/preset-env</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">],</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">plugins</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">@babel/plugin-transform-arrow-functions</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>通过这种配置，Babel 将使用 <code>@babel/preset-env</code> 预设将现代 JavaScript 代码转换为兼容旧版浏览器的代码，并应用 <code>@babel/plugin-transform-arrow-functions</code> 插件将箭头函数转换为普通函数。</p>\n<p>Babel 使得开发者能够使用最新的 JavaScript 特性，同时确保代码在各种环境中兼容运行。</p>\n"},{"title":"如何编写一个bable插件？","answer":"<p>编写Babel插件的核心步骤：</p>\n<ol>\n<li><strong>创建AST操作函数</strong>：基于访问者模式（Visitor）定义对特定AST节点的处理逻辑</li>\n</ol>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#1E754F\"> default</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    visitor</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      VariableDeclarator</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">        // 处理变量声明节点</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol>\n<li><strong>操作AST节点</strong>：通过<code>@babel/types</code>创建/修改节点（如转换箭头函数）</li>\n</ol>\n<p>示例：将<code>var</code>变量名反转的插件</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">visitor</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  VariableDeclarator</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">path</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">node</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    id</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> id</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">reverse</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">join</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>配置使用：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// .babelrc</span></span>\n<span class=\"line\"><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">  \"</span><span style=\"color:#B56959\">plugins</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">[</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">./your-plugin.js</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>关键点：</p>\n<ul>\n<li>通过AST节点类型（如FunctionDeclaration）定位代码</li>\n<li>使用Path对象操作节点关系</li>\n<li>需熟悉Babel AST规范（可用https://astexplorer.net/ 辅助）</li>\n</ul>\n"},{"title":"Webpack 怎么配置多入口应用， 并实现公共依赖的提取？","answer":"<p>可以通过以下步骤实现：</p>\n<p><strong>1. 配置多入口</strong></p>\n<p>在 Webpack 配置中，可以定义多个入口点，每个入口对应一个输出文件。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> require</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">path</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  entry</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    app1</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app1/index.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    app2</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app2/index.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  output</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    filename</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">[name].bundle.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 使用入口名称生成文件名</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    path</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> path</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">__dirname</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">dist</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 提取公共依赖</strong></p>\n<p>使用 <code>SplitChunksPlugin</code> 来提取公共依赖，确保不同入口点共享的模块只打包一次，减少重复代码。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // ...其他配置</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  optimization</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    splitChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">all</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 从所有块中提取公共模块</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      cacheGroups</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">        vendor</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">          test</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> /</span><span style=\"color:#999999\">[</span><span style=\"color:#BDA437\">\\\\</span><span style=\"color:#A65E2B\">/</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5E3F\">node_modules</span><span style=\"color:#999999\">[</span><span style=\"color:#BDA437\">\\\\</span><span style=\"color:#A65E2B\">/</span><span style=\"color:#999999\">]</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 只提取来自 node_modules 的模块</span></span>\n<span class=\"line\"><span style=\"color:#998418\">          name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">vendor</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 公共依赖的名称</span></span>\n<span class=\"line\"><span style=\"color:#998418\">          chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">all</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 处理输出文件</strong></p>\n<p>通过以上配置，Webpack 将生成多个入口文件以及一个包含公共依赖的文件。例如：</p>\n<ul>\n<li><code>app1.bundle.js</code></li>\n<li><code>app2.bundle.js</code></li>\n<li><code>vendor.bundle.js</code>（公共依赖）</li>\n</ul>\n<p><strong>4. HTML 文件引入</strong></p>\n<p>可以使用 <code>HtmlWebpackPlugin</code> 来生成 HTML 文件，自动引入打包生成的 JavaScript 文件。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> HtmlWebpackPlugin</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> require</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">html-webpack-plugin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // ...其他配置</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  plugins</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    new</span><span style=\"color:#59873A\"> HtmlWebpackPlugin</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      template</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app1/index.html</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      filename</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">app1.html</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">vendor</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">app1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span><span style=\"color:#A0ADA0\"> // 引入公共依赖和 app1</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    new</span><span style=\"color:#59873A\"> HtmlWebpackPlugin</span><span style=\"color:#999999\">({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      template</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app2/index.html</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      filename</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">app2.html</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">vendor</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">app2</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span><span style=\"color:#A0ADA0\"> // 引入公共依赖和 app2</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>总结</strong></p>\n<p>通过上述配置，Webpack 能够有效管理多入口应用，提取公共依赖，确保代码的复用性和加载效率。每个入口点都可以独立打包，并且公共依赖仅打包一次，优化了整体性能。</p>\n"},{"title":"什么是Tree Shaking？如何实现？","answer":"<p>Tree Shaking是通过静态代码分析消除未使用代码的优化手段。</p>\n<p><strong>实现条件</strong>：</p>\n<ol>\n<li><strong>ES模块化</strong>：使用<code>import/export</code>语法（静态分析依赖）</li>\n<li><strong>构建工具支持</strong>：Webpack/Rollup开启生产模式（自动启用）</li>\n<li><strong>标记无副作用</strong>：在<code>package.json</code>中配置<code>&quot;sideEffects&quot;: false</code></li>\n<li><strong>压缩处理</strong>：配合Terser等工具删除dead code</li>\n</ol>\n<p>示例：Webpack配置</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// webpack.config.js</span></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  mode</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">production</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 自动启用Tree Shaking</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  optimization</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    usedExports</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 标记使用代码</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    minimize</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#A0ADA0\">     // 压缩时删除未标记代码</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"什么情况下会导致 webpack treeShaking 失效？","answer":"<p>Webpack 的 tree-shaking 是一种优化技术，用于去除未使用的代码，从而减小最终打包文件的大小。尽管 tree-shaking 是一个强大的工具，但在一些情况下，它可能会失效。以下是导致 Webpack tree-shaking 失效的一些常见情况：</p>\n<p><strong>1. 未使用 ES6 模块语法</strong></p>\n<ul>\n<li><strong>问题</strong>：Webpack 的 tree-shaking 依赖于 ES6 模块语法（<code>import</code> 和 <code>export</code>）来确定哪些代码是未使用的。如果你使用了 CommonJS 模块语法（<code>require</code> 和 <code>module.exports</code>），Webpack 将无法进行有效的 tree-shaking。</li>\n<li><strong>解决方案</strong>：确保在你的代码中使用 ES6 模块语法。</li>\n</ul>\n<p><strong>2. 动态导入和动态属性访问</strong></p>\n<ul>\n<li><strong>问题</strong>：动态导入（<code>import()</code>）和动态属性访问（例如 <code>require(variable)</code> 或 <code>import(variable)</code>）使得 Webpack 无法静态分析和确定哪些模块或代码是未使用的。</li>\n<li><strong>解决方案</strong>：尽量避免在 tree-shaking 的上下文中使用动态导入或动态属性访问。如果必须使用，确保它们在编译时能够被正确解析。</li>\n</ul>\n<p><strong>3. 非纯函数的副作用</strong></p>\n<ul>\n<li><strong>问题</strong>：如果模块或函数具有副作用（例如修改全局状态、改变外部变量），Webpack 可能无法安全地移除这些模块，因为它不能确定这些副作用是否被实际使用。</li>\n<li><strong>解决方案</strong>：将副作用从纯函数中分离，并使用 <code>sideEffects</code> 配置项告诉 Webpack 哪些模块有副作用，哪些没有副作用。</li>\n</ul>\n<p><strong>4. Webpack 配置问题</strong></p>\n<ul>\n<li><strong>问题</strong>：错误的 Webpack 配置可能会导致 tree-shaking 失效。例如，<code>mode</code> 配置项应该设置为 <code>'production'</code>，因为 Webpack 在开发模式下不会进行 tree-shaking。</li>\n<li><strong>解决方案</strong>：确保 Webpack 的 <code>mode</code> 配置为 <code>'production'</code>，并检查 <code>optimization</code> 配置项以确保启用了相关的优化选项。</li>\n</ul>\n<p><strong>5. <code>package.json</code> 中的 <code>sideEffects</code> 配置</strong></p>\n<ul>\n<li><strong>问题</strong>：如果 <code>package.json</code> 文件中的 <code>sideEffects</code> 配置不正确，Webpack 可能会保留那些实际上可以被移除的代码。</li>\n<li><strong>解决方案</strong>：确保在 <code>package.json</code> 中正确配置 <code>sideEffects</code> 字段。例如，如果你的项目没有副作用的代码，可以将其设置为 <code>false</code>，否则需要显式列出哪些文件或模块有副作用。</li>\n</ul>\n<p><strong>6. 引用外部库</strong></p>\n<ul>\n<li><strong>问题</strong>：引用外部库时，如果外部库没有正确使用 ES6 模块语法，Webpack 无法进行有效的 tree-shaking。</li>\n<li><strong>解决方案</strong>：选择支持 ES6 模块语法的外部库，并尽量避免引用不支持 tree-shaking 的库。</li>\n</ul>\n<p><strong>7. Webpack 插件和加载器</strong></p>\n<ul>\n<li><strong>问题</strong>：某些 Webpack 插件和加载器可能会影响 tree-shaking 过程。例如，某些插件可能会在构建过程中引入额外的代码或修改输出。</li>\n<li><strong>解决方案</strong>：仔细检查使用的插件和加载器，确保它们不会干扰 tree-shaking 过程。使用官方推荐的插件和加载器，以确保与 Webpack 的兼容性。</li>\n</ul>\n"},{"title":"package.json 里面 sideEffects 属性的作用是啥?","answer":"<p><code>sideEffects</code> 属性用于告知打包工具（如 Webpack/Rollup）哪些模块具有副作用，从而更精确地进行 <strong>Tree Shaking</strong> 优化。</p>\n<p><strong>两种作用</strong>：</p>\n<ol>\n<li><strong>标记无副作用的模块</strong>：设为 <code>false</code> 时，表示所有文件均为“纯模块”（无副作用），未使用的代码会被安全删除</li>\n<li><strong>声明有副作用的文件</strong>：设为数组时（如 <code>[&quot;*.css&quot;]</code>），明确列出有副作用的文件（即使未使用也要保留）</li>\n</ol>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-json\"><div class=\"language-json \"><span class=\"lang\">json</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">{</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">sideEffects</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">        // 所有文件无副作用（默认优化）</span></span>\n<span class=\"line\"><span style=\"color:#99841877\">  \"</span><span style=\"color:#998418\">sideEffects</span><span style=\"color:#99841877\">\"</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">*.css</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">],</span><span style=\"color:#A0ADA0\">   // 所有 CSS 文件有副作用（保留）</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>典型场景</strong>：</p>\n<ul>\n<li>保留 <code>import './style.css'</code>（无显式导出的副作用代码）</li>\n<li>避免误删 Polyfill（如 <code>import 'core-js/feature'</code>）</li>\n<li>第三方库作者需明确声明副作用（如 antd 的样式文件）</li>\n</ul>\n"},{"title":"npm 包管理了解多少？","answer":"<p>npm是Node.js的默认包管理工具，用于依赖管理和项目构建。</p>\n<p><strong>核心能力</strong>：</p>\n<ol>\n<li><strong>依赖管理</strong>：通过<code>package.json</code>记录依赖，支持<code>install/update/remove</code>等命令</li>\n<li><strong>版本控制</strong>：语义化版本（<code>^1.2.3</code>兼容小版本，<code>~1.2.3</code>兼容补丁版本）</li>\n<li><strong>脚本体系</strong>：<code>npm run</code>执行自定义脚本（如<code>dev/build/test</code>）</li>\n<li><strong>生态集成</strong>：公共仓库托管超150万个包，支持私有仓库</li>\n</ol>\n<p><strong>典型工作流</strong>：</p>\n<p>```bash`\nnpm init -y                # 初始化项目\nnpm install lodash@4.17.21 # 安装指定版本库\nnpm run build              # 执行构建脚本</p>\n<pre><code><div class=\"language- \"><span class=\"lang\"></span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span></span></span>\n<span class=\"line\"><span>对比yarn/pnpm：npm v7+支持workspaces和lockfile自动更新，但性能略逊于yarn/pnpm</span></span></code></pre></div></code></pre>\n"},{"title":"npm 和 pnpm还有 yran 的区别？","answer":"<p>npm、yarn 和 pnpm 是 JavaScript 生态中主流的包管理工具，核心区别在于<strong>安装机制、性能优化和依赖管理策略</strong>。</p>\n<p><strong>具体区别：</strong></p>\n<ol>\n<li><strong>安装机制</strong>\n<ul>\n<li><strong>npm</strong>：采用扁平化 <code>node_modules</code> 结构，依赖可能被提升到顶层，导致<strong>幽灵依赖</strong>（未声明但可访问的子依赖）18。</li>\n<li><strong>yarn</strong>：同样扁平化结构，但通过全局缓存和并行下载优化速度，并通过 <code>yarn.lock</code> 锁定版本37。</li>\n<li><strong>pnpm</strong>：基于<strong>硬链接 + 符号链接</strong>的非扁平化结构，依赖存储在全局仓库，项目通过链接复用，杜绝幽灵依赖并节省磁盘空间18。</li>\n</ul>\n</li>\n<li><strong>性能与磁盘占用</strong>\n<ul>\n<li><strong>npm</strong>：安装速度较慢，磁盘占用高（重复依赖）24。</li>\n<li><strong>yarn</strong>：并行下载 + 缓存，速度优于早期 npm，但磁盘占用仍较高37。</li>\n<li><strong>pnpm</strong>：安装速度最快（复用全局依赖），磁盘占用最低（单实例存储），适合大型项目68。</li>\n</ul>\n</li>\n<li><strong>依赖管理</strong>\n<ul>\n<li><strong>npm/yarn</strong>：依赖可能被提升，存在版本冲突风险；<code>package-lock.json</code> 和 <code>yarn.lock</code> 确保版本一致性14。</li>\n<li><strong>pnpm</strong>：严格隔离依赖，仅允许访问显式声明的依赖，避免非法访问89。</li>\n</ul>\n</li>\n<li><strong>适用场景</strong>\n<ul>\n<li><strong>npm</strong>：适合新手和小型项目，兼容性强46。</li>\n<li><strong>yarn</strong>：适合需要稳定性和 Monorepo 支持的企业级项目79。</li>\n<li><strong>pnpm</strong>：推荐大型项目/Monorepo，追求极致性能和磁盘效率28。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong>：</p>\n<ul>\n<li><strong>npm</strong>：官方标准，兼容性优先。</li>\n<li><strong>yarn</strong>：速度与锁版本优化。</li>\n<li><strong>pnpm</strong>：性能与空间效率的革命性方案。\n根据项目规模和需求选择，三者均可通过锁文件保证依赖一致性。</li>\n</ul>\n"},{"title":"npm lock 文件是做什么的？","answer":"<p>npm lock 文件（如 package-lock.json）用于<strong>锁定依赖版本，确保开发环境与生产环境依赖的一致性</strong>。</p>\n<p>具体来说，它会记录当前项目所有依赖包及其子依赖的<strong>精确版本号</strong>和下载地址，避免因语义化版本（如 <code>^1.2.3</code>）自动升级导致不同环境下安装的版本不一致，从而解决“本地能跑，线上报错”的问题。提交到代码仓库后，团队成员或构建工具能基于同一份依赖树安装包，保证行为一致。</p>\n"},{"title":"webpack热更新原理是什么？","answer":"<p>Webpack 热更新（HMR）的原理是<strong>通过 WebSocket 实时通信和模块热替换机制，实现代码变更的局部更新，避免页面刷新</strong>。</p>\n<p>具体来说，其工作流程分为以下几个步骤：</p>\n<ol>\n<li><strong>建立通信</strong>：开发服务器（如 <code>webpack-dev-server</code>）启动后，与浏览器通过 WebSocket 建立长连接，用于传输更新通知。</li>\n<li><strong>监听与编译</strong>：Webpack 监听文件变化，仅重新编译改动模块，并将新代码缓存在内存中。</li>\n<li><strong>推送更新</strong>：编译完成后，服务器通过 WebSocket 发送模块更新信息，浏览器端的 HMR Runtime（注入的客户端代码）接收并处理更新。</li>\n<li><strong>模块替换</strong>：HMR Runtime 根据模块标识符找到旧模块，尝试用新模块替换（需模块支持 HMR 接口），同时保留应用状态（如输入框内容）。</li>\n<li><strong>异常处理</strong>：若替换失败（如模块不支持 HMR），则回退到刷新整个页面28。</li>\n</ol>\n<p><strong>关键点</strong>：</p>\n<ul>\n<li><strong>局部更新</strong>：仅替换变动的模块（如 CSS 直接更新样式，JS 模块通过依赖分析局部替换）。</li>\n<li><strong>状态保留</strong>：通过 HMR API 管理模块生命周期，确保应用状态不丢失。</li>\n<li><strong>开发效率</strong>：适用于 React/Vue 等框架，结合 <code>react-hot-loader</code> 等插件实现组件级热替换。</li>\n</ul>\n"},{"title":"Vite 的热更新原理是什么？","answer":"<ul>\n<li><strong>通信机制</strong>：通过 WebSocket 建立浏览器与开发服务器的实时通信通道47。</li>\n<li><strong>模块更新</strong>：文件变更时，服务器仅重新编译受影响模块，并通过 HMR API 通知浏览器动态替换，无需刷新页面47。</li>\n<li><strong>状态保留</strong>：利用框架（如 Vue/React）的 HMR 边界管理模块生命周期，保持应用状态（如表单输入）7。</li>\n</ul>\n"},{"title":"分包的方式有哪些？","answer":"<p>分包（Code Splitting）的核心目的是<strong>减少首屏加载体积，提升应用性能</strong>。主要通过以下方式实现：</p>\n<ol>\n<li><strong>动态导入（Dynamic Import）</strong>\n使用 <code>import()</code> 语法按需加载模块（如路由懒加载），Webpack 自动拆分独立 chunk，运行时触发异步加载。</li>\n<li><strong>SplitChunks 插件</strong>\n在 Webpack 配置中通过 <code>optimization.splitChunks</code> 抽离公共依赖（如第三方库、公共组件），避免重复打包到多个入口文件。</li>\n<li><strong>手动配置多入口（Multi-Entry）</strong>\n将第三方库（如 <code>lodash</code>、<code>react</code>）单独配置为入口文件，生成独立 <code>vendor</code> chunk，利用浏览器缓存机制。</li>\n<li><strong>资源按需加载</strong>\n结合框架特性（如 Vue 的异步组件、React 的 <code>lazy + Suspense</code>）或图片懒加载（<code>loading=&quot;lazy&quot;</code>），延迟非关键资源加载时机。</li>\n</ol>\n"},{"title":" 异步加载原理是啥？","answer":"<p>异步加载的核心原理是<strong>通过非阻塞方式按需请求资源，避免阻塞主线程</strong>。</p>\n<p>具体过程：</p>\n<ol>\n<li><strong>触发加载</strong>：通过动态创建 <code>&lt;script&gt;</code> 标签、<code>XMLHttpRequest/fetch</code> 或 <code>import()</code> 语法，发起异步资源请求。</li>\n<li><strong>资源下载</strong>：浏览器后台下载资源（如 JS 文件），不阻塞页面渲染和其他脚本执行。</li>\n<li><strong>回调执行</strong>：资源加载完成后，通过事件监听（如 <code>onload</code>）、Promise 或 <code>async/await</code> 触发回调逻辑，执行加载的代码或处理数据。</li>\n<li><strong>模块管理</strong>：结合打包工具（如 Webpack）将异步代码拆分为独立 chunk，运行时通过 JSONP 等机制动态插入，按需执行。</li>\n</ol>\n<p><strong>关键点</strong>：</p>\n<ul>\n<li><strong>非阻塞</strong>：主线程持续响应用户交互，提升体验。</li>\n<li><strong>按需加载</strong>：适用于路由懒加载、图片懒加载等场景，减少首屏压力。</li>\n<li><strong>依赖管理</strong>：通过依赖分析确保异步模块的依赖正确加载（如 Webpack 的 <code>manifest</code> 维护模块映射）。</li>\n</ul>\n"},{"title":"source map 了解多少？","answer":"<p>Source map 的核心作用是<strong>将压缩、合并或编译后的代码映射回原始源代码，方便开发者调试</strong>。</p>\n<p>具体来说：</p>\n<ol>\n<li><strong>调试支持</strong>：浏览器通过.map文件将压缩后的代码（如JS/CSS）还原为未压缩状态，可直接定位到原始文件的行号和变量。</li>\n<li><strong>生成方式</strong>：构建工具（如Webpack）通过配置<code>devtool</code>选项生成不同质量的source map（如<code>cheap-module-source-map</code>平衡质量和构建速度）。</li>\n<li><strong>类型差异</strong>：\n<ul>\n<li><strong>开发环境</strong>：常用<code>eval-source-map</code>或<code>cheap-module-eval-source-map</code>，快速构建且提供足够信息。</li>\n<li><strong>生产环境</strong>：通常禁用或使用<code>hidden-source-map</code>（仅用于错误监控，不暴露给用户）。</li>\n</ul>\n</li>\n<li><strong>安全与性能</strong>：map文件可能暴露源码，生产环境需谨慎处理（如限制访问或不上传）。</li>\n</ol>\n"},{"title":"SSR 了解多少？","answer":"<p>SSR（服务端渲染）的核心是<strong>在服务器端生成完整 HTML 页面，提升首屏加载速度和 SEO 友好性</strong>。</p>\n<p>具体来说：</p>\n<ol>\n<li><strong>流程</strong>：\n<ul>\n<li>服务器接收到请求后，运行前端框架（如 React/Vue）生成完整的 HTML 内容，直接返回给浏览器。</li>\n<li>客户端接收到 HTML 后立即渲染，同时下载 JS 并执行“注水”（Hydration），将静态页面转为可交互的 SPA。</li>\n</ul>\n</li>\n<li><strong>优势</strong>：\n<ul>\n<li><strong>首屏性能</strong>：无需等待 JS 下载执行，直接展示内容。</li>\n<li><strong>SEO 友好</strong>：爬虫直接抓取服务端渲染的完整 HTML。</li>\n</ul>\n</li>\n<li><strong>实现方式</strong>：\n<ul>\n<li>使用框架：Next.js（React）、Nuxt.js（Vue）内置 SSR 能力。</li>\n<li>手动实现：Node.js 中调用 <code>renderToString</code>（React）或 <code>createSSRApp</code>（Vue）生成 HTML。</li>\n</ul>\n</li>\n<li><strong>挑战</strong>：\n<ul>\n<li><strong>服务端压力</strong>：高并发时需合理缓存或降级。</li>\n<li><strong>同构兼容</strong>：代码需兼容 Node.js 和浏览器环境（如避免直接操作 DOM）。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"webpack有哪些优化项目的手段？","answer":"<p>Webpack 优化项目的核心手段是<strong>通过配置优化、代码分割、缓存策略及资源压缩，提升构建速度和减小打包体积</strong>。具体方法包括：</p>\n<ol>\n<li><strong>构建速度优化</strong>：\n<ul>\n<li><strong>多进程处理</strong>：使用 <code>thread-loader</code> 或 <code>happypack</code> 并行执行耗时的 Loader（如 Babel）26。</li>\n<li><strong>缓存机制</strong>：<code>cache-loader</code> 缓存中间结果，或 <code>hard-source-webpack-plugin</code> 加速二次构建28。</li>\n<li><strong>热更新（HMR）</strong>：仅重编修改的模块，减少全量构建时间26。</li>\n<li><strong>DLL 预构建</strong>：用 <code>DllPlugin</code> 预打包第三方库，避免重复构建67。</li>\n</ul>\n</li>\n<li><strong>打包体积优化</strong>：\n<ul>\n<li><strong>代码分割</strong>：通过 <code>SplitChunksPlugin</code> 抽离公共模块，结合动态导入（<code>import()</code>）实现按需加载14。</li>\n<li><strong>Tree Shaking</strong>：剔除未使用代码（需 ES6 模块语法，生产模式默认开启）15。</li>\n<li><strong>压缩资源</strong>：<code>terser-webpack-plugin</code> 压缩 JS，<code>css-minimizer-webpack-plugin</code> 压缩 CSS，<code>compression-webpack-plugin</code> 开启 Gzip26。</li>\n</ul>\n</li>\n<li><strong>缓存与用户体验优化</strong>：\n<ul>\n<li><strong>持久化缓存</strong>：文件名添加 <code>[contenthash]</code>，结合 CDN 缓存静态资源38。</li>\n<li><strong>资源优化</strong>：小图片转 Base64 减少请求，路由懒加载拆分业务代码25。</li>\n</ul>\n</li>\n<li><strong>环境区分与配置</strong>：\n<ul>\n<li><strong>开发环境</strong>：启用 <code>eval-cheap-module-source-map</code> 快速定位源码，关闭压缩以提升构建速度25。</li>\n<li><strong>生产环境</strong>：使用 <code>nosources-source-map</code> 隐藏源码，启用代码压缩及 Tree Shaking25。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong>：从构建、体积、缓存三方面切入，结合工具链与配置策略，平衡开发效率与生产性能。</p>\n"},{"title":"如何配置多入口应用， 且区分公共依赖的？","answer":"<p>配置多入口应用并区分公共依赖的核心是<strong>通过 <code>entry</code> 定义多个入口，结合 <code>SplitChunksPlugin</code> 抽离公共代码</strong>。具体步骤：</p>\n<ol>\n<li>\n<p><strong>多入口配置</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// webpack.config.js</span></span>\n<span class=\"line\"><span style=\"color:#998418\">module</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">exports</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  entry</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    app1</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app1.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 入口1</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    app2</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./src/app2.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 入口2</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  output</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    filename</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">[name].bundle.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 输出为 app1.bundle.js、app2.bundle.js</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>抽离公共依赖</strong>\n在 <code>optimization.splitChunks</code> 中定义规则：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">optimization</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  splitChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    chunks</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">all</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 处理所有类型 chunk（同步/异步）</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    cacheGroups</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      vendors</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 抽离第三方库</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        test</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> /</span><span style=\"color:#999999\">[</span><span style=\"color:#BDA437\">\\\\</span><span style=\"color:#A65E2B\">/</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5E3F\">node_modules</span><span style=\"color:#999999\">[</span><span style=\"color:#BDA437\">\\\\</span><span style=\"color:#A65E2B\">/</span><span style=\"color:#999999\">]</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">vendors</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        priority</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 优先级高于默认组</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      },</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      commons</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 抽离公共业务代码（被多个入口复用）</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">commons</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        minChunks</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 至少被两个入口引用</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        minSize</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 最小体积</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n<p><strong>效果</strong>：</p>\n<ul>\n<li>生成 <code>app1.bundle.js</code>、<code>app2.bundle.js</code>（入口文件）</li>\n<li>公共依赖单独打包为 <code>vendors.js</code>（第三方库）和 <code>commons.js</code>（公共业务代码）\n<strong>优势</strong>：减少重复代码，利用浏览器缓存，提升加载速度。</li>\n</ul>\n"},{"title":"衡量页面性能的指标有哪些？","answer":"<p>衡量页面性能的核心指标是<strong>围绕加载速度、交互响应和视觉稳定性展开的量化数据</strong>。常见指标包括：</p>\n<ol>\n<li><strong>核心 Web 指标（Core Web Vitals）</strong>\n<ul>\n<li><strong>LCP（Largest Contentful Paint）</strong>：最大内容渲染时间（&lt;2.5s 为优），衡量加载性能。</li>\n<li><strong>FID（First Input Delay）</strong>：首次输入延迟（&lt;100ms 为优），衡量交互响应速度。</li>\n<li><strong>CLS（Cumulative Layout Shift）</strong>：累计布局偏移量（&lt;0.1 为优），衡量视觉稳定性。</li>\n</ul>\n</li>\n<li><strong>加载阶段指标</strong>\n<ul>\n<li><strong>FP（First Paint）</strong>：首次渲染（如背景色）。</li>\n<li><strong>FCP（First Contentful Paint）</strong>：首次内容渲染（如文本/图像）。</li>\n<li><strong>TTI（Time to Interactive）</strong>：页面可交互时间（主线程空闲）。</li>\n<li><strong>DCL（DOMContentLoaded）</strong>：DOM 解析完成时间。</li>\n<li><strong>L（Load）</strong>：页面完全加载时间。</li>\n</ul>\n</li>\n<li><strong>交互性能指标</strong>\n<ul>\n<li><strong>TBT（Total Blocking Time）</strong>：主线程阻塞总时长（FCP 到 TTI 之间）。</li>\n<li><strong>FPS（Frames Per Second）</strong>：动画/滚动流畅度（60fps 为佳）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>测量工具</strong>：</p>\n<ul>\n<li><strong>Chrome DevTools</strong>（Performance/Lighthouse 面板）</li>\n<li><strong>Web Vitals 库</strong>（<code>web-vitals</code> npm 包）</li>\n<li><strong>性能监控平台</strong>（Sentry、New Relic 等）</li>\n</ul>\n<p><strong>关键价值</strong>：通过量化数据定位性能瓶颈，针对性优化用户体验。</p>\n"},{"title":"谈谈你对压缩和混淆的理解","answer":"<p>压缩和混淆的核心目的是<strong>减少代码体积并提升代码安全性</strong>，但两者的侧重点不同。</p>\n<p><strong>具体区别</strong>：</p>\n<ol>\n<li><strong>压缩（Minification）</strong>：\n<ul>\n<li><strong>目标</strong>：减小代码体积（如删除空格、注释，简化变量名）。</li>\n<li><strong>示例</strong>：<code>function add(a,b){return a+b}</code> → <code>function n(a,b){return a+b}</code>。</li>\n<li><strong>工具</strong>：Terser、UglifyJS（JS），CSSNano（CSS），HTMLMinifier（HTML）。</li>\n</ul>\n</li>\n<li><strong>混淆（Obfuscation）</strong>：\n<ul>\n<li><strong>目标</strong>：增加代码逆向难度（如变量名随机化、逻辑加密、控制流扁平化）。</li>\n<li><strong>示例</strong>：<code>function add(a,b){return a+b}</code> → <code>function _0x3a8f(a,b){return a^b+0x1a}</code>。</li>\n<li><strong>工具</strong>：JavaScript Obfuscator、Terser（部分混淆能力）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>注意事项</strong>：</p>\n<ul>\n<li><strong>压缩必做</strong>：直接减少传输时间，提升加载性能。</li>\n<li><strong>混淆慎用</strong>：可能增加代码体积，且过度混淆可能引发运行时性能问题。</li>\n<li><strong>配合 Source Map</strong>：生产环境需关闭 Source Map，避免暴露源码。</li>\n</ul>\n<p><strong>总结</strong>：压缩是性能优化标配，混淆是安全增强可选方案。</p>\n"},{"title":"如何进行前端代码的测试？","answer":"<p>前端代码测试的核心是<strong>通过分层测试策略和自动化工具，确保代码质量与功能可靠性</strong>。具体分为以下四类：</p>\n<ol>\n<li><strong>单元测试（Unit Testing）</strong>\n<ul>\n<li><strong>目标</strong>：验证独立函数、组件的基础逻辑。</li>\n<li><strong>工具</strong>：Jest（断言+Mock）、Vue Test Utils / React Testing Library（组件测试）。</li>\n<li><strong>示例</strong>：测试工具函数是否返回预期值，组件渲染是否符合预期。</li>\n</ul>\n</li>\n<li><strong>集成测试（Integration Testing）</strong>\n<ul>\n<li><strong>目标</strong>：验证多个模块协作的正确性。</li>\n<li><strong>工具</strong>：Jest + Testing Library（模拟用户交互），如测试表单提交是否触发 API 调用。</li>\n</ul>\n</li>\n<li><strong>端到端测试（E2E Testing）</strong>\n<ul>\n<li><strong>目标</strong>：模拟真实用户操作，验证完整业务流程。</li>\n<li><strong>工具</strong>：Cypress、Playwright、Puppeteer（控制浏览器自动操作）。</li>\n</ul>\n</li>\n<li><strong>静态测试与代码规范</strong>\n<ul>\n<li><strong>目标</strong>：代码风格和潜在问题检查。</li>\n<li><strong>工具</strong>：ESLint（语法检查）、Prettier（代码格式化）、TypeScript（类型校验）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>关键流程</strong>：</p>\n<ul>\n<li><strong>TDD/BDD</strong>：测试驱动开发（先写测试再写代码）或行为驱动开发（用自然语言定义用例）。</li>\n<li><strong>持续集成</strong>：通过 GitHub Actions 等工具，提交代码时自动运行测试。</li>\n<li><strong>覆盖率统计</strong>：使用 <code>jest --coverage</code> 生成报告，关注关键路径覆盖（非盲目追求 100%）。</li>\n</ul>\n<p><strong>示例工具链</strong>：Jest（单元/集成） + Cypress（E2E） + ESLint（静态检查）。</p>\n"},{"title":"聊聊 npm 的语义化版本","answer":"<p>npm 的语义化版本（SemVer）的核心是<strong>通过版本号规则明确传达依赖包的变更影响程度</strong>，格式为 <code>主版本.次版本.修订号</code>（如 <code>1.2.3</code>）。</p>\n<p><strong>具体规则</strong>：</p>\n<ol>\n<li><strong>主版本号（Major）</strong>：不兼容的 API 变更（如移除旧功能），需谨慎升级。\n<ul>\n<li>示例：<code>2.0.0</code> → <code>3.0.0</code></li>\n</ul>\n</li>\n<li><strong>次版本号（Minor）</strong>：向下兼容的功能新增（如新增 API），可安全升级。\n<ul>\n<li>示例：<code>1.2.0</code> → <code>1.3.0</code></li>\n</ul>\n</li>\n<li><strong>修订号（Patch）</strong>：向下兼容的问题修复（如 Bug 修复），推荐立即升级。\n<ul>\n<li>示例：<code>1.2.3</code> → <code>1.2.4</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>版本范围语法</strong>：</p>\n<ul>\n<li><code>^1.2.3</code>：允许次版本和修订号升级（<code>1.x.x</code>，最高 <code>1.9.9</code>）。</li>\n<li><code>~1.2.3</code>：仅允许修订号升级（<code>1.2.x</code>，最高 <code>1.2.9</code>）。</li>\n<li><code>&gt;=1.2.3 &lt;2.0.0</code>：指定区间范围。</li>\n<li><code>1.2.3-beta.0</code>：预发布版本（需显式指定）。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li><strong>依赖管理</strong>：通过 <code>package.json</code> 定义版本范围，平衡稳定性与新特性。</li>\n<li><strong>安全更新</strong>：结合 <code>npm update</code> 或 <code>npm outdated</code> 检查可升级版本。</li>\n<li><strong>锁定版本</strong>：<code>package-lock.json</code> 记录精确版本，确保环境一致性。</li>\n</ul>\n<p><strong>示例</strong>：若依赖声明为 <code>^1.2.3</code>，安装时可能升级到 <code>1.3.0</code>，但不会自动升级到 <code>2.0.0</code>（破坏性变更）。</p>\n"},{"title":"如何做一个前端项目工程的自动化部署，有哪些规范和流程设计？","answer":"<p>自动化部署是提升团队协作效率和项目质量的关键环节，核心设计如下：</p>\n<p><strong>一、规范设计</strong></p>\n<ol>\n<li><strong>代码管理规范</strong>\n<ul>\n<li><strong>分支策略</strong>：采用 Git Flow 或 GitHub Flow，明确 <code>main</code>（生产）、<code>develop</code>（开发）、<code>feature/*</code>（功能分支）等分支用途。</li>\n<li><strong>提交规范</strong>：使用 <a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a> 标准化提交消息（如 <code>feat: 新增登录功能</code>）。</li>\n<li><strong>版本号</strong>：遵循 <a href=\"https://semver.org/\">Semantic Versioning</a>（语义化版本控制，如 <code>v1.2.3</code>）。</li>\n</ul>\n</li>\n<li><strong>环境隔离规范</strong>\n<ul>\n<li>多环境配置：<code>development</code>（开发）、<code>test</code>（测试）、<code>pre-release</code>（预发布）、<code>production</code>（生产）。</li>\n<li>环境变量管理：通过 <code>.env</code> 文件隔离不同环境的 API 地址、密钥等配置。</li>\n</ul>\n</li>\n<li><strong>权限与审计</strong>\n<ul>\n<li>仅允许 CI/CD 系统部署到生产环境，人工操作需审批。</li>\n<li>记录部署日志（谁部署、何时部署、版本号）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>二、流程设计</strong></p>\n<ol>\n<li>\n<p><strong>本地开发阶段</strong></p>\n<ul>\n<li><strong>代码提交</strong>：在 <code>feature/*</code> 分支开发，通过 ESLint、Prettier 校验代码风格。</li>\n<li><strong>本地构建</strong>：运行 <code>npm run build</code> 生成生产包，检查构建产物是否正常。</li>\n</ul>\n</li>\n<li>\n<p><strong>持续集成（CI）阶段</strong></p>\n<ul>\n<li>\n<p><strong>触发条件</strong>：代码推送到远程仓库（如 <code>push</code> 到 <code>develop</code> 分支）。</p>\n</li>\n<li>\n<p><strong>执行步骤</strong>：</p>\n<pre><code><div class=\"language- \"><span class=\"lang\"></span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span># GitHub Actions 示例  </span></span>\n<span class=\"line\"><span>jobs:  </span></span>\n<span class=\"line\"><span>  build:  </span></span>\n<span class=\"line\"><span>    runs-on: ubuntu-latest  </span></span>\n<span class=\"line\"><span>    steps:  </span></span>\n<span class=\"line\"><span>      - name: Checkout  </span></span>\n<span class=\"line\"><span>        uses: actions/checkout@v2  </span></span>\n<span class=\"line\"><span>      - name: Install  </span></span>\n<span class=\"line\"><span>        run: npm ci  </span></span>\n<span class=\"line\"><span>      - name: Build  </span></span>\n<span class=\"line\"><span>        run: npm run build  </span></span>\n<span class=\"line\"><span>      - name: Test  </span></span>\n<span class=\"line\"><span>        run: npm test  # 运行单元测试、E2E测试  </span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>持续部署（CD）阶段</strong></p>\n<ul>\n<li>\n<p><strong>测试环境部署</strong>：合并到 <code>develop</code> 分支后自动部署到测试服务器。</p>\n</li>\n<li>\n<p><strong>预发布环境</strong>：手动触发部署（如通过 Jenkins 按钮），供产品验收。</p>\n</li>\n<li>\n<p><strong>生产环境部署</strong>：通过 Tag 触发（如 <code>git tag v1.0.0</code>），自动同步到 CDN 和服务器。</p>\n<pre><code class=\"language-shell\"><div class=\"language-shell \"><span class=\"lang\">shell</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\"># 部署脚本示例（SSH + Nginx）  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">rsync</span><span style=\"color:#A65E2B\"> -avz</span><span style=\"color:#B56959\"> dist/</span><span style=\"color:#B56959\"> user@server:/var/www/html</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">ssh</span><span style=\"color:#B56959\"> user@server</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">systemctl reload nginx</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>监控与回滚</strong></p>\n<ul>\n<li><strong>健康检查</strong>：部署后自动访问 <code>/health</code> 接口验证服务状态。</li>\n<li><strong>异常回滚</strong>：检测到错误时自动回退到上一个稳定版本（如通过 Docker 镜像版本管理）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>三、工具链选型</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>环节</strong></th>\n<th style=\"text-align:left\"><strong>工具示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>代码托管</strong></td>\n<td style=\"text-align:left\">GitHub、GitLab、Bitbucket</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>CI/CD</strong></td>\n<td style=\"text-align:left\">GitHub Actions、GitLab CI、Jenkins、CircleCI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>构建工具</strong></td>\n<td style=\"text-align:left\">Webpack、Vite、Rollup</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>部署方式</strong></td>\n<td style=\"text-align:left\">SSH（rsync）、Docker + Kubernetes、Serverless（AWS Lambda、Vercel）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>监控报警</strong></td>\n<td style=\"text-align:left\">Sentry（错误监控）、Prometheus + Grafana（性能监控）、New Relic</td>\n</tr>\n</tbody>\n</table>\n<p><strong>四、最佳实践</strong></p>\n<ol>\n<li><strong>静态资源优化</strong>\n<ul>\n<li>上传构建产物到 CDN，启用长期缓存（文件名哈希化）。</li>\n<li>通过 <code>npm publish</code> 发布组件库到私有 NPM 仓库。</li>\n</ul>\n</li>\n<li><strong>灰度发布</strong>\n<ul>\n<li>使用 Nginx 分流 10% 的流量到新版本，验证通过后全量发布。</li>\n</ul>\n</li>\n<li><strong>基础设施即代码（IaC）</strong>\n<ul>\n<li>用 Terraform 或 AWS CloudFormation 管理服务器、DNS 等资源。</li>\n</ul>\n</li>\n</ol>\n<p><strong>五、总结</strong></p>\n<p>自动化部署的核心目标是 <strong>标准化、无人化、可追溯</strong>。通过规范流程、合理选型、分层设计，可显著降低部署风险，提高迭代效率。实际落地时需结合团队规模和技术栈灵活调整，例如：</p>\n<ul>\n<li><strong>小团队</strong>：直接使用 GitHub Actions + Vercel 一键部署。</li>\n<li><strong>大厂级</strong>：自建 Jenkins 集群 + Kubernetes 编排 + 全链路监控。</li>\n</ul>\n"}]