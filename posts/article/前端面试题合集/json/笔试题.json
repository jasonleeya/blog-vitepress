[{"title":"实现交换两个变量","answer":"<p>JavaScript交换两个变量的常用方法：</p>\n<ol>\n<li>\n<p><strong>临时变量法</strong>（通用性强，推荐）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> temp</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 2 1  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>解构赋值法</strong>（ES6+，简洁）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">];</span><span style=\"color:#A0ADA0\"> // 直接交换  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>数学运算法</strong>（仅限数值类型）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>位运算异或法</strong>（仅限整数）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> ^</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> ^</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> ^</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"简单实现Promise","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> MyPromise</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">executor</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">pending</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 状态：pending/fulfilled/rejected</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> undefined</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 成功值</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> undefined</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 失败原因</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onFulfilledCallbacks</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#A0ADA0\"> // 成功回调队列</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onRejectedCallbacks</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#A0ADA0\"> // 失败回调队列</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">pending</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">fulfilled</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onFulfilledCallbacks</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">fn</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> fn</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // 执行异步回调</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">pending</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">rejected</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> reason</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onRejectedCallbacks</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">fn</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> fn</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // 执行异步回调</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      executor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 立即执行执行器函数</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 捕获同步错误</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">onFulfilled</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> onRejected</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 处理值穿透（then() 无参数时传递值）</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    onFulfilled</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> onFulfilled</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> onFulfilled</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    onRejected</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> onRejected</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> onRejected</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#1E754F\"> throw</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">;</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> promise2</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> MyPromise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#59873A\"> handleFulfilled</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 确保异步执行</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">            const</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> onFulfilled</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            resolvePromise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promise2</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        },</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#59873A\"> handleRejected</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">            const</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> onRejected</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            resolvePromise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promise2</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        },</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">fulfilled</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        handleFulfilled</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#1E754F\"> if</span><span style=\"color:#999999\"> (</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">rejected</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">        handleRejected</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // pending 状态时存储回调</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onFulfilledCallbacks</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">handleFulfilled</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">        this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onRejectedCallbacks</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">handleRejected</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> promise2</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 返回新 Promise 实现链式调用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 处理 then 返回值的解析（支持返回 Promise 或普通值）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> resolvePromise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promise2</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">promise2</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 禁止循环引用</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> TypeError</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Chaining cycle detected</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">x</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> MyPromise</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 递归解析 Promise</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    x</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"如何用Promise实现超时控制？","answer":"<p><strong>1. 基础实现：超时抛出错误</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> timeoutPromise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promise</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 创建超时 Promise，到达时间后 reject  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> timeoutP</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">_</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">请求超时</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)),</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 返回竞速结果  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">race</span><span style=\"color:#999999\">([</span><span style=\"color:#B07D48\">promise</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> timeoutP</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> fetchData</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">https://api.example.com</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">timeoutPromise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">fetchData</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 5000</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">成功:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">))</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">失败:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 结合 AbortController 取消实际请求（如 fetch）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> fetchWithTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 5000</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> controller</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> AbortController</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> timeoutId</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> controller</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">abort</span><span style=\"color:#999999\">(),</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> signal</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> controller</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">signal</span><span style=\"color:#999999\"> })</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">finally</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> clearTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">timeoutId</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 清理定时器  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用：超时后自动取消请求  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">fetchWithTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">https://api.example.com</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3000</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">AbortError</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">请求超时</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    else</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">其他错误:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"手写代码实现Promise.all","answer":"<p>手写 <code>Promise.all</code> 的核心在于<strong>并发执行所有Promise</strong>，并<strong>按顺序收集结果</strong>，遇到失败立即终止。以下是实现代码及解析：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> myPromiseAll</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 1. 校验输入是否为可迭代对象  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> promises</span><span style=\"color:#999999\">?.[</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> TypeError</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Argument is not iterable</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 2. 处理空数组直接返回  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">results</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    promises</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 3. 统一转Promise处理非Promise值  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">      Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 按索引存储结果  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">++</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> promises</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">results</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        })</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reject</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 4. 任意失败立即reject  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点解释</strong>：</p>\n<ul>\n<li><strong>输入校验</strong>：通过 <code>Symbol.iterator</code> 判断是否可迭代（如数组、Set）。</li>\n<li><strong>结果顺序</strong>：利用闭包中的 <code>index</code> 确保结果顺序与输入一致。</li>\n<li><strong>并发执行</strong>：<code>forEach</code> 立即启动所有Promise，无需等待前一个完成。</li>\n<li><strong>错误处理</strong>：首个失败直接触发 <code>reject</code>，其他Promise继续执行但不处理结果。</li>\n</ul>\n<p><strong>测试用例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 成功场景  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">myPromiseAll</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">),</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">)])</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 [1, 2, 3]  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 失败场景  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">myPromiseAll</span><span style=\"color:#999999\">([</span><span style=\"color:#998418\">Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">error</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)])</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 'error'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>与原生的差异</strong>：</p>\n<ul>\n<li><strong>行为一致</strong>：所有Promise立即执行，无法取消。</li>\n<li><strong>边界处理</strong>：对非Promise值的转换（<code>Promise.resolve</code>）逻辑相同。</li>\n</ul>\n"},{"title":"手写代码实现Promise.race","answer":"<p>手写 <code>Promise.race</code> 的核心在于<strong>监听所有Promise，首个完成（无论成功/失败）的结果决定最终状态</strong>。以下是实现代码及解析：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> myPromiseRace</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 1. 校验输入是否为可迭代对象  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> promises</span><span style=\"color:#999999\">?.[</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> TypeError</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Argument is not iterable</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 2. 遍历每个Promise，监听首个结果  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> promises</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 3. 统一转Promise处理非Promise值  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">      Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">  // 首个resolve触发外层成功  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reject</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 首个reject触发外层失败  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>关键点解释</strong>：</p>\n<ul>\n<li><strong>立即执行</strong>：所有Promise同时启动，竞争执行。</li>\n<li><strong>首个完成优先</strong>：无论是成功（<code>resolve</code>）还是失败（<code>reject</code>），首个完成的Promise直接决定最终状态。</li>\n<li><strong>非Promise处理</strong>：通过 <code>Promise.resolve</code> 包装确保统一处理（如数值、普通对象）。</li>\n</ul>\n<p><strong>测试用例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 成功场景（首个为数值）  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">myPromiseRace</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 100</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">))])</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 1  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 失败场景  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">myPromiseRace</span><span style=\"color:#999999\">([</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">_</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> rej</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">rej</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 50</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">error1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)),</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">_</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> rej</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">rej</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">error2</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">))</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">]).</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 'error2'（更快完成）  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 混合类型  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">myPromiseRace</span><span style=\"color:#999999\">([</span><span style=\"color:#998418\">Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">fast</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">),</span><span style=\"color:#2F798A\"> 42</span><span style=\"color:#999999\">])</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 'fast'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>与原生的差异</strong>：</p>\n<ul>\n<li><strong>行为一致</strong>：所有Promise立即执行且不可取消。</li>\n<li><strong>边界处理</strong>：空输入直接返回 <code>pending</code> 状态的Promise（需调用方自行处理）。</li>\n</ul>\n<p><strong>适用场景</strong>：</p>\n<ul>\n<li>接口超时控制（如与 <code>setTimeout</code> 结合）</li>\n<li>竞速请求（取最快响应结果）</li>\n</ul>\n"},{"title":"手写代码实现Promise.allSettled","answer":"<p>以下是 <code>Promise.allSettled</code> 的手动实现，核心思路是 <strong>收集所有 Promise 的结果（无论成功/失败）</strong>，并在全部完成后返回结果数组：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> promiseAllSettled</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 空数组直接返回</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      resolve</span><span style=\"color:#999999\">([]);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Array</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promises</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 结果数组，保持顺序</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> completed</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 完成计数器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    promises</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">promise</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 处理非 Promise 值（如数字、普通对象）</span></span>\n<span class=\"line\"><span style=\"color:#998418\">      Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">promise</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> status</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">fulfilled</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> status</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">rejected</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reason</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">finally</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          completed</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">          // 全部完成时 resolve</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">completed</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> promises</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">results</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>实现解析</strong></p>\n<ol>\n<li><strong>统一处理输入</strong>：\n<ul>\n<li>使用 <code>Promise.resolve()</code> 包装每个元素，确保处理的是 Promise 对象。</li>\n<li>支持混合类型输入（如 <code>[42, fetch('/data')]</code>）。</li>\n</ul>\n</li>\n<li><strong>保持结果顺序</strong>：\n<ul>\n<li>通过 <code>index</code> 将结果存入数组对应位置，与输入顺序一致。</li>\n</ul>\n</li>\n<li><strong>完成计数器</strong>：\n<ul>\n<li>每个 Promise 完成后（无论成功/失败）触发 <code>finally</code>，计数器累加。</li>\n<li>当计数器等于输入数组长度时，返回最终结果。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"使用Promise实现一个限制并发数的函数","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> limitConcurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">tasks</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> max</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> active</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> completed</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    function</span><span style=\"color:#59873A\"> next</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 所有任务完成  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">completed</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> tasks</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">results</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 启动新任务（不超过最大并发数）  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">active</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> max</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> tasks</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        const</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        active</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        const</span><span style=\"color:#B07D48\"> task</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> tasks</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">        Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">task</span><span style=\"color:#999999\">())</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> results</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          .</span><span style=\"color:#59873A\">finally</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            active</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            completed</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            next</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 触发下一个任务  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">    next</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 初始调用  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"async/await 原理， 手写 async 函数？","answer":"<p><strong>一、核心原理</strong></p>\n<ol>\n<li><strong>生成器函数（Generator）</strong>：\n<code>async</code> 函数被转换为生成器函数，<code>await</code> 对应 <code>yield</code>，用于暂停执行。</li>\n<li><strong>自动执行器</strong>：\n递归调用生成器的 <code>next()</code>，自动处理 <code>yield</code> 返回的 <code>Promise</code>，实现异步流程控制。</li>\n</ol>\n<p><strong>二、手写 <code>async</code> 函数实现</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> myAsync</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">generatorFn</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> gen</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> generatorFn</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">apply</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 初始化生成器</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 返回Promise，支持链式调用</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reject</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 递归处理生成器的 yield</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      function</span><span style=\"color:#59873A\"> step</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> arg</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        let</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> gen</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">](</span><span style=\"color:#B07D48\">arg</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 执行 next 或 throw</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#59873A\"> reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 捕获同步错误</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> done</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">done</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 生成器执行完毕，返回最终结果</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">          // 统一转为Promise处理（支持非Promise值）</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            val</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> step</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">next</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">),</span><span style=\"color:#A0ADA0\"> // 异步成功，继续下一步</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            err</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> step</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">throw</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 异步失败，抛出错误</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">      step</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">next</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 启动执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>三、使用示例</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 定义生成器函数（模拟 async 函数）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> asyncFunc</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> myAsync</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">function</span><span style=\"color:#1E754F\">*</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> data1</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> yield</span><span style=\"color:#59873A\"> fetchData1</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 模拟 await</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> data2</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> yield</span><span style=\"color:#59873A\"> fetchData2</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> data2</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">捕获错误:</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 执行手写的 async 函数</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">asyncFunc</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">result</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">结果:</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>四、原理解析</strong></p>\n<ol>\n<li><strong>生成器控制流程</strong>：\n<ul>\n<li><code>yield</code> 暂停执行，返回 <code>Promise</code>。</li>\n<li><code>next()</code> 恢复执行，并传入异步结果。</li>\n</ul>\n</li>\n<li><strong>错误处理</strong>：\n<ul>\n<li>通过 <code>try/catch</code> 包裹生成器方法调用，捕获同步错误。</li>\n<li>异步错误通过 <code>Promise.catch</code> 触发生成器的 <code>throw</code> 方法。</li>\n</ul>\n</li>\n<li><strong>自动递归</strong>：\n<ul>\n<li><code>step</code> 函数递归调用自身，直到生成器完成（<code>done: true</code>）</li>\n</ul>\n</li>\n</ol>\n"},{"title":"实现深拷贝","answer":"<p><a href=\"#deepClone\">深拷贝浅拷贝的区别？如何实现一个深拷贝？</a></p>\n"},{"title":"实现防抖节流","answer":"<p><a href=\"#throttled-and-debounce\">什么是防抖和节流？有什么区别？如何实现？</a></p>\n"},{"title":"实现数组去重","answer":"<p><a href=\"#uniqueArray\">你知道哪些数组去重方法？</a></p>\n"},{"title":"手写发布-订阅模式","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> EventEmitter</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span><span style=\"color:#A0ADA0\"> // 存储事件及回调 { event: [callback1, callback2] }  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 订阅事件  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  on</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> listener</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">])</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">listener</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 返回取消订阅的函数  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">off</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> listener</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 取消订阅  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  off</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> listener</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">])</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">indexOf</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">listener</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> ></span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">splice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 触发事件  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  emit</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">])</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 复制数组，避免回调中修改数组导致遍历错乱  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">events</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">listener</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> listener</span><span style=\"color:#999999\">(...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 单次订阅  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  once</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> listener</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> onceWrapper</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      listener</span><span style=\"color:#999999\">(...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">off</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> onceWrapper</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 执行后自动移除  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">on</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> onceWrapper</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>使用：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> emitter</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> EventEmitter</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 订阅  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> unsub</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">on</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">msg</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到消息：</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> msg</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">emit</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Hello!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出：收到消息：Hello!  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 取消订阅  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">unsub</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">emit</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">不再接收</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 无输出  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 单次订阅  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">once</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">alert</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">仅触发一次</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">emit</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">alert</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出：仅触发一次  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">emitter</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">emit</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">alert</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 无输出  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"手写观察者模式","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 主题（被观察者）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Subject</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#A0ADA0\"> // 观察者列表  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 添加观察者  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  addObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> observer</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">update</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">      this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 移除观察者  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  removeObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">indexOf</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> ></span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">splice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 通知所有观察者  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  notify</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> observer</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">update</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 观察者  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Observer</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 定义统一的更新接口  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  update</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#1E754F\">${</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">name</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\"> 收到数据：</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>使用：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 创建主题  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> subject</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Subject</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 创建观察者  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> observerA</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Observer</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">观察者A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> observerB</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  update</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">观察者B收到：</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 添加观察者  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">subject</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observerA</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">subject</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observerB</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 主题状态变化，触发通知  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">subject</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">notify</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> message</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">状态更新</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 输出：  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 观察者A 收到数据： {message: '状态更新'}  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 观察者B收到： {message: '状态更新'}  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 移除观察者  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">subject</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">removeObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">observerB</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">subject</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">notify</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">第二次通知</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 仅observerA接收  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"实现一个 flatten 函数（数组扁平化）","answer":"<p><a href=\"#flat\">数组拍平</a></p>\n"},{"title":"如何实现数组的随机排序？","answer":"<p><strong>方法 1：Fisher-Yates 洗牌算法</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> shuffleArray</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> j</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">floor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">random</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">i</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 随机选取 0~i 的索引</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    [</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">]]</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">j</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]];</span><span style=\"color:#A0ADA0\">    // 交换元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：</p>\n<ul>\n<li><strong>均匀随机</strong>：每个元素出现在每个位置的概率均等。</li>\n<li><strong>时间复杂度 O(n)</strong>：高效，只需一次遍历。</li>\n</ul>\n<p><strong>方法 2：Array.sort + Math.random（不推荐）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> shuffled</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">random</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 0.5</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><strong>非均匀随机</strong>：V8引擎的排序算法导致元素位置概率不均（如末尾元素更可能留在末尾）。</li>\n<li><strong>时间复杂度 O(n log n)</strong>：性能较差。</li>\n</ul>\n"},{"title":"实现获取文件扩展名","answer":"<p><strong>方法1：split + pop（适合简单场景）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">filename</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理无点或隐藏文件（如.gitignore）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> parts</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> filename</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> parts</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> parts</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pop</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">image.jpg</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">      // 'jpg'  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">archive.tar.gz</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 'gz'  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">README</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">         // ''  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.env</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">           // ''  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>方法2：正则表达式（精准高效）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">filename</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 匹配最后一个点后的非点字符（直到字符串末尾）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> match</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> filename</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">match</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">/</span><span style=\"color:#BDA437\">\\.</span><span style=\"color:#999999\">([</span><span style=\"color:#AB5959\">^</span><span style=\"color:#5A6AA6\">.</span><span style=\"color:#999999\">]</span><span style=\"color:#2F798A\">+</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\">$</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> match</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> match</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">file.min.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">    // 'js'  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">image.JPEG</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">     // 'JPEG'  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">getExtension</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">no_extension</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">   // ''  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"为什么使用 setTimeout 实现 setInterval？怎么模拟？","answer":"<p><strong>一、为什么用 <code>setTimeout</code> 替代 <code>setInterval</code>？</strong></p>\n<ol>\n<li><strong>避免回调堆积</strong>：\n<ul>\n<li><code>setInterval</code> 会严格按间隔时间触发回调，若回调未完成，任务会堆积。</li>\n<li><code>setTimeout</code> 递归调用可确保下次回调在上次执行<strong>完成后</strong>再触发。</li>\n</ul>\n</li>\n<li><strong>动态调整间隔</strong>：\n<ul>\n<li>每次递归前可动态修改间隔（如网络请求失败时增加延迟）。</li>\n</ul>\n</li>\n<li><strong>精准控制启停</strong>：\n<ul>\n<li>通过闭包保存 <code>timer</code>，实现精准的取消逻辑。</li>\n</ul>\n</li>\n</ol>\n<p><strong>二、代码实现</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> customInterval</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">callback</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> interval</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> timer</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> execute</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    callback</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">            // 执行回调</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    timer</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">execute</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> interval</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 递归调用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  timer</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">execute</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> interval</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">   // 首次触发</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> clearTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">timer</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">        // 返回清除函数</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> clear</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> customInterval</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">执行任务</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 5秒后停止</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> clear</span><span style=\"color:#999999\">(),</span><span style=\"color:#2F798A\"> 5000</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"手写一个函数将 12345 格式化为货币形式（如 \"12,345\"）","answer":"<p><strong>反向遍历法（手写循环）</strong></p>\n<p><strong>原理</strong>：从右往左每3位插入逗号</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">integerPart</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> decimalPart</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> decimal</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> decimalPart</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">.</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">decimalPart</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 处理小数部分</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> sign</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> integer</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> integerPart</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 处理负号</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">integer</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">startsWith</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">-</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    sign</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">-</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    integer</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> integer</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 从右往左遍历整数部分，每三位插入逗号</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> integer</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">--</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> integer</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    count</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">count</span><span style=\"color:#AB5959\"> %</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> // 避免在最左侧加逗号</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">,</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> sign</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> decimal</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 测试用例</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">12345</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">        // 输出 \"12,345\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">123456789</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">    // 输出 \"123,456,789\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">12345.67</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">    // 输出 \"-12,345.67\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">123</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">          // 输出 \"123\"</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>正则表达式法（代码极简）</strong></p>\n<p><strong>原理</strong>：用正则匹配每三位数字前的位置</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">/</span><span style=\"color:#AB5E3F\">-</span><span style=\"color:#2F798A\">?</span><span style=\"color:#5A6AA6\">\\d</span><span style=\"color:#2F798A\">+</span><span style=\"color:#B5695977\">/</span><span style=\"color:#1E754F\">g</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> m</span><span style=\"color:#999999\"> =></span><span style=\"color:#393A34\">   </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    m</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">(</span><span style=\"color:#5A6AA6\">\\d</span><span style=\"color:#999999\">)(?=(</span><span style=\"color:#5A6AA6\">\\d</span><span style=\"color:#2F798A\">{3}</span><span style=\"color:#999999\">)</span><span style=\"color:#2F798A\">+</span><span style=\"color:#999999\">(?!</span><span style=\"color:#5A6AA6\">\\d</span><span style=\"color:#999999\">))</span><span style=\"color:#B5695977\">/</span><span style=\"color:#1E754F\">g</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">$1,</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：12345 → \"12,345\"，-123456 → \"-123,456\"  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>数组分割法（直观易懂）</strong></p>\n<p><strong>原理</strong>：将数字转为数组后反向插入逗号</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">abs</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> str</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">reverse</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">splice</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">,</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">-</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reverse</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">join</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">''</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    (</span><span style=\"color:#B07D48\">str</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#B56959\">.</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">str</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>原生API法（生产推荐）</strong></p>\n<p><strong>原理</strong>：利用 <code>toLocaleString</code> 内置方法实现一个函数，将 hello-world 转换为驼峰命名（helloWorld）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> formatCurrency</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">toLocaleString</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">en-US</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：12345 → \"12,345\"，12345.67 → \"12,345.67\"  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"如何实现一个无限累加的 add 函数？","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> sum</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> fn</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">m</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> sum</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#B07D48\"> m</span><span style=\"color:#999999\">;</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> fn</span><span style=\"color:#999999\">;</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  fn</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">valueOf</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> sum</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> fn</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 6</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 10</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"实现链式调用：设计一个对象支持 obj.add(1).subtract(2).getValue()","answer":"<p>要实现链式调用，需确保每个方法返回对象本身（<code>this</code>），从而允许连续调用其他方法。以下是具体实现：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Calculator</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">initialValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> initialValue</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> +=</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 关键：返回实例以支持链式调用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  subtract</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#AB5959\"> -=</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">  getValue</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 终止链式调用，返回最终结果</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Calculator</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">    // 0 + 1 = 1</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">subtract</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 1 - 2 = -1</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">getValue</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 返回 -1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">result</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出: -1</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"Vue项目中有封装过axios吗？怎么封装的？","answer":"<p><strong>（1）创建Axios实例</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// src/utils/request.js  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#B07D48\"> axios</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">axios</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> service</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> axios</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">create</span><span style=\"color:#999999\">({</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  baseURL</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> process</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">env</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">VUE_APP_API_URL</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 环境变量配置  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  timeout</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 10000</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>（2）请求拦截器</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">service</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">interceptors</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">request</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">use</span><span style=\"color:#999999\">(</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  config</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 添加Token、Content-Type等  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    config</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">headers</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">Authorization</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> localStorage</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getItem</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">token</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> config</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  error</span><span style=\"color:#999999\"> =></span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>（3）响应拦截器</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">service</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">interceptors</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">use</span><span style=\"color:#999999\">(</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  response</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 统一处理业务逻辑（如状态码判断）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">code</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#2F798A\"> 200</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      alert</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">message</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  error</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 处理HTTP错误（如401跳登录）  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">status</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 401</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      router</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reject</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>（4）封装请求方法</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#59873A\"> get</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> service</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> const</span><span style=\"color:#59873A\"> post</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> service</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">post</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 导出其他方法（put、delete等）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 使用示例</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 组件中调用  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> get</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> post</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">@/utils/request</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/user</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> }).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#999999\"> ...</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">post</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> username</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> password</span><span style=\"color:#999999\"> }).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(...);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"Vue3封装一个带缓存的 useFetch Hook（支持重复请求去重）","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> ref</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> reactive</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">vue</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">type</span><span style=\"color:#2E8F82\"> CacheItem</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  data</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  timestamp</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">number</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">type</span><span style=\"color:#2E8F82\"> Options</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  cacheTTL</span><span style=\"color:#AB5959\">?</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">number</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 缓存有效时间（毫秒）</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  immediate</span><span style=\"color:#AB5959\">?</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">boolean</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 是否立即执行</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> cache</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> reactive</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">string</span><span style=\"color:#999999\">,</span><span style=\"color:#2E8F82\"> CacheItem</span><span style=\"color:#999999\">>());</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> pendingRequests</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">string</span><span style=\"color:#999999\">,</span><span style=\"color:#2E8F82\"> Promise</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">any</span><span style=\"color:#999999\">>>();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">export</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> useFetch</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">T</span><span style=\"color:#999999\">>(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">string</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> options</span><span style=\"color:#999999\">: </span><span style=\"color:#2E8F82\">Options</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {})</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> ref</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">T</span><span style=\"color:#999999\"> |</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">>(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> ref</span><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#2E8F82\">Error</span><span style=\"color:#999999\"> |</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">>(</span><span style=\"color:#AB5959\">null</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> loading</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> ref</span><span style=\"color:#999999\">(</span><span style=\"color:#1E754F\">false</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> cacheTTL</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 60000</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> immediate</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> options</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 生成唯一缓存键（可根据需求扩展参数哈希）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> cacheKey</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> url</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 核心请求方法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> execute</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> async</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 重复请求去重逻辑</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">pendingRequests</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> pendingRequests</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 缓存有效直接返回</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> cached</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\">!</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">Date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">now</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> cached</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">timestamp</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> cacheTTL</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> cached</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#B07D48\"> cached</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      loading</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> request</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">())</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">          // 更新缓存</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#998418\">            data</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#998418\">            timestamp</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> Date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">now</span><span style=\"color:#999999\">()</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">          });</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        .</span><span style=\"color:#59873A\">finally</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          pendingRequests</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">          loading</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      pendingRequests</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> request</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#B07D48\"> request</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      error</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#1E754F\"> as</span><span style=\"color:#2E8F82\"> Error</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 失败时清除缓存</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      throw</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 立即执行</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">immediate</span><span style=\"color:#999999\">)</span><span style=\"color:#59873A\"> execute</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 手动清除缓存方法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#59873A\"> clearCache</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">delete</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cacheKey</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> loading</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> execute</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> clearCache</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>使用：</p>\n<pre><code class=\"language-vue\"><div class=\"language-vue \"><span class=\"lang\">vue</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">script</span><span style=\"color:#B07D48\"> setup</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">import</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> useFetch</span><span style=\"color:#999999\"> }</span><span style=\"color:#1E754F\"> from</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">./useFetch</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> loading</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> useFetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/api/user</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  cacheTTL</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 300000</span><span style=\"color:#A0ADA0\"> // 缓存5分钟</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 手动触发请求（自动去重）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> refresh</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> execute</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">&#x3C;/</span><span style=\"color:#1E754F\">script</span><span style=\"color:#999999\">></span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>核心设计要点：</strong></p>\n<ol>\n<li><strong>双重缓存策略</strong>\n<ul>\n<li><strong>内存缓存</strong>：<code>Map</code>存储已成功请求的数据</li>\n<li><strong>请求中缓存</strong>：<code>pendingRequests</code>避免重复发送相同请求</li>\n</ul>\n</li>\n<li><strong>自动缓存失效</strong>\n通过<code>cacheTTL</code>控制缓存有效期，超时后自动重新请求</li>\n<li><strong>智能去重机制</strong>\n<ul>\n<li>相同URL同时触发多次请求时，仅实际发送一次</li>\n<li>后续请求共享同一Promise结果</li>\n</ul>\n</li>\n<li><strong>灵活扩展点</strong>\n<ul>\n<li>可扩展<code>cacheKey</code>生成逻辑（如包含请求参数）</li>\n<li>可添加请求取消功能（结合<code>AbortController</code>）</li>\n</ul>\n</li>\n</ol>\n"},{"title":"实现一个JS 函数， 解析 url 参数， 返回一个对象","answer":"<p><strong>方案 1：纯字符串分割（基础版</strong>）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> parseUrlParams</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> query</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> url</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">?</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)[</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  query</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">&#x26;</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">pair</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> pair</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">=</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      params</span><span style=\"color:#999999\">[</span><span style=\"color:#59873A\">decodeURIComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> decodeURIComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">val</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：'?name=John&#x26;age=30' → { name: 'John', age: '30' }</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：代码简单，兼容性好\n<strong>缺点</strong>：未处理数组参数（如 <code>?key=1&amp;key=2</code>）</p>\n<p><strong>方案 2：正则表达式（支持数组参数）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> parseUrlParams</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  url</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">[</span><span style=\"color:#A65E2B\">?&#x26;</span><span style=\"color:#999999\">]([</span><span style=\"color:#AB5959\">^</span><span style=\"color:#A65E2B\">=&#x26;#</span><span style=\"color:#999999\">]</span><span style=\"color:#2F798A\">+</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5E3F\">=</span><span style=\"color:#999999\">([</span><span style=\"color:#AB5959\">^</span><span style=\"color:#A65E2B\">&#x26;#</span><span style=\"color:#999999\">]</span><span style=\"color:#2F798A\">*</span><span style=\"color:#999999\">)</span><span style=\"color:#B5695977\">/</span><span style=\"color:#1E754F\">g</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">_</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    key</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> decodeURIComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    val</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> decodeURIComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">val</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    params</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#999999\"> [].</span><span style=\"color:#59873A\">concat</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">params</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：'?key=1&#x26;key=2' → { key: ['1', '2'] }</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：支持重复键转为数组\n<strong>缺点</strong>：正则复杂度高，需理解分组匹配</p>\n<p><strong>方案 3：URLSearchParams API（现代浏览器</strong>）</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> parseUrlParams</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> searchParams</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> URL</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">).</span><span style=\"color:#B07D48\">searchParams</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  searchParams</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    params</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> searchParams</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getAll</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">).</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      ?</span><span style=\"color:#B07D48\"> searchParams</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getAll</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      :</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> params</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：自动处理编码（如空格转为%20）</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：原生 API 简洁，自动解码\n<strong>缺点</strong>：需兼容性处理（IE 不支持）</p>\n"},{"title":"实现日期格式化 format 函数","answer":"<p><strong>1. 原生拼接法（手动补零）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> formatDate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">date</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> format</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">yyyy-MM-dd HH:mm:ss</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> year</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getFullYear</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> month</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getMonth</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">padStart</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> day</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getDate</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">padStart</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> hours</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getHours</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">padStart</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> minutes</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getMinutes</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">padStart</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> seconds</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> date</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getSeconds</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">padStart</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">0</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> format</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">yyyy</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> year</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">MM</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> month</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">dd</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> day</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">HH</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> hours</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">mm</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> minutes</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    .</span><span style=\"color:#59873A\">replace</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">ss</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> seconds</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用示例</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">formatDate</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Date</span><span style=\"color:#999999\">(),</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">yyyy/MM/dd</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 输出 \"2023/09/28\"</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. Intl.DateTimeFormat（本地化支持）</strong></p>\n<pre><code class=\"language-JavaScript\">function formatDate(date, locale = 'zh-CN', options = {}) {\n  return new Intl.DateTimeFormat(locale, {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    ...options\n  }).format(date);\n}\n\n// 使用示例\nconsole.log(formatDate(new Date())); // 输出 \"2023/09/28 14:30:45\"（中文环境）\nconsole.log(formatDate(new Date(), 'en-US')); // \"9/28/2023, 2:30:45 PM\"\n</code></pre>\n<p><strong>3. 正则替换法（灵活自定义）</strong></p>\n<pre><code class=\"language-JavaScript\">function formatDate(date, format = 'yyyy-MM-dd') {\n  const map = {\n    'y+': date.getFullYear(),                // 年\n    'M+': date.getMonth() + 1,               // 月\n    'd+': date.getDate(),                    // 日\n    'H+': date.getHours(),                   // 时（24小时制）\n    'm+': date.getMinutes(),                 // 分\n    's+': date.getSeconds(),                 // 秒\n    'S': date.getMilliseconds()              // 毫秒\n  };\n\n  for (const [key, value] of Object.entries(map)) {\n    const regex = new RegExp(`(${key})`);\n    if (regex.test(format)) {\n      const str = value.toString().padStart(2, '0');\n      format = format.replace(regex, str);\n    }\n  }\n  return format;\n}\n\n// 使用示例\nconsole.log(formatDate(new Date(), 'yyyy年MM月dd日 HH时mm分')); \n// 输出 \"2023年09月28日 14时30分\"\n</code></pre>\n"},{"title":"实现版本号排序","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> sortVersionsEnhanced</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">versions</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> versions</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#59873A\"> splitPart</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">part</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      part</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">split</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">(</span><span style=\"color:#5A6AA6\">\\d</span><span style=\"color:#2F798A\">+</span><span style=\"color:#999999\">)</span><span style=\"color:#B5695977\">/</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 拆分数字和非数字部分</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          .</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">Boolean</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">          .</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> isNaN</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> s</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#59873A\"> parseInt</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">s</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> aParts</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> splitPart</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> bParts</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> splitPart</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> maxLength</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">max</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">aParts</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> bParts</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">    </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> maxLength</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> aVal</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> aParts</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> aParts</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      const</span><span style=\"color:#B07D48\"> bVal</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> i</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> bParts</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> bParts</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">aVal</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> bVal</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> continue</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">      </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 数字优先于非数字</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> aVal</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">number</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> bVal</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">number</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> bVal</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">number</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> aVal</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">number</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#393A34\">      </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 比较实际值</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">aVal</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> bVal</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\">1</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"}]