[{"title":"移动端视口配置","answer":"<pre><code class=\"language-html\"><div class=\"language-html \"><span class=\"lang\">html</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">&#x3C;</span><span style=\"color:#1E754F\">meta</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">viewport</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B07D48\"> content</span><span style=\"color:#999999\">=</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\"> /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>initial-scale: 初始的缩放比例；</li>\n<li>minimum-scale: 允许用户缩放到的最小比例；</li>\n<li>maximum-scale: 允许用户缩放到的最大比例；</li>\n<li>user-scalable: 用户是否可以手动缩放；</li>\n</ul>\n"},{"title":"你解决过哪些移动端兼容问题？","answer":""},{"title":"H5 如何解决移动端适配问题？","answer":""},{"title":"移动端底部input被弹出的键盘遮挡问题如何解决？","answer":""},{"title":"如何解决移动端点击穿透问题？","answer":""},{"title":"如何解决1px问题","answer":""},{"title":"uniapp如何做分包？","answer":""},{"title":"微信小程序生命周期有哪些？","answer":""},{"title":"微信小程序的组件和页面有什么区别？","answer":""},{"title":"微信小程序如何获取元素宽高？","answer":""},{"title":"微信小程序和vue写法上有什么不同？","answer":""},{"title":"微信小程序跳转页面有几种方式？","answer":""},{"title":"微信小程序中app.json有什么用？和page.json有什么区别？","answer":""},{"title":"JSBridge是什么？","answer":""},{"title":"为什么小程序中无法使用 dom 相关的 api？","answer":"<p>小程序（如微信小程序、支付宝小程序等）无法使用 DOM 相关的 API 主要是因为它们的设计目标和运行环境与传统的 Web 应用有所不同。以下是一些原因：</p>\n<p><strong>1. 运行环境限制</strong></p>\n<p>小程序运行在一个沙箱环境中，这个环境与传统的浏览器环境不同。小程序的渲染引擎通常是针对特定平台进行优化的，不完全依赖于浏览器的 DOM 和 CSSOM 结构。为了保证跨平台的一致性和安全性，开发者无法直接操作 DOM。</p>\n<p><strong>2. 设计目标</strong></p>\n<ul>\n<li><strong>跨平台一致性</strong>：小程序的目标是让应用能够在不同的操作系统（如 iOS 和 Android）上以一致的方式运行。直接操作 DOM 可能导致平台间的不一致性，因此小程序框架提供了自己的视图层来保证一致性。</li>\n<li><strong>性能和安全性</strong>：直接操作 DOM 可能会影响性能和引入安全风险。小程序框架通过抽象和优化渲染过程来提高性能，并提供了更高的安全性。</li>\n</ul>\n<p><strong>3. 使用小程序的视图层</strong></p>\n<p>小程序使用自己的视图层（如 WXML 和 WXSS）来描述界面。这些视图层通过特定的 API 进行操作，开发者通过调用小程序提供的 API 来更新视图、处理用户交互等，而不是直接操作 DOM。这样做可以将视图渲染和逻辑处理分离，简化开发和维护。</p>\n<p><strong>4. 组件化</strong></p>\n<p>小程序强调组件化开发，通过定义组件并使用组件的生命周期来管理 UI 和交互。组件内部封装了 DOM 操作的细节，开发者只需关注组件的属性和事件，而不需要直接操作 DOM 元素。</p>\n"},{"title":"说说 jsBridge 的原理","answer":""}]