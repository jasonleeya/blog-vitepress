[{"title":"说说 JavaScript 中的数据类型？","description":"","answer":"<blockquote>\n<p><strong>String</strong>、<strong>Number</strong>、<strong>Boolean</strong>、<strong>Undefined</strong>、<strong>Null</strong>、<strong>Object</strong>、<strong>Symbol</strong>、<strong>BigInt</strong></p>\n</blockquote>\n<p><strong>其中Symbol、BigInt是Es6新增的数据类型：</strong></p>\n<p><code>Symbol</code> 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</p>\n<p><code>BigInt</code> 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</p>\n<p><strong>这些数据可以分为原始数据类型和引用数据类型：</strong></p>\n<p>栈：原始数据类型（Undefined、Null、Boolean、Number、String、Symbol、BigInt）</p>\n<p>堆：引用数据类型（对象、数组和函数）</p>\n"},{"title":"什么是变量提升？","description":"","answer":"<blockquote>\n<p>变量提升是JS代码执行前，把变量和函数的声明“提到”作用域顶部的过程。</p>\n</blockquote>\n<ul>\n<li><strong>var声明</strong>：变量会提升，但赋值不提升。比如 <code>console.log(a)</code> 会输出 <code>undefined</code>（而不是报错），接着 <code>var a = 5</code>。</li>\n<li><strong>let/const</strong>：不会提升，直接访问会报错（进入“暂时性死区”）。</li>\n<li><strong>函数声明</strong>：整体提升（可提前调用），但函数表达式（如 <code>var foo = function(){}</code>）按变量提升规则处理。</li>\n</ul>\n"},{"title":"说说你对闭包的理解？闭包使用场景","description":"","answer":"<blockquote>\n<p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p>\n</blockquote>\n<p>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p>\n<p>使用场景：</p>\n<ul>\n<li>创建私有变量。闭包可以将变量封装在函数内部，避免全局污染，保护变量不被外部访问和修改。</li>\n<li>延长变量的生命周期。闭包使得函数内部的变量在函数执行完后仍然存在，可以在函数外部继续使用。</li>\n</ul>\n<p><a href=\"https://zhuanlan.zhihu.com/p/686959137\" target=\"_blank\" rel=\"noopener noreferrer\">js闭包的6种应用场景</a></p>\n"},{"title":"说说你对作用域链的理解","description":"","answer":"<p>Javascript中的作用域说的是变量的可访问性和可见性。也就是说整个程序中哪些部分可以访问这个变量，或者说这个变量都在哪些地方可见。</p>\n<p>作用域分为，全局作用域，函数作用域，块级作用域，ES6引入了<code>let</code>和<code>const</code>关键字，和<code>var</code>关键字不同，在大括号中使用<code>let</code>和<code>const</code>声明的变量存在于块级作用域中，在大括号之外不能访问这些变量</p>\n<p>作用域链：作用域链是JavaScript中用于查找变量的一种机制。当在Javascript中使用一个变量的时候，首先Javascript引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域，这种一层一层的关系，就是 作用域链。</p>\n"},{"title":"谈谈 this 对象的理解","description":"","answer":"<blockquote>\n<p><code>this</code> 指向当前函数的执行上下文，谁“触发”函数，<code>this</code>就指向谁（动态变化）。</p>\n</blockquote>\n<p><strong>常见规则：</strong></p>\n<ol>\n<li>\n<p><strong>默认绑定</strong>：函数直接调用时，非严格模式指向 <code>window</code>，严格模式为 <code>undefined</code>。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> show</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">show</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 浏览器中：window（非严格模式）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>隐式绑定</strong>：通过对象调用时，指向该对象。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">a</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  log</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 'a'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>显式绑定</strong>：用 <code>call/apply/bind</code> 强制指定 <code>this</code>。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> log</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">call</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\"> });</span><span style=\"color:#A0ADA0\"> // 3  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>new绑定</strong>：构造函数中，<code>this</code>指向新创建的实例。</p>\n</li>\n<li>\n<p><strong>箭头函数</strong>：没有自己的 <code>this</code>，继承外层作用域的 <code>this</code>（固定不变）。</p>\n</li>\n</ol>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>对象方法内操作自身属性（如 <code>this.name</code>）。</li>\n<li>事件回调中指向触发事件的元素（如 <code>button.addEventListener('click', function() { this === button })</code>）。</li>\n<li>箭头函数解决回调中 <code>this</code> 丢失问题（如 <code>setTimeout(() =&gt; { this.xx }, 100)</code>）。</li>\n</ul>\n<p><strong>避坑：</strong></p>\n<ul>\n<li>避免将对象方法赋值给变量后调用（如 <code>const fn = obj.log; fn()</code> 会导致 <code>this</code> 丢失）。</li>\n<li>回调函数中优先用箭头函数或提前 <code>bind</code> 绑定 <code>this</code>。</li>\n</ul>\n"},{"title":"什么是原型，原型链? 有什么特点？","description":"","answer":"<p><strong>原型</strong></p>\n<p>每个函数都有一个 <code>prototype(原型)</code> 属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。原型对象自身也有一个原型，层层上溯，直到达到 <code>null</code>，形成一个“原型链”。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lsj97Blog/imgs@master/imgs/2025_04/%E5%8E%9F%E5%9E%8B.jpg\" alt=\"img\"></p>\n<ul>\n<li>每一个构造函数都拥有一个 <code>prototype</code> 属性，这个属性指向一个对象，也就是原型对象</li>\n<li>原型对象默认拥有一个 <code>constructor</code> 属性，指向指向它的那个构造函数</li>\n<li>每个对象都拥有一个隐藏的属性 <code>__proto__</code>，指向它的原型对象</li>\n</ul>\n<p><strong>原型链</strong></p>\n<p>JavaScript 中所有的对象都是由它的原型对象继承而来。而原型对象自身也是一个对象，它也有自己的原型对象，这样层层上溯，就形成了一个类似链表的结构，这就是原型链</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lsj97Blog/imgs@master/imgs/2025_04/%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg\" alt=\"img\"></p>\n<ul>\n<li>所有原型链的终点都是 <code>Object</code> 函数的 <code>prototype</code> 属性</li>\n<li><code>Objec.prototype</code> 指向的原型对象同样拥有原型，不过它的原型是 <code>null</code> ，而 <code>null</code> 则没有原型</li>\n</ul>\n"},{"title":"说说你对事件循环的理解","description":"","answer":"<p>javascript 是一门单线程语言，意思就是同一时间段只能做一件事，所有任务都需要排队依次完成.为了解决单线程运行阻塞问题，JavaScript 用到了计算机系统的一种运行机制，这种机制就叫做事件循环(Event Loop).</p>\n<p>在 JavaScript 中，所有的任务都可以分为</p>\n<ul>\n<li><strong>同步任务</strong>：立即执行的任务，同步任务一般会直接进入到主线程中执行</li>\n<li><strong>异步任务</strong>：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout </code>定时函数等</li>\n</ul>\n<p>同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就是事件循环。</p>\n<p>异步任务还可以细分为微任务与宏任务：</p>\n<p><strong>微任务</strong></p>\n<p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p>\n<p>常见的微任务有：</p>\n<ul>\n<li>Promise.then</li>\n<li>MutaionObserver</li>\n<li>Object.observe（已废弃；Proxy 对象替代）</li>\n<li>process.nextTick（Node.js）</li>\n</ul>\n<p><strong>宏任务</strong></p>\n<p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p>\n<p>常见的宏任务有：</p>\n<ul>\n<li>script (可以理解为外层同步代码)</li>\n<li>setTimeout/setInterval</li>\n<li>UI rendering/UI事件</li>\n<li>DOM 事件回调（如 click）等</li>\n<li>postMessage、MessageChannel</li>\n<li>setImmediate、I/O（Node.js）</li>\n</ul>\n<p>它们的执行机制是：</p>\n<ul>\n<li>执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中</li>\n<li>当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完</li>\n</ul>\n<p>宏任务与微任务关系如下图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lsj97Blog/imgs@master/imgs/2025_04/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1.png\" alt=\"img\"></p>\n"},{"title":"数组的常用方法有哪些？","description":"","answer":"<p><strong>增</strong></p>\n<ul>\n<li><code>push()</code> 在数组末尾添加任意多个值，返回数组的最新长度</li>\n<li><code>unshift()</code> 在数组开头添加任意多个值，然后返回新的数组长度</li>\n<li><code>splice()</code> 传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</li>\n<li><code>concat()</code> 首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</li>\n</ul>\n<p><strong>删</strong></p>\n<ul>\n<li><code>pop()</code> 删除数组的最后一项，返回被删除的项</li>\n<li><code>shift()</code> 删除数组的第一项，返回被删除的项</li>\n<li><code>splice()</code> 传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</li>\n<li><code>slice()</code> 创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</li>\n</ul>\n<p><strong>改</strong></p>\n<ul>\n<li><code>splice()</code> 传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</li>\n</ul>\n<p><strong>查</strong></p>\n<ul>\n<li><code>indexOf()</code> 返回要查找的元素在数组中的位置，如果没找到则返回<code>-1</code></li>\n<li><code>includes()</code> 返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></li>\n<li><code>find()</code> 返回第一个匹配的元素</li>\n</ul>\n<p><strong>迭代</strong></p>\n<ul>\n<li><code>forEach()</code> 对数组每一项都运行传入的函数，没有返回值</li>\n<li><code>map()</code> 对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</li>\n<li><code>filter()</code> 对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</li>\n<li><code>some()</code> 对数组每一项都运行传入的函数，如果有一项函数返回 <code>true</code> ，则这个方法返回 <code>true</code></li>\n<li><code>every()</code> 对数组每一项都运行传入的函数，如果对每一项函数都返回 <code>true</code> ，则这个方法返回 <code>true</code></li>\n</ul>\n<p><strong>排序</strong></p>\n<ul>\n<li><code>sort()</code> 方法接受一个比较函数，用于判断哪个值应该排在前面</li>\n</ul>\n<p><strong>反转</strong></p>\n<ul>\n<li><code>reverse()</code> 将数组元素反转</li>\n</ul>\n<p><strong>转换</strong></p>\n<ul>\n<li><code>join()</code> 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</li>\n</ul>\n"},{"title":"JavaScript 由哪三大部分组成?","description":"","answer":"<ol>\n<li><strong>ECMAScript（核心语法）</strong>：定义基础语法规则（变量、函数、循环等），是 JavaScript 的标准和语言核心。</li>\n<li><strong>DOM（文档对象模型）</strong>：提供操作 HTML/XML 文档的接口，用于动态修改页面内容和结构。</li>\n<li><strong>BOM（浏览器对象模型）</strong>：提供与浏览器交互的接口（如控制窗口、历史记录、地址栏等）。</li>\n</ol>\n"},{"title":"JavaScript 中的宿主对象和原生对象的区别？","description":"","answer":"<ol>\n<li><strong>原生对象</strong>是JavaScript语言自带的，比如 <code>Array</code>、<code>Date</code>、<code>Promise</code>。不管在浏览器还是Node.js都能用。</li>\n<li><strong>宿主对象</strong>是运行环境提供的，比如浏览器里的 <code>window</code>、<code>document</code>，或者Node.js里的 <code>fs</code> 模块。换一个环境可能就用不了了。</li>\n</ol>\n"},{"title":"DOM怎样添加、移除、移动、复制、创建和查找节点？","description":"","answer":"<ol>\n<li><strong>创建节点</strong>： <code>document.createElement('div')</code>（元素）或 <code>document.createTextNode('文字')</code>。</li>\n<li><strong>添加节点</strong>： <code>父元素.appendChild(子元素)</code>（末尾）或 <code>父元素.insertBefore(新元素, 参考元素)</code>（插入到参考元素前）。</li>\n<li><strong>移除节点</strong>： <code>父元素.removeChild(子元素)</code> 或直接 <code>子元素.remove()</code>。</li>\n<li><strong>移动节点</strong>： 先获取要移动的元素，再用 <code>新父元素.appendChild(旧元素)</code>，自动从原位置移除。</li>\n<li><strong>复制节点</strong>： <code>const clone = 元素.cloneNode(true)</code>（<code>true</code>表示深拷贝子节点）。</li>\n<li><strong>查找节点</strong>：\n<ul>\n<li><code>document.getElementById('id')</code></li>\n<li><code>document.querySelector('.类名')</code></li>\n<li><code>父元素.getElementsByTagName('div')</code></li>\n</ul>\n</li>\n</ol>\n"},{"title":"JavaScript 代码中的\"use strict\"是什么意思 ?","description":"","answer":"<p><code>&quot;use strict&quot;</code> 是 JavaScript 的<strong>严格模式声明</strong>，用于让代码在更严格的语法检查下运行，帮助开发者避免常见错误，提升代码安全性和性能。</p>\n<p><strong>严格模式的核心变化</strong>:</p>\n<ol>\n<li>变量必须声明</li>\n<li>禁止删除不可删除的属性</li>\n<li>禁止重复参数名</li>\n<li>限制 <code>this</code> 的值\n<ul>\n<li><strong>非严格模式</strong>：全局函数中的 <code>this</code> 指向 <code>window</code>。</li>\n<li><strong>严格模式</strong>：未绑定的函数中 <code>this</code> 为 <code>undefined</code>。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"字符串的常用方法有哪些？","description":"","answer":"<p><strong>增</strong></p>\n<ul>\n<li><code>concat</code> 用于将一个或多个字符串拼接成一个新字符串</li>\n</ul>\n<p><strong>删</strong></p>\n<p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li><code>slice()</code></li>\n<li><code>substr()</code></li>\n<li><code>substring()</code></li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> stringValue</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">hello world</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo world\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">substring</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo world\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">substr</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo world\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">slice</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 7</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo w\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">substring</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\">7</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo w\"</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">stringValue</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">substr</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 7</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // \"lo worl\"</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>改</strong></p>\n<p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p>\n<p>常见的有：</p>\n<ul>\n<li><code>trim()</code>、<code>trimLeft()</code>、<code>trimRight()</code> 删除前、后或前后所有空格符，再返回新的字符串</li>\n<li><code>repeat()</code> 接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</li>\n<li><code>padStart()</code>、<code>padEnd()</code> 复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</li>\n<li><code>toLowerCase()</code>、 <code>toUpperCase()</code> 大小写转化</li>\n</ul>\n<p><strong>查</strong></p>\n<ul>\n<li><code>chatAt()</code> 返回给定索引位置的字符，由传给方法的整数参数指定</li>\n<li><code>indexOf()</code> 从字符串开头去搜索传入的字符串，并返回位置,如果没找到，则返回<code>-1</code></li>\n<li><code>startWith()</code> 从字符串中搜索传入的字符串，并返回一个表示是否以搜索字符串开头的布尔值</li>\n<li><code>includes()</code> 从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</li>\n</ul>\n<p><strong>转换</strong></p>\n<ul>\n<li><code>split</code> 把字符串按照指定的分割符，拆分成数组中的每一项</li>\n</ul>\n<p><strong>模板匹配</strong></p>\n<ul>\n<li><code>match()</code> 接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</li>\n<li><code>search()</code> 接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 <code>-1</code></li>\n<li><code>replace()</code> 接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</li>\n</ul>\n"},{"title":"JavaSript 中如何判断一个变量的类型","description":"","answer":"<ul>\n<li><strong>typeof</strong></li>\n</ul>\n<p>对于基本数据类型判断是没有问题的，但是遇到引用数据类型(如：array object) 是不起作用 其中对 <code>array</code> <code>object</code> <code>null</code> 返回的结果都是<code>object</code>。</p>\n<ul>\n<li><strong>instanceof</strong></li>\n</ul>\n<p>可以检测array,object但是不能检测基本类型的数据也包括null也不可以 <strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p>\n<ul>\n<li><strong>constructor</strong></li>\n</ul>\n<p>不能判断undefined和null，并且使用它是不安全的，因为contructor的指向是可以改变的</p>\n<ul>\n<li><strong>Object.prototype.toString.call()</strong></li>\n</ul>\n<p>方法可以精确地判断一个变量的具体类型。它返回一个表示变量具体类型的字符串，格式为&quot;[object Type]&quot;。</p>\n<ul>\n<li><strong>Array.isArray</strong>判断是否是数组类型，<strong>Number.isNaN</strong>判断是否是<code>NaN</code></li>\n</ul>\n"},{"title":"如何检测一个对象是否为空对象？","description":"","answer":"<p><strong>1. <code>Object.keys()</code> 判断属性数量</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> isEmpty</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">keys</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">).</span><span style=\"color:#998418\">length</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. <code>JSON.stringify()</code> 序列化对比：</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> isEmpty</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">stringify</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">{}</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>缺点</strong>：忽略值为 <code>undefined</code> 或函数的属性，无法处理循环引用。</p>\n"},{"title":"typeof 于 instanceof 区别","description":"","answer":"<p><strong>typeof</strong>用于检测<strong>基本类型</strong>，返回类型字符串（null除外，返回‘object’）， <strong>instanceof</strong>用于检查<strong>引用类型</strong>（判断对象是否是某构造函数的实例）</p>\n"},{"title":"== 和 ===区别","description":"","answer":"<blockquote>\n<p>相等操作符<code>==</code>会做类型转换，再进行值的比较，全等运算符<code>===</code>不会做类型转换</p>\n</blockquote>\n<p><code>==</code>的转换规则：</p>\n<ul>\n<li>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</li>\n<li>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</li>\n<li>两个都为引用类型，则比较它们是否指向同一个对象</li>\n<li>null 和 undefined 相等</li>\n<li>存在 NaN 则返回 false</li>\n</ul>\n"},{"title":"什么是强制（显式）类型转换？什么是隐式类型转换？","description":"","answer":"<p>区别在于是否主动写代码转换类型：</p>\n<p><strong>1. 强制（显式）转换：</strong></p>\n<ul>\n<li>\n<p><strong>主动调用方法或函数</strong>，明确告诉JS转成什么类型。</p>\n</li>\n<li>\n<p><strong>常用方式</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">Number</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">123</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">     // 字符串→数字：123  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">String</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">123</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">       // 数字→字符串：\"123\"  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">Boolean</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">        // → false  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">parseInt</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">12px</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\">  // →12（提取数字部分）  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">toString</span><span style=\"color:#999999\">()</span><span style=\"color:#A0ADA0\">    // 显式调用对象转字符串  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 隐式转换：</strong></p>\n<ul>\n<li>\n<p><strong>JS引擎自动转换</strong>，通常发生在操作符或逻辑判断中。</p>\n</li>\n<li>\n<p><strong>常见场景</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 算术运算：非数字转成数字  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">5</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#A0ADA0\">    // →3（'5'隐式转5）  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">5</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#A0ADA0\">    // →\"52\"（+遇到字符串优先拼接）  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 逻辑判断：转布尔  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">if</span><span style=\"color:#999999\"> (</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#999999\"> ...</span><span style=\"color:#999999\"> }</span><span style=\"color:#A0ADA0\">      // 0 → false  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">!</span><span style=\"color:#B5695977\">''</span><span style=\"color:#A0ADA0\">                // →true（空字符串→false，取反后true）  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// ==比较：类型不同时自动转换  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">5</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> ==</span><span style=\"color:#2F798A\"> 5</span><span style=\"color:#A0ADA0\">           // →true（字符串转数字）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">null</span><span style=\"color:#AB5959\"> ==</span><span style=\"color:#AB5959\"> undefined</span><span style=\"color:#A0ADA0\">  // →true（特殊规则）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>避坑建议</strong>：</p>\n<ul>\n<li>用 <code>===</code> 代替 <code>==</code> 避免隐式转换（如 <code>0 === false</code> → false）。</li>\n<li>复杂转换尽量显式写清逻辑（如 <code>+new Date()</code> 转时间戳）。</li>\n</ul>\n"},{"title":"null 和 undefined 的区别？","description":"","answer":"<p><code>null</code>和<code>undefined</code>都是js中的特殊值，表示缺失或未定义的值。</p>\n<p><code>null</code>表示一个空对象指针，即该变量本应该指向一个对象，但是现在没有指向任何一个对象。</p>\n<p><code>undefined</code>表示一个未定义的值，即该变量没有被赋值或者被赋值为undefined。</p>\n"},{"title":"NaN是什么？它的类型是什么？如何可靠地判断一个值是否等于NaN？","description":"","answer":"<p><strong>NaN</strong>（Not a Number）表示“不是一个有效的数字”，但它的类型是 <code>Number</code>（属于数字类型）,判断方法<code>Number.isNaN(NaN);</code>,不能直接“==”或“===”判断，<code>NaN ===NaN</code>结果是<code>false</code></p>\n"},{"title":"isNaN 和 Number.isNaN 函数有什么区别？","description":"","answer":"<p>isNaN会对值先转换成数字，比如：<code>isNaN('一')</code>,<code>一</code>转换成了<code>NaN</code>，返回<code>true</code></p>\n<p>Number.isNaN不会进行转换，不是NaN一律返回false</p>\n"},{"title":"typeof null 返回什么？为什么？如何检测 null？","description":"","answer":"<p><strong><code>typeof null</code> 返回 <code>&quot;object&quot;</code></strong>,<strong>原因</strong>：JS早期设计的遗留问题。null的二进制表示全为0，而对象类型标签也是0，导致误判。虽不合理，但为兼容性保留至今。 <strong>检测 null 的正确方法</strong>：用严格等于（<code>===</code>）,不要用 <code>typeof</code>（会误判为对象）或 <code>==</code>（<code>null == undefined</code> 返回true）。</p>\n"},{"title":"深拷贝浅拷贝的区别？如何实现一个深拷贝？","description":"","answer":"<p><strong>浅拷贝</strong></p>\n<p>指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>\n<p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p>\n<p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>\n<p>实现：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> shallowClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> newObj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    for</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> prop</span><span style=\"color:#AB5959\"> in</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">hasOwnProperty</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">prop</span><span style=\"color:#999999\">)){</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            newObj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">prop</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">prop</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> newObj</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>深拷贝</strong></p>\n<p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>\n<ul>\n<li><code>JSON.stringify()</code>实现,只适合简单对象</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj2</span><span style=\"color:#999999\">=</span><span style=\"color:#B07D48\">JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">parse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">stringify</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj1</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li>循环递归</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 简单版</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">object</span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> obj</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> newObj</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> Array</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#999999\"> []</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#999999\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#AB5959\"> in</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    newObj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">])</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> newObj</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">//hash</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> WeakMap</span><span style=\"color:#999999\">())</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 如果是null或者undefined我就不进行拷贝操作</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> Date</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Date</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> RegExp</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> RegExp</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> Map</span><span style=\"color:#999999\">){</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      let</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">\t  obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> k</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">k</span><span style=\"color:#999999\">,</span><span style=\"color:#59873A\"> deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#999999\">)));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> Set</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">      let</span><span style=\"color:#B07D48\"> set</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">\t  obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> set</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\">)));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> \"</span><span style=\"color:#B56959\">object</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 是对象的话就要进行深拷贝</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">))</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> cloneObj</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">constructor</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  hash</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cloneObj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#AB5959\"> in</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">hasOwnProperty</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">      // 实现一个递归拷贝</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      cloneObj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> deepClone</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> hash</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> cloneObj</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"说说什么是事件代理?","description":"","answer":"<blockquote>\n<p>事件代理（事件委托）是把子元素的事件监听绑定到父元素上，利用<strong>事件冒泡</strong>统一处理。</p>\n</blockquote>\n<p><strong>为什么用？</strong></p>\n<ol>\n<li><strong>节省内存</strong>：减少事件处理函数数量（尤其动态添加的子元素无需重复绑定）。</li>\n<li><strong>简化逻辑</strong>：比如动态列表，新增元素自动继承父级事件。</li>\n</ol>\n<p><strong>关键点：</strong></p>\n<ul>\n<li>通过 <code>e.target</code> 识别实际点击的子元素。</li>\n<li>父元素不阻止冒泡（别用 <code>e.stopPropagation()</code>）。</li>\n</ul>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>列表、表格等重复元素的交互。</li>\n<li>大量子元素需要相同事件（如按钮组）。</li>\n</ul>\n<p><strong>对比直接绑定：</strong></p>\n<ul>\n<li>直接绑每个 <code>li</code>：3次事件监听。</li>\n<li>事件代理：1次监听，后续新增 <code>li</code> 自动生效。</li>\n</ul>\n"},{"title":"JavaScript 如何阻止冒泡事件和默认事件？","description":"","answer":"<ol>\n<li><strong>阻止冒泡</strong>： <code>event.stopPropagation()</code> （比如点击子元素时，阻止父元素的同类事件被触发）</li>\n<li><strong>阻止默认事件</strong>： <code>event.preventDefault()</code> （比如点了<code>&lt;a&gt;</code>链接但不想跳转，或提交表单时阻止页面刷新）</li>\n</ol>\n"},{"title":"说说基本数据类型和引⽤类型在存储上的差别","description":"","answer":"<p>基本类型直接存在栈内存中,引用类型数据存在堆内存中，变量保存的是堆内存的地址引用。</p>\n"},{"title":"进程和线程的区别是什么？","description":"","answer":"<blockquote>\n<p>进程是资源分配的最小单位，线程是程序执行的最小单位</p>\n</blockquote>\n<p><strong>通俗解释：</strong></p>\n<p>把电脑想象成一家餐馆：</p>\n<ul>\n<li><strong>进程</strong> = <strong>独立餐馆</strong>：每个餐馆有自己的厨房（内存）、食材（资源）、员工。一家店着火不会影响隔壁店。</li>\n<li><strong>线程</strong> = <strong>同一餐馆里的多个厨师</strong>：共享厨房和食材，协作高效，但一个厨师切到手可能整个餐馆停摆。</li>\n</ul>\n"},{"title":"JavaScript 中执行上下文和执行栈是什么？","description":"","answer":"<p>在 JavaScript 中，<strong>执行上下文（Execution Context）</strong> 是代码执行时的环境，每个函数调用或全局代码运行都会创建一个。它包含三部分：</p>\n<ol>\n<li><strong>变量环境</strong>（存放变量和函数声明，即变量提升），</li>\n<li><strong>作用域链</strong>（决定变量访问顺序），</li>\n<li><strong><code>this</code> 的值</strong>（由调用方式决定）。</li>\n</ol>\n<p><strong>执行栈（Execution Stack）</strong> 是管理执行上下文的调用栈，遵循后进先出（LIFO）规则。</p>\n<ul>\n<li>当代码开始执行，全局上下文首先入栈；</li>\n<li>每次调用函数，其上下文入栈并执行；</li>\n<li>执行完毕则弹出栈，回到上一层上下文。</li>\n</ul>\n<p>例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> a</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#59873A\"> b</span><span style=\"color:#999999\">();</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> b</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#59873A\"> c</span><span style=\"color:#999999\">();</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> c</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">a</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 执行栈顺序：全局 → a → b → c，执行完依次弹出。</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>核心作用</strong>：执行栈确保代码按顺序运行，而执行上下文保存了代码执行所需的所有信息（变量、作用域、<code>this</code>）。它们是理解闭包、作用域链和异步编程的基础。</p>\n"},{"title":"你知道哪些内置对象？","description":"","answer":"<p><strong>1. 核心内置对象（ECMAScript定义）</strong></p>\n<ul>\n<li><strong>数据包装</strong>：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Symbol</code>（ES6）</li>\n<li><strong>集合类</strong>：<code>Array</code>、<code>Object</code>、<code>Map</code>（ES6）、<code>Set</code>（ES6）</li>\n<li><strong>工具类</strong>：\n<ul>\n<li><code>Math</code>（数学计算，如 <code>Math.random()</code>）</li>\n<li><code>Date</code>（日期处理）</li>\n<li><code>JSON</code>（数据序列化）</li>\n<li><code>RegExp</code>（正则表达式）</li>\n<li><code>Error</code>（错误类型，如 <code>new TypeError()</code>）</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. 浏览器环境对象（BOM/DOM）</strong></p>\n<ul>\n<li><strong>BOM（浏览器对象模型）</strong>：\n<ul>\n<li><code>Window</code>（全局对象，如 <code>window.location</code>）</li>\n<li><code>Navigator</code>（浏览器信息，如 <code>navigator.userAgent</code>）</li>\n<li><code>History</code>（页面历史，如 <code>history.back()</code>）</li>\n</ul>\n</li>\n<li><strong>DOM（文档对象模型）</strong>：\n<ul>\n<li><code>Document</code>（文档操作，如 <code>document.getElementById()</code>）</li>\n<li><code>Element</code>（节点操作，如 <code>element.classList</code>）</li>\n<li><code>Event</code>（事件对象，如 <code>event.preventDefault()</code>）</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. ES6+新增对象</strong></p>\n<ul>\n<li><code>Promise</code>（异步处理）</li>\n<li><code>Proxy</code>（对象代理拦截）</li>\n<li><code>Reflect</code>（对象操作工具集）</li>\n<li><code>Intl</code>（国际化，如日期/货币格式化）</li>\n</ul>\n"},{"title":"说几条写 JavaScript 的基本规范","description":"","answer":"<p><strong>1. 代码风格</strong></p>\n<ul>\n<li><strong>缩进</strong>：统一用2个空格或Tab（避免混用）。</li>\n<li><strong>命名</strong>：变量/函数用驼峰式（如 <code>userName</code>），类名用帕斯卡（如 <code>class User{}</code>），常量全大写（如 <code>MAX_SIZE</code>）。</li>\n<li><strong>行尾分号</strong>：统一风格（要么全加，要么全不加）。</li>\n</ul>\n<p><strong>2. 变量与作用域</strong></p>\n<ul>\n<li><strong>声明</strong>：优先 <code>const</code>，其次 <code>let</code>，避免 <code>var</code>（防止变量提升问题）。</li>\n<li><strong>作用域</strong>：限制变量作用域，避免全局污染（用IIFE或模块化封装）。</li>\n<li><strong>链式赋值</strong>：避免 <code>let a = b = 0</code>（可能意外创建全局变量）。</li>\n</ul>\n<p><strong>3. 类型与比较</strong></p>\n<ul>\n<li><strong>类型检查</strong>：用 <code>===</code> 而非 <code>==</code>（避免隐式转换）。</li>\n<li><strong>布尔转换</strong>：显式判断（如 <code>if (arr.length &gt; 0)</code> 而非 <code>if (arr.length)</code>）。</li>\n<li><strong>判空</strong>：用 <code>value == null</code> 代替 <code>value === undefined || value === null</code>（简化代码）。</li>\n</ul>\n<p><strong>4. 模块化与异步</strong></p>\n<ul>\n<li><strong>模块导入</strong>：使用ES6 <code>import/export</code> 替代 <code>require</code>（静态加载）。</li>\n<li><strong>异步处理</strong>：优先 <code>async/await</code> 替代回调地狱或链式 <code>.then()</code>。</li>\n<li><strong>错误处理</strong>：Promise用 <code>.catch()</code>，async用 <code>try/catch</code>。</li>\n</ul>\n<p><strong>5. 性能与安全</strong></p>\n<ul>\n<li><strong>DOM操作</strong>：减少重绘（如批量修改后一次性插入文档）。</li>\n<li><strong>事件监听</strong>：及时解绑（如 <code>removeEventListener</code>）。</li>\n<li><strong>避免 <code>eval()</code></strong>：防止XSS攻击和性能问题。</li>\n</ul>\n<p><strong>6. 其他实用规范</strong></p>\n<ul>\n<li><strong>对象属性</strong>：动态属性名用计算属性（如 <code>{ [key]: value }</code>）。</li>\n<li><strong>数组成员</strong>：用 <code>includes()</code> 替代 <code>indexOf() !== -1</code>（更直观）。</li>\n<li><strong>字符串拼接</strong>：优先模板字符串（如 <code>Hello ${name}</code>）。</li>\n</ul>\n"},{"title":"JavaScript 创建对象的方法有哪些？","description":"<p>JavaScript 创建对象的常用方法包括<strong>对象字面量、构造函数、工厂模式、原型模式、组合模式、ES6类语法</strong>等，核心围绕原型链与封装实现不同场景需求。</p>\n<p><strong>具体方法与示例</strong></p>\n<p><strong>1. 对象字面量（直接创建）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  sayHi</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：简单直观，适合单例对象，无法复用。</li>\n</ul>\n<p><strong>2. 构造函数模式</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sayHi</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：通过 <code>new</code> 创建实例，每个方法需重新创建（内存浪费）。</li>\n</ul>\n<p><strong>3. 工厂模式</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> createPerson</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    name</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    sayHi</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> createPerson</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：封装创建过程，但无法识别对象类型（<code>instanceof</code> 无效）。</li>\n</ul>\n<p><strong>4. 原型模式</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Person</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Person</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sayHi</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：方法共享，属性独立需手动添加，引用类型属性可能被误改。</li>\n</ul>\n<p><strong>5. 组合模式（构造函数 + 原型）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Person</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sayHi</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>（<strong>最常用</strong>）：构造函数定义属性，原型定义方法，兼顾独立性与共享性。</li>\n</ul>\n<p><strong>6. 动态原型模式</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 仅首次调用时初始化原型  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">typeof</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">sayHi</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">function</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">    Person</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sayHi</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：延迟原型初始化，更优雅的封装。</li>\n</ul>\n<p><strong>7. 寄生构造函数模式</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Object</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  obj</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  obj</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">sayHi</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 覆盖默认返回的实例  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：类似工厂模式，但使用 <code>new</code> 操作符，适用于扩展已有对象。</li>\n</ul>\n<p><strong>8. Object.create()（原型式继承）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> personProto</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  sayHi</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">create</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">personProto</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">person</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：基于现有对象创建，无需构造函数，适合简单继承场景。</li>\n</ul>\n<p><strong>9. ES6类语法（语法糖）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Person</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  sayHi</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hi!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> person</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Person</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Jack</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>特点</strong>：语法更清晰，本质仍是原型继承，支持 <code>static</code>、<code>extends</code> 等特性。</li>\n</ul>\n<p><strong>对比与选型建议</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n<th><strong>适用场景</strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"JavaScript 如何实现继承？","description":"<p>JavaScript 通过 <strong>原型链机制</strong> 实现继承，常见方式包括原型链继承、构造函数继承、组合继承、寄生组合继承（最优解）及 ES6 <code>class</code> 语法糖，核心在于复用父类属性和方法。</p>\n<p><strong>1. 原型链继承</strong></p>\n<p><strong>原理</strong>：子类原型指向父类实例，继承父类方法。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Parent</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Child</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 继承  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 'Parent'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>父类引用属性被所有子类实例共享；</li>\n<li>无法向父类构造函数传参。</li>\n</ul>\n<p><strong>2. 构造函数继承</strong></p>\n<p><strong>原理</strong>：子类构造函数内调用父类构造函数，继承父类属性。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">call</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 继承属性  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Child</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 'Child'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>无法继承父类原型方法；</li>\n<li>方法需定义在构造函数中，无法复用。</li>\n</ul>\n<p><strong>3. 组合继承（常用）</strong></p>\n<p><strong>原理</strong>：结合原型链继承方法 + 构造函数继承属性。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">call</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 第二次调用 Parent  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Child</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 第一次调用 Parent  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Child</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 'Child'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>父类构造函数被调用两次，导致子类原型中存在冗余属性。</li>\n</ul>\n<p><strong>4. 寄生组合继承（最优解）</strong></p>\n<p><strong>原理</strong>：通过 <code>Object.create()</code> 优化组合继承，避免重复调用父类构造函数。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">  this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">call</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 关键：创建父类原型的副本，避免直接引用  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Child</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">create</span><span style=\"color:#999999\">(</span><span style=\"color:#998418\">Parent</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">Child</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">constructor</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Child</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 修复构造函数指向  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Child</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 'Child'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>只调用一次父类构造函数；</li>\n<li>原型链保持纯净，无冗余属性。</li>\n</ul>\n<p><strong>5. ES6 <code>class</code> 继承</strong></p>\n<p><strong>原理</strong>：语法糖，底层基于寄生组合继承实现。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Parent</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  say</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Child</span><span style=\"color:#AB5959\"> extends</span><span style=\"color:#59873A\"> Parent</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    super</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 调用父类构造函数  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> child</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Child</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Child</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">child</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">say</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 'Child'  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>语法简洁，内置 <code>super</code> 访问父类；</li>\n<li>支持 <code>static</code> 方法继承；</li>\n<li>推荐使用，需 Babel 转译兼容旧浏览器。</li>\n</ul>\n<p><strong>继承方案对比</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>方式</strong></th>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n<th><strong>推荐指数</strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"说说new操作符具体干了什么？","description":"","answer":"<ul>\n<li>创建一个新的对象<code>obj</code></li>\n<li>将对象与构建函数通过原型链连接起来</li>\n<li>将构建函数中的<code>this</code>绑定到新建的对象<code>obj</code>上</li>\n<li>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> mynew</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">Func</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 1.创建一个新对象</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 2.新对象原型指向构造函数原型对象</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    obj</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">__proto__</span><span style=\"color:#999999\"> =</span><span style=\"color:#998418\"> Func</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 3.将构建函数的this指向新对象</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Func</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">apply</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // 4.根据返回值判断</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#AB5959\"> instanceof</span><span style=\"color:#2E8F82\"> Object</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> result</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> obj</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"new一个函数和直接调用函数以及和 Object.create 的区别?","description":"<p>在 JavaScript 中，<code>new</code> 调用构造函数、直接调用函数和 <code>Object.create()</code> 三者在 <strong>对象创建方式</strong>、<strong>原型链处理</strong>、<strong><code>this</code> 绑定</strong> 和 <strong>返回值</strong> 上存在显著差异。以下是详细对比：</p>\n<p><strong>一、核心区别对比表</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th style=\"text-align:left\"><code>new Func()</code></th>\n<th style=\"text-align:left\">直接调用 <code>Func()</code></th>\n<th style=\"text-align:left\"><code>Object.create(obj)</code></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"说说你对 new.target 的理解","description":"","answer":""},{"title":"说说 JavaScript 中的事件模型","description":"","answer":"<p><strong>1. 原始事件模型（DOM0级）</strong></p>\n<p>事件绑定监听函数比较简单, 有两种方式：</p>\n<ul>\n<li>HTML代码中直接绑定</li>\n</ul>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>&#x3C;input type=\"button\" onclick=\"fun()\"></span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ul>\n<li>通过<code>JS</code>代码绑定</li>\n</ul>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>var btn = document.getElementById('.btn');</span></span>\n<span class=\"line\"><span>btn.onclick = fun;</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>特性：</p>\n<ul>\n<li>绑定速度快<code>DOM0</code>级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</li>\n<li>只支持冒泡，不支持捕获</li>\n<li>同一个类型的事件只能绑定一次</li>\n</ul>\n<p><strong>2. 标准事件模型（DOM2级）</strong></p>\n<p>在该事件模型中，一次事件共有三个过程:</p>\n<ul>\n<li>事件捕获阶段：事件从<code>document</code>一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数</li>\n<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n</ul>\n<p>事件绑定监听函数的方式如下:</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>addEventListener(eventType, handler, useCapture)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>事件移除监听函数的方式如下:</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>removeEventListener(eventType, handler, useCapture)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>特性：</p>\n<ul>\n<li>可以在一个<code>DOM</code>元素上绑定多个事件处理器，各自并不会冲突</li>\n<li>当第三个参数(<code>useCapture</code>)设置为<code>true</code>就在捕获过程中执行，反之在冒泡过程中执行处理函数</li>\n</ul>\n<p><strong>3. IE事件模型（基本不用）</strong></p>\n<p>IE事件模型共有两个过程:</p>\n<ul>\n<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。</li>\n<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n</ul>\n<p>事件绑定监听函数的方式如下:</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>attachEvent(eventType, handler)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p>事件移除监听函数的方式如下:</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>detachEvent(eventType, handler)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n"},{"title":"bind、call、apply 区别？分别如何实现?","description":"","answer":"<p><code>call </code>、<code>apply </code>、<code>bind </code>作用是改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向。</p>\n<p><code>apply</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以数组的形式传入，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次；</p>\n<p><code>call</code>方法的第一个参数也是<code>this</code>的指向，后面传入的是一个参数列表，跟<code>apply</code>一样，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次；</p>\n<p><code>bind</code>方法和<code>call</code>很相似，第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)</p>\n<p>改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数。</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>Function.prototype.myCall = function (context, ...args){</span></span>\n<span class=\"line\"><span>    context = context || window</span></span>\n<span class=\"line\"><span>    // 这里的 this 是指向 fn 的，通过 this 就可以获取 fn，context 是我们的 obj，可以直接给 obj 添加一个函数属性</span></span>\n<span class=\"line\"><span>    context.fn = this</span></span>\n<span class=\"line\"><span>    delete context.fn(...args)</span></span>\n<span class=\"line\"><span>    return</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>Function.prototype.myApply = function (context, args){</span></span>\n<span class=\"line\"><span>    context = context || window</span></span>\n<span class=\"line\"><span>    context.fn = this</span></span>\n<span class=\"line\"><span>    delete context.fn(args)</span></span>\n<span class=\"line\"><span>    return</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>Function.prototype.myBind = function (context) {</span></span>\n<span class=\"line\"><span>  if (typeof this !== 'function') {</span></span>\n<span class=\"line\"><span>    throw new TypeError('Error')</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>  let self = this</span></span>\n<span class=\"line\"><span>  return function (...args) {</span></span>\n<span class=\"line\"><span>    context.temp = self</span></span>\n<span class=\"line\"><span>    context.temp(...args)</span></span>\n<span class=\"line\"><span>    delete context.temp</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n"},{"title":"Javascript 本地存储的方式有哪些？区别及应用场景？","description":"","answer":"<p>javaScript本地缓存的方法我们主要讲述以下四种：</p>\n<ul>\n<li><strong>cookie</strong></li>\n</ul>\n<p><code>Cookie</code>，类型为小型文本文件，一般不超过 4KB，是为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 <code>HTTP </code>无状态导致的问题</p>\n<p>但是<code>cookie</code>在每次请求中都会被发送，如果不使用 <code>HTTPS </code>并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 <code>cookie </code>保持登录态的网站上，如果 <code>cookie </code>被窃取，他人很容易利用你的 <code>cookie </code>来假扮成你登录网站</p>\n<ul>\n<li>localStorage</li>\n</ul>\n<p><code>localStorage</code> 用于持久化的本地存储数据，大小一般为5M（跟浏览器厂商有关系），保存的数据没有过期时间，直到手动去删除</p>\n<ul>\n<li>sessionStorage</li>\n</ul>\n<p><code>sessionStorage </code>和 <code>localStorage </code>使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，<code>sessionStorage</code> 将会删除数据</p>\n<ul>\n<li>indexedDB</li>\n</ul>\n<p><code>IndexedDB</code> 是一个内置于浏览器的大型对象存储，允许您使用键值对持久存储数据</p>\n"},{"title":"什么是防抖和节流？有什么区别？如何实现？","description":"","answer":"<p>本质上是优化高频率执行代码的一种手段</p>\n<ul>\n<li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li>\n</ul>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>//时间戳写法</span></span>\n<span class=\"line\"><span>function throttled1(fn, delay = 500) {</span></span>\n<span class=\"line\"><span>    let oldtime = Date.now()</span></span>\n<span class=\"line\"><span>    return function (...args) {</span></span>\n<span class=\"line\"><span>        let newtime = Date.now()</span></span>\n<span class=\"line\"><span>        if (newtime - oldtime >= delay) {</span></span>\n<span class=\"line\"><span>            fn.apply(null, args)</span></span>\n<span class=\"line\"><span>            oldtime = Date.now()</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>//定时器写法</span></span>\n<span class=\"line\"><span>function throttled2(fn, delay = 500) {</span></span>\n<span class=\"line\"><span>    let timer = null</span></span>\n<span class=\"line\"><span>    return function (...args) {</span></span>\n<span class=\"line\"><span>        if (!timer) {</span></span>\n<span class=\"line\"><span>            timer = setTimeout(() => {</span></span>\n<span class=\"line\"><span>                fn.apply(this, args)</span></span>\n<span class=\"line\"><span>                timer = null</span></span>\n<span class=\"line\"><span>            }, delay);</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ul>\n<li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> debounce</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">func</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> wait</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> timeout</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        let</span><span style=\"color:#B07D48\"> context</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 保存this指向</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        let</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> arguments</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 拿到event对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">        clearTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">timeout</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">        timeout</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> setTimeout</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">function</span><span style=\"color:#999999\">(){</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">            func</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">apply</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">context</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        },</span><span style=\"color:#B07D48\"> wait</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"你知道哪些数组去重方法？","description":"","answer":"<p><strong>1. 使用 <code>Set</code>（ES6 最简单方式）</strong></p>\n<p><strong>原理</strong>：利用 <code>Set</code> 数据结构元素唯一的特性。 <strong>代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> uniqueArray</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [...</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">)];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：代码简洁，时间复杂度 O(n)。 <strong>缺点</strong>：无法处理对象类型的去重（对象引用不同视为不同元素）。</p>\n<p><strong>2. <code>filter</code> + <code>indexOf</code>（兼容性好）</strong></p>\n<p><strong>原理</strong>：过滤出第一个出现的元素。 <strong>代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> uniqueArray</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">indexOf</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：兼容旧环境（ES5）。 <strong>缺点</strong>：时间复杂度 O(n²)，不处理 <code>NaN</code>（<code>indexOf</code> 无法识别 <code>NaN</code>）。</p>\n<p><strong>3. <code>reduce</code> 累加去重</strong></p>\n<p><strong>原理</strong>：遍历数组，仅保留未累积过的元素。 <strong>代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> uniqueArray</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">includes</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cur</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">],</span><span style=\"color:#999999\"> []);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：函数式编程风格。 <strong>缺点</strong>：时间复杂度 O(n²)，<code>includes</code> 同样无法处理 <code>NaN</code>。</p>\n<p><strong>4. 排序后相邻比较（空间复杂度低）</strong></p>\n<p><strong>原理</strong>：排序后相同元素相邻，跳过重复项。 <strong>代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> sortedArr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">array</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">sort</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> uniqueArray</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> sortedArr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> index</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B07D48\"> sortedArr</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#AB5959\">-</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">]);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：时间复杂度 O(n log n)（排序占主导）。 <strong>缺点</strong>：改变原数组顺序，无法处理对象。</p>\n<p><strong>5. 处理 <code>NaN</code> 的增强版</strong></p>\n<p><strong>原理</strong>：<code>NaN</code> 是唯一不等于自身的值，需特殊判断。 <strong>代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> uniqueArray</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  index</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">findIndex</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> i</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">is</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">i</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> NaN</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">is</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> NaN</span><span style=\"color:#999999\">))</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">;  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>适用场景</strong>：数组中可能包含 <code>NaN</code>。</p>\n<p><strong>6. 对象数组去重（特定属性去重）</strong></p>\n<p><strong>原理</strong>：利用哈希表记录唯一键值。 <strong>代码</strong>：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>const uniqueByKey = (arr, key) => {  </span></span>\n<span class=\"line\"><span>  const map = new Map();  </span></span>\n<span class=\"line\"><span>  return arr.filter(item => !map.has(item[key]) &#x26;&#x26; map.set(item[key], true));  </span></span>\n<span class=\"line\"><span>};  </span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>示例</strong>：根据 <code>id</code> 去重：<code>uniqueByKey(users, 'id')</code>。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>推荐方法</strong>：优先使用 <code>Set</code>（简单高效），需处理 <code>NaN</code> 或对象时选择对应方案。</li>\n<li><strong>性能考量</strong>：数据量大时避免 O(n²) 方法（如双重循环）。</li>\n<li><strong>特殊类型</strong>：注意区分引用类型（对象、数组）的去重逻辑</li>\n</ul>\n"},{"title":"说说 ajax 原理?","description":"","answer":"<p>AJAX（Asynchronous JavaScript and XML）核心是<strong>用JavaScript异步发送HTTP请求</strong>，无需刷新页面即可更新数据。</p>\n<p><strong>原理步骤：</strong></p>\n<ol>\n<li>\n<p><strong>创建请求对象</strong>： 用 <code>XMLHttpRequest</code>（传统）或 <code>fetch</code> API（现代）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> xhr</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> XMLHttpRequest</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>配置请求</strong>： 指定方法（GET/POST等）、URL、是否异步（默认true）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">open</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">GET</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/api/data</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>设置回调</strong>： 监听请求状态变化，处理响应。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onreadystatechange</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">readyState</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">status</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 200</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">responseText</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 获取响应数据  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>发送请求</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">xhr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">send</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // POST可传参数，如xhr.send(JSON.stringify({ key: 'value' }));  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"异步加载 JS 的方式有哪些?","description":"","answer":"<p><strong>1. <code>defer</code> 属性</strong></p>\n<ul>\n<li><strong>用法</strong>：<code>&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><strong>特点</strong>：\n<ul>\n<li><strong>延迟执行</strong>：脚本在 HTML 解析完成后、<code>DOMContentLoaded</code> 事件前按顺序执行。</li>\n<li><strong>不阻塞渲染</strong>：异步下载，保持执行顺序（适合多个依赖脚本）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. <code>async</code> 属性</strong></p>\n<ul>\n<li><strong>用法</strong>：<code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><strong>特点</strong>：\n<ul>\n<li><strong>异步执行</strong>：下载完成后立即执行，可能打乱脚本顺序。</li>\n<li><strong>不保证顺序</strong>：适合独立无依赖的脚本（如统计代码）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. 动态创建 Script 标签</strong></p>\n<ul>\n<li>\n<p><strong>用法</strong>：通过 JS 插入 <code>&lt;script&gt;</code> 标签，按需加载。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> script</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">script</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">script.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li><strong>完全控制加载时机</strong>（如点击事件触发后加载）。</li>\n<li>默认异步，可通过 <code>script.async = false</code> 改为同步（不推荐）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>4. ES6 模块（<code>type=&quot;module&quot;</code>）</strong></p>\n<ul>\n<li><strong>用法</strong>：<code>&lt;script type=&quot;module&quot; src=&quot;module.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><strong>特点</strong>：\n<ul>\n<li>默认启用 <code>defer</code> 行为，支持 <code>async</code> 属性（如 <code>&lt;script type=&quot;module&quot; async&gt;</code>）。</li>\n<li>支持 <code>import/export</code> 语法，依赖按需加载。</li>\n</ul>\n</li>\n</ul>\n<p><strong>5. <code>setTimeout</code> 延迟加载</strong></p>\n<ul>\n<li>\n<p><strong>用法</strong>：将脚本加载包裹在 <code>setTimeout</code> 中。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> script</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">script</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  script</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">script.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>适用场景</strong>：非关键脚本延后加载（如首屏渲染后再加载广告）。</p>\n</li>\n</ul>\n<p><strong>6. 第三方库（如 RequireJS、Webpack 动态导入）</strong></p>\n<ul>\n<li>\n<p><strong>RequireJS（AMD 规范）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">require</span><span style=\"color:#999999\">([</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">moduleA</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">moduleB</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">],</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">moduleA</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> moduleB</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 依赖加载完成后执行  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>Webpack 动态导入</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">import</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">module.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">module</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 按需加载模块  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>特点</strong>：工程化方案，支持代码分割（Code Splitting）。</p>\n</li>\n</ul>\n"},{"title":"说说同步和异步的区别?","description":"","answer":"<p><strong>同步</strong>：任务按顺序依次执行，前一个任务未完成时，后续任务<strong>必须等待</strong>。</p>\n<p><strong>异步</strong>：任务触发后<strong>不阻塞后续代码</strong>，结果通过回调、Promise等方式延迟处理。</p>\n"},{"title":"Javascipt中 async await 和 promise 和 generator 有什么区别？","description":"","answer":"<ol>\n<li><strong>Promise</strong>：\n<ul>\n<li><strong>链式调用</strong>（<code>.then().catch()</code>），解决回调地狱。</li>\n<li>直接表示异步操作的最终状态（成功/失败）。</li>\n</ul>\n</li>\n<li><strong>Generator</strong>：\n<ul>\n<li>用 <code>function*</code> 和 <code>yield</code> <strong>暂停函数执行</strong>，手动控制流程（需配合 <code>next()</code>）。</li>\n<li>本身不直接处理异步，需结合其他方案（如 <code>co</code> 库）。</li>\n</ul>\n</li>\n<li><strong>Async/Await</strong>：\n<ul>\n<li>本质是 <strong>Promise 的语法糖</strong>，用同步写法处理异步。</li>\n<li><code>async</code> 函数隐式返回 Promise，<code>await</code> 后接 Promise。</li>\n<li><strong>更简洁直观</strong>，错误处理用 <code>try/catch</code>。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"谈谈你对 Promise 的理解","description":"","answer":"<p><code>promise</code>是异步编程的一种方案，解决了地狱回调的问题，是一种链式调动的方式</p>\n<p><code>Promise</code> 简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>\n<p><strong>核心特性：</strong></p>\n<ol>\n<li><strong>三种状态</strong>\n<ul>\n<li><code>Pending</code>（等待中）→ <code>Fulfilled</code>（成功） 或 <code>Rejected</code>（失败）</li>\n<li><strong>状态不可逆</strong>：一旦改变（resolve/reject），不可回退。</li>\n</ul>\n</li>\n<li><strong>链式调用</strong>\n<ul>\n<li>通过 <code>.then()</code> 串联操作，解决回调地狱。</li>\n</ul>\n</li>\n<li><strong>错误统一捕获</strong>\n<ul>\n<li>用 <code>.catch()</code> 捕获链中任意环节的异常。</li>\n</ul>\n</li>\n</ol>\n<p><strong>常用方法：</strong></p>\n<ol>\n<li><strong>实例方法</strong>\n<ul>\n<li><code>then()</code>：处理成功结果。</li>\n<li><code>catch()</code>：处理失败。</li>\n<li><code>finally()</code>：无论成功/失败都会执行（适合清理操作）。</li>\n</ul>\n</li>\n<li><strong>静态方法</strong>\n<ul>\n<li><code>Promise.all([p1, p2])</code>：<strong>全部成功</strong>才返回结果数组，任一失败立即终止。</li>\n<li><code>Promise.race([p1, p2])</code>：取最先完成的结果（无论成功/失败）。</li>\n<li><code>Promise.allSettled([p1, p2])</code>：等所有 Promise 完成，返回状态和结果数组。</li>\n<li><code>Promise.any([p1, p2])</code>：取第一个成功的 Promise。</li>\n</ul>\n</li>\n</ol>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>替代回调函数，解决嵌套问题。</li>\n<li>配合 <code>async/await</code> 编写更同步风格的异步代码：</li>\n</ul>\n"},{"title":"谈谈你对 async await 的理解","description":"","answer":"<p><strong>1. 本质与作用</strong></p>\n<ul>\n<li><strong>简化异步流程</strong>：<code>async/await</code> 是 ES2017 引入的语法糖，旨在以同步代码的书写方式处理异步操作，避免“回调地狱”（Callback Hell）和 <code>Promise</code> 链式调用的嵌套问题。</li>\n<li><strong>基于 Promise</strong>：<code>async</code> 函数本质是返回一个 <code>Promise</code> 对象，而 <code>await</code> 后通常跟随一个 <code>Promise</code>，并等待其解决（resolve）或拒绝（reject）。</li>\n</ul>\n<p><strong>2. 执行机制</strong></p>\n<ul>\n<li><strong>暂停与恢复</strong>：在 <code>async</code> 函数中，遇到 <code>await</code> 会暂停当前函数的执行，交出线程控制权（非阻塞主线程），直到等待的 <code>Promise</code> 状态变更后继续执行后续代码。</li>\n<li><strong>事件循环协作</strong>：<code>await</code> 的等待过程依赖事件循环机制。如果 <code>Promise</code> 已解决，<code>await</code> 直接返回值；若未解决，则挂起函数，将后续代码推入微任务队列。</li>\n</ul>\n<p><strong>3. 错误处理</strong></p>\n<ul>\n<li><strong>try/catch 捕获异常</strong>：通过 <code>try...catch</code> 可以捕获 <code>await</code> 表达式中 <code>Promise</code> 的拒绝（reject）或同步错误。<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> fetchData</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">https://api.example.com</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">请求失败:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> error</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li><strong>未捕获的异常</strong>：若未使用 <code>try...catch</code>，<code>async</code> 函数返回的 <code>Promise</code> 会被标记为 <code>rejected</code>，需通过 <code>.catch()</code> 处理。</li>\n</ul>\n<p><strong>4. 对比传统异步方案</strong></p>\n<ul>\n<li>\n<p><strong>对比 Promise 链</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// Promise 链式调用</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">fetchData</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">())</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">error</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// async/await</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> process</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetchData</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>async/await</code> 更接近同步逻辑，可读性更强。</p>\n</li>\n<li>\n<p><strong>对比 Generator</strong>：<code>async/await</code> 是 Generator + Promise 的语法封装，省去手动执行生成器的步骤。</p>\n</li>\n</ul>\n<p><strong>5. 注意事项</strong></p>\n<ul>\n<li><strong>并行优化</strong>：多个独立的异步操作应并行执行，避免串行等待。<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 低效（串行）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetchA</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetchB</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 高效（并行）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">all</span><span style=\"color:#999999\">([</span><span style=\"color:#59873A\">fetchA</span><span style=\"color:#999999\">(),</span><span style=\"color:#59873A\"> fetchB</span><span style=\"color:#999999\">()]);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li><strong>顶层作用域限制</strong>：<code>await</code> 只能在 <code>async</code> 函数内使用，在全局或普通函数中需包裹 IIFE：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">async</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  await</span><span style=\"color:#59873A\"> init</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">})();</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>6. 底层原理</strong></p>\n<ul>\n<li><strong>Generator + 自动执行器</strong>：Babel 等工具会将 <code>async/await</code> 转换为 Generator 函数 + 自动执行器（类似 <code>co</code> 库）的代码。<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 转换前</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> example</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  await</span><span style=\"color:#59873A\"> task</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 转换后（简化）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> example</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> spawn</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">function</span><span style=\"color:#1E754F\">*</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    yield</span><span style=\"color:#59873A\"> task</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>核心价值</strong>：<code>async/await</code> 通过同步代码风格实现异步逻辑，提升代码可读性与可维护性。</li>\n<li><strong>适用场景</strong>：适用于需要顺序执行的异步任务（如接口链式调用），或需要精细控制错误边界的情况。</li>\n<li><strong>性能</strong>：与 <code>Promise</code> 无本质差异，但需注意避免不必要的串行等待。</li>\n</ul>\n"},{"title":"Promise.all,Promise.allSettled,Promise.race分别有哪些应用场景？","description":"","answer":"<ol>\n<li><strong>Promise.all</strong>：\n<ul>\n<li><strong>特点</strong>：所有Promise成功才返回结果数组；<strong>一败全败</strong>。</li>\n<li><strong>场景</strong>：多接口数据<strong>强依赖</strong>，比如同时请求用户信息和配置，全部成功再渲染页面。</li>\n</ul>\n</li>\n<li><strong>Promise.allSettled</strong>：\n<ul>\n<li><strong>特点</strong>：无论成功失败，<strong>全执行完</strong>返回结果数组（带状态）。</li>\n<li><strong>场景</strong>：批量操作后统计结果，比如上传多个文件，需知道哪些成功/失败。</li>\n</ul>\n</li>\n<li><strong>Promise.race</strong>：\n<ul>\n<li><strong>特点</strong>：<strong>竞速</strong>，取第一个完成的（无论成功/失败）。</li>\n<li><strong>场景</strong>：接口超时控制（如请求与setTimeout竞速），或择优选用最快响应的CDN资源。</li>\n</ul>\n</li>\n</ol>\n<p><strong>举个栗子</strong>：</p>\n<ul>\n<li><code>Promise.all</code>：等全家人都到齐再开饭。</li>\n<li><code>Promise.allSettled</code>：大家各自汇报到没到，没到也说原因。</li>\n<li><code>Promise.race</code>：谁先跑到终点算谁的。</li>\n</ul>\n"},{"title":"try...catch 可以捕获到异步代码中的错误吗？","description":"","answer":"<p>无法捕获<strong>纯回调式异步</strong>例如 <code>setTimeout</code>、<code>XMLHttpRequest</code> 或未返回 <code>Promise</code> 的回调函数中的错误,可捕获通过 <code>async/await</code> 将 <code>Promise</code> 转换为同步的写法</p>\n"},{"title":"Promise 中的值穿透是什么？","description":"","answer":"<p>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。</p>\n<p>当then中传入的不是函数，则这个then返回的promise的data，将会保存上一个的promise.data。这就是发生值穿透的原因。而且每一个无效的then所返回的promise的状态都为resolved。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">复制1Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 注意这里</span></span>\n<span class=\"line\"><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#998418\">Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">))</span></span>\n<span class=\"line\"><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">      .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">log</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 输出 1</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"Javascript 中的计时是否精确？","description":"","answer":"<ul>\n<li><strong>硬件</strong>：就算是原子钟都会有误差，</li>\n<li><strong>系统</strong>：setTimeout setIntervel本质是调用系统接口，不同操作系统会有差异</li>\n<li><strong>标准</strong>：web标准规定嵌套层次超过5层就会有超过5ms延迟</li>\n<li><strong>浏览器优化策略</strong>：\n<ul>\n<li>后台标签页的计时器会被<strong>降频</strong>（如最小间隔4ms→1秒以上）。</li>\n<li>不同浏览器对计时器的<strong>最低延迟限制不同</strong>（如Chrome通常为1ms，但受硬件等因素影响）。</li>\n</ul>\n</li>\n<li><strong>事件循环机制</strong>：\n<ul>\n<li><code>setTimeout</code>/<code>setInterval</code> 的回调会被推入任务队列，<strong>必须等主线程空闲</strong>才会执行。</li>\n<li>如果主线程被同步代码（如复杂计算）阻塞，计时器即使到了时间也无法触发。</li>\n</ul>\n</li>\n</ul>\n<p><strong>举个栗子</strong>： 设 <code>setTimeout(fn, 100)</code>，实际触发可能是102ms或更久，尤其在低端设备或页面卡顿时会更明显。</p>\n<p>https://v.douyin.com/ctHRAUHlwu4/</p>\n"},{"title":"那些操作会造成内存泄漏？","description":"","answer":"<p><strong>1. 意外创建全局变量</strong>：函数内未声明变量直接赋值，挂到 <code>window</code> 上无法回收。</p>\n<p><strong>2. 闭包未释放</strong>：函数内返回函数，长期持有外部变量引用。</p>\n<p><strong>3. 未清理的DOM引用</strong>：JS中保留DOM元素引用，但DOM已从页面移除。</p>\n<p><strong>4. 定时器/回调未清除</strong>：<code>setInterval</code> 或事件监听未及时销毁。</p>\n<p><strong>5. 未解绑的事件监听</strong>：元素移除后仍绑定了事件。</p>\n<p><strong>6. 缓存无限增长</strong>：缓存对象未清理，数据越积越多。</p>\n"},{"title":"说说你的 ES6-ES12 的了解","description":"","answer":"<p>ES6到ES12的主要特性我简要总结如下：</p>\n<ul>\n<li><strong>ES6 (2015)</strong>： 箭头函数、类(class)、模板字符串、解构、let/const、Promise、模块化(import/export)。</li>\n<li><strong>ES7 (2016)</strong>： <code>Array.prototype.includes</code>、指数运算符(<code>**</code>)。</li>\n<li><strong>ES8 (2017)</strong>： <code>async/await</code>、<code>Object.values()</code>/<code>Object.entries()</code>、字符串填充(<code>padStart</code>/<code>padEnd</code>)。</li>\n<li><strong>ES9 (2018)</strong>： 异步迭代器(<code>for-await-of</code>)、对象扩展符、<code>Promise.finally</code>、正则命名捕获组。</li>\n<li><strong>ES10 (2019)</strong>： <code>Array.flat()</code>/<code>flatMap()</code>、<code>Object.fromEntries()</code>、<code>String.trimStart()</code>/<code>trimEnd()</code>。</li>\n<li><strong>ES11 (2020)</strong>： 动态导入(<code>import()</code>)、<code>BigInt</code>、可选链(<code>?.</code>)、空值合并(<code>??</code>)、<code>globalThis</code>。</li>\n<li><strong>ES12 (2021)</strong>： <code>String.replaceAll()</code>、<code>Promise.any</code>、逻辑赋值运算符(<code>&amp;&amp;=</code>/<code>||=</code>/<code>??=</code>)、<code>WeakRef</code>。</li>\n</ul>\n<p><strong>最常用</strong>：箭头函数、解构、<code>async/await</code>、可选链、空值合并。这些特性显著提升了代码简洁性与可维护性，尤其是可选链避免了深层对象判空的冗余代码。</p>\n"},{"title":"如何判断一个元素是否在可视区域中？","description":"","answer":"<ul>\n<li><strong>offsetTop、scrollTop</strong></li>\n</ul>\n<p>判断元素顶部是否小于屏幕高度</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> isInViewPortOfOne</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">el</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">    // viewPortHeight 兼容所有浏览器写法</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> viewPortHeight</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">innerHeight</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">documentElement</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clientHeight</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clientHeight</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> offsetTop</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> el</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">offsetTop</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> scrollTop</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">documentElement</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">scrollTop</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> top</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> offsetTop</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> scrollTop</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> top</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> viewPortHeight</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>getBoundingClientRect*</strong></li>\n</ul>\n<p><code>getBoundingClientRect</code>能够获取元素<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>x</code>, <code>y</code>, <code>width</code>, 和 <code>height</code>属性，如果</p>\n<p>同时满足 <code>top 大于等于 0，left 大于等于 0，bottom 小于等于视窗高度，right 小于等于视窗宽度</code>，那么元素就在视窗之内</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> isInViewPort</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">element</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> viewWidth</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">innerWidth</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">documentElement</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clientWidth</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> viewHeight</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> window</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">innerHeight</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">documentElement</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">clientHeight</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> top</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">bottom</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> element</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getBoundingClientRect</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">top</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> >=</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\">right</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> viewWidth</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\">bottom</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#B07D48\"> viewHeight</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>Intersection Observer</strong></li>\n</ul>\n<p><code>Intersection Observer</code> 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比<code>getBoundingClientRect </code>会好很多</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> options</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 表示重叠面积占被观察者的比例，从 0 - 1 取值，</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // 1 表示完全被包含</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  threshold</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1.0</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  root</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\">document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">querySelector</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">#scrollArea</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#A0ADA0\"> // 必须是目标元素的父级元素</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> callback</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">entries</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> observer</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#999999\"> ....}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> observer</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> IntersectionObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">callback</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> options</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">querySelector</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">.target</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">observer</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">observe</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"说说 var、let、const 之间的区别","description":"","answer":"<p><strong>变量提升</strong></p>\n<p><code>var</code> 声明的变量存在变量提升，即变量可以在声明之前调用，值为<code>undefined</code></p>\n<p><code>let</code>和<code>const</code>不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错</p>\n<p><strong>暂时性死区</strong></p>\n<p><code>var</code>不存在暂时性死区</p>\n<p><code>let</code>和<code>const</code>存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p>\n<p><strong>块级作用域</strong></p>\n<p><code>var</code>不存在块级作用域</p>\n<p><code>let</code>和<code>const</code>存在块级作用域 <strong>重复声明</strong></p>\n<p><code>var</code>允许重复声明变量</p>\n<p><code>let</code>和<code>const</code>在同一作用域不允许重复声明变量</p>\n<p><strong>修改声明的变量</strong></p>\n<p><code>var</code>和<code>let</code>可以</p>\n<p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变</p>\n"},{"title":"let 和 const 声明的变量是否会被挂载到全局对象上？","description":"","answer":"<p>全局作用域下**<code>let/const</code>**声明的变量存在于全局作用域，但不会成为全局对象的属性。</p>\n"},{"title":"const 定义的变量可以修改吗？","description":"","answer":"<p>对于<strong>基本类型</strong>不可修改，对于<strong>引用类型</strong>变量指向的内存地址不可变（不能换对象），但内部属性/元素可修改。</p>\n"},{"title":"说说对 ES6 中 rest 参数的理解","description":"","answer":""},{"title":"怎么理解 ESM 中的 export * from \"a.js\" 这种写法？","description":"","answer":""},{"title":"如何理解 ES6 模块化方案的缓存机制？","description":"","answer":""},{"title":"详细讲一下 Symbol 数据类型特征与实际使用案例？","description":"","answer":""},{"title":"哪些方法可以保持前后端实时通信？","description":"<p><strong>1. 短轮询（Polling）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：前端定时（如每秒）发请求询问是否有新数据。</p>\n</li>\n<li>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">setInterval</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/api/check-update</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#A0ADA0\">/* 处理数据 */</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>优点</strong>：简单易实现。</p>\n</li>\n<li>\n<p><strong>缺点</strong>：频繁请求浪费资源，实时性差。</p>\n</li>\n<li>\n<p><strong>适用场景</strong>：低实时性需求（如每5分钟检查一次版本更新）。</p>\n</li>\n</ul>\n<p><strong>2. 长轮询（Long Polling）</strong></p>\n<ul>\n<li><strong>原理</strong>：前端发请求后，服务器<strong>挂起</strong>直到有数据或超时，再响应并重新连接。</li>\n<li><strong>优点</strong>：减少无效请求，比短轮询实时性更高。</li>\n<li><strong>缺点</strong>：服务器需维护挂起连接，高并发时压力大。</li>\n<li><strong>适用场景</strong>：中等实时性（如在线客服消息）。</li>\n</ul>\n<p><strong>3. WebSocket</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：基于TCP的全双工通信协议，建立持久连接后<strong>双向实时传输</strong>。</p>\n</li>\n<li>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 前端  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> ws</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> WebSocket</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">wss://example.com/socket</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ws</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到消息:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">ws</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">send</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello Server!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 后端（Node.js示例）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> WebSocket</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> require</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">ws</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> wss</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#B07D48\"> WebSocket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Server</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> port</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 8080</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">wss</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">on</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">connection</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">ws</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  ws</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">send</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Welcome!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>优点</strong>：高效低延迟，适合高频交互。</p>\n</li>\n<li>\n<p><strong>缺点</strong>：需服务端支持（如 <code>Socket.IO</code>、<code>ws</code> 库），协议升级（HTTP → WS）。</p>\n</li>\n<li>\n<p><strong>适用场景</strong>：即时聊天、在线游戏、协同编辑。</p>\n</li>\n</ul>\n<p><strong>4. Server-Sent Events（SSE）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：基于HTTP，服务器单向<strong>主动推送</strong>数据到客户端（如股票行情）。</p>\n</li>\n<li>\n<p><strong>代码示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 前端  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> eventSource</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> EventSource</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/api/stream</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">eventSource</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到推送:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 后端（Node.js示例）  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">app</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/stream</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">req</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setHeader</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Content-Type</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">text/event-stream</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  setInterval</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">write</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">data: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Date</span><span style=\"color:#999999\">()</span><span style=\"color:#1E754F\">}</span><span style=\"color:#A65E2B\">\\n\\n</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 格式要求  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  },</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>优点</strong>：轻量、自动重连、兼容HTTP。</p>\n</li>\n<li>\n<p><strong>缺点</strong>：仅支持服务器→客户端单向通信。</p>\n</li>\n<li>\n<p><strong>适用场景</strong>：实时通知、新闻推送、日志流。</p>\n</li>\n</ul>\n<p><strong>5. WebRTC（点对点通信）</strong></p>\n<ul>\n<li><strong>原理</strong>：浏览器间直接建立连接传输数据（如视频通话），可绕过服务器中转。</li>\n<li><strong>优点</strong>：延迟极低，节省服务器带宽。</li>\n<li><strong>缺点</strong>：需处理NAT穿透（STUN/TURN服务器），实现复杂度高。</li>\n<li><strong>适用场景</strong>：视频会议、文件传输、P2P应用。</li>\n</ul>\n<p><strong>对比总结</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>方法</strong></th>\n<th style=\"text-align:left\"><strong>协议</strong></th>\n<th style=\"text-align:left\"><strong>方向</strong></th>\n<th style=\"text-align:left\"><strong>实时性</strong></th>\n<th style=\"text-align:left\"><strong>复杂度</strong></th>\n<th style=\"text-align:left\"><strong>适用场景</strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"谈谈你对 webSocket 的理解","description":"<p>WebSocket 是一种在单个 TCP 连接上实现<strong>全双工实时通信</strong>的协议，专为高频、低延迟的数据交互设计。以下是其核心特性和应用解析：</p>\n<p><strong>一、核心特性</strong></p>\n<ol>\n<li><strong>全双工通信</strong>：\n<ul>\n<li>客户端和服务端<strong>可同时发送数据</strong>，无需等待请求-响应循环。</li>\n<li>对比 HTTP 的“一问一答”模式，WebSocket 更适合实时场景（如聊天、游戏）。</li>\n</ul>\n</li>\n<li><strong>持久化连接</strong>：\n<ul>\n<li>通过一次 HTTP 握手（Upgrade 头）升级为 WebSocket 协议，连接<strong>长期保持活跃</strong>。</li>\n<li>避免 HTTP 频繁建立/关闭连接的开销，降低延迟和带宽消耗。</li>\n</ul>\n</li>\n<li><strong>轻量级协议</strong>：\n<ul>\n<li>数据传输头部小（仅 2~10 字节），适合高频小数据包场景。</li>\n<li>支持文本（UTF-8）和二进制数据格式。</li>\n</ul>\n</li>\n</ol>\n<p><strong>二、工作原理</strong></p>\n<ol>\n<li>\n<p><strong>握手阶段</strong>：</p>\n<ul>\n<li>客户端发起 HTTP 请求，携带 <code>Upgrade: websocket</code> 和 <code>Sec-WebSocket-Key</code>。</li>\n<li>服务端返回 <code>101 Switching Protocols</code>，响应头包含 <code>Sec-WebSocket-Accept</code>。</li>\n</ul>\n<p><strong>示例请求头</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">GET</span><span style=\"color:#AB5959\"> /</span><span style=\"color:#B07D48\">chat</span><span style=\"color:#B07D48\"> HTTP</span><span style=\"color:#AB5959\">/</span><span style=\"color:#2F798A\">1.1</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">Host</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> example</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">com</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">Upgrade</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> websocket</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">Connection</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> Upgrade</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">Sec</span><span style=\"color:#AB5959\">-</span><span style=\"color:#B07D48\">WebSocket</span><span style=\"color:#AB5959\">-</span><span style=\"color:#59873A\">Key</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> dGhlIHNhbXBsZSBub25jZQ</span><span style=\"color:#AB5959\">==</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>数据传输</strong>：</p>\n<ul>\n<li>连接升级后，双方通过<strong>数据帧</strong>（Frame）通信，包含操作码（文本/二进制）、掩码等元信息。</li>\n<li>客户端与服务端可随时主动发送消息。</li>\n</ul>\n</li>\n</ol>\n<p><strong>三、使用场景</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>场景</strong></th>\n<th style=\"text-align:left\"><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>即时通讯</strong></td>\n<td style=\"text-align:left\">聊天消息、通知实时推送（如微信、Slack）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>实时数据监控</strong></td>\n<td style=\"text-align:left\">股票行情、物联网设备数据实时展示。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>在线协作</strong></td>\n<td style=\"text-align:left\">多人文档编辑、协同白板（如腾讯文档）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>在线游戏</strong></td>\n<td style=\"text-align:left\">玩家状态同步、实时对战（如网页游戏）。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>四、代码示例</strong></p>\n<p><strong>前端（浏览器）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 创建 WebSocket 连接  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> socket</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> WebSocket</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">wss://example.com/ws</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 监听事件  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">socket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onopen</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  socket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">send</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello Server!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">socket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到消息:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">socket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onclose</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">连接关闭</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>后端（Node.js + ws 库）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> WebSocket</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> require</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">ws</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> wss</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#B07D48\"> WebSocket</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">Server</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> port</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 8080</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">wss</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">on</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">connection</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">ws</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  ws</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">on</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到客户端消息:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    ws</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">send</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">已收到: </span><span style=\"color:#B5695977\">'</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> data</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 主动推送  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>五、优缺点对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>优点</strong></th>\n<th style=\"text-align:left\"><strong>缺点</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">低延迟，实时性强</td>\n<td style=\"text-align:left\">需维护长连接，高并发时服务端资源消耗大</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">减少冗余头部，节省带宽</td>\n<td style=\"text-align:left\">防火墙/代理可能拦截 WebSocket 连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">支持双向通信</td>\n<td style=\"text-align:left\">需处理连接稳定性（如断线重连、心跳检测）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>六、关键问题与优化</strong></p>\n<ol>\n<li><strong>连接保活</strong>：\n<ul>\n<li><strong>心跳机制</strong>：定时发送 Ping/Pong 帧检测连接存活。</li>\n<li><strong>自动重连</strong>：监听 <code>onclose</code> 事件，尝试重新建立连接。</li>\n</ul>\n</li>\n<li><strong>安全性</strong>：\n<ul>\n<li>使用 <code>wss://</code>（WebSocket over TLS）加密数据。</li>\n<li>验证 <code>Origin</code> 头，防止跨站劫持（CSRF）。</li>\n</ul>\n</li>\n<li><strong>扩展方案</strong>：\n<ul>\n<li><strong>Socket.IO</strong>：封装 WebSocket，提供降级兼容（如轮询）和房间管理等功能。</li>\n<li><strong>负载均衡</strong>：使用 Redis 共享连接状态，支持多节点部署。</li>\n</ul>\n</li>\n</ol>\n<p><strong>七、对比其他技术</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>技术</strong></th>\n<th style=\"text-align:left\"><strong>方向</strong></th>\n<th style=\"text-align:left\"><strong>协议</strong></th>\n<th style=\"text-align:left\"><strong>实时性</strong></th>\n<th style=\"text-align:left\"><strong>适用场景</strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"解释 for...of 和 for...in 的区别","description":"<p><strong>1. 遍历目标</strong></p>\n<ul>\n<li>\n<p><strong><code>for...in</code></strong>：</p>\n<ul>\n<li><strong>遍历对象的可枚举属性（键）</strong>，包括原型链上的属性。</li>\n<li>适用于 <strong>普通对象（Object）</strong>。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> a</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> b</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#AB5959\"> in</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 'a', 'b'  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong><code>for...of</code></strong>：</p>\n<ul>\n<li><strong>遍历可迭代对象的值</strong>（需实现 <code>[Symbol.iterator]</code> 接口）。</li>\n<li>适用于 <strong>数组、字符串、Map、Set 等可迭代对象</strong>。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">10</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 20</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 30</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> value</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">value</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 输出 10, 20, 30  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 遍历数组时的差异</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>特性</strong></th>\n<th style=\"text-align:left\"><strong><code>for...in</code></strong></th>\n<th style=\"text-align:left\"><strong><code>for...of</code></strong></th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"解释可选链操作符（?.）和空值合并运算符（??）","description":"<p>可选链操作符（<code>?.</code>）和空值合并运算符（<code>??</code>）是 ES6 之后新增的两个实用语法，共同目标是简化代码中对空值（<code>null/undefined</code>）的安全处理，但侧重点不同。</p>\n<p><strong>一、可选链操作符（<code>?.</code>）</strong></p>\n<p><strong>用途</strong>：安全访问深层嵌套对象的属性或方法，避免因中间值为 <code>null/undefined</code> 而报错。 <strong>核心行为</strong>：</p>\n<ul>\n<li>若左侧值为 <code>null/undefined</code>，立即短路返回 <code>undefined</code>，<strong>不再执行右侧操作</strong>。</li>\n</ul>\n<p><strong>示例场景</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#998418\">  profile</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 传统写法（逐层判断）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">profile</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">profile</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 可选链写法  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> name</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">profile</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // → undefined（不报错）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>适用场景</strong>：</p>\n<ul>\n<li>\n<p>不确定对象属性是否存在时（如API响应、动态配置）。</p>\n</li>\n<li>\n<p>安全调用可能不存在的函数：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> callback</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> config</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">onSuccess</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">callback</span><span style=\"color:#999999\">?.();</span><span style=\"color:#A0ADA0\"> // 存在则调用，否则忽略  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>二、空值合并运算符（<code>??</code>）</strong></p>\n<p><strong>用途</strong>：为可能为 <code>null/undefined</code> 的变量提供默认值。 <strong>核心行为</strong>：</p>\n<ul>\n<li>仅当左侧值为 <code>null/undefined</code> 时，返回右侧默认值（其他假值如 <code>0</code>、<code>''</code>、<code>false</code> 仍保留）。</li>\n</ul>\n<p><strong>示例场景</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 传统写法（逻辑或 || 的问题）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> price</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> config</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">price</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#2F798A\"> 100</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 若 config.price 为 0 → 错误地取 100  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 空值合并写法  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> price</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> config</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">price</span><span style=\"color:#AB5959\"> ??</span><span style=\"color:#2F798A\"> 100</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 若 config.price 为 0 → 正确保留 0  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>适用场景</strong>：</p>\n<ul>\n<li>区分 <code>0</code>/<code>false</code>/<code>''</code> 与真正的空值（如配置项、表单数据）。</li>\n<li>替代 <code>||</code> 提供更精确的默认值逻辑。</li>\n</ul>\n<p><strong>三、关键区别对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>维度</strong></th>\n<th style=\"text-align:left\"><strong>可选链 <code>?.</code></strong></th>\n<th style=\"text-align:left\"><strong>空值合并 <code>??</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>作用目标</strong></td>\n<td style=\"text-align:left\">防止访问 <code>null/undefined</code> 的属性时报错</td>\n<td style=\"text-align:left\">为 <code>null/undefined</code> 提供默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>返回值</strong></td>\n<td style=\"text-align:left\">返回 <code>undefined</code> 或安全访问后的值</td>\n<td style=\"text-align:left\">返回左侧非空值或右侧默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>常见组合</strong></td>\n<td style=\"text-align:left\">常与 <code>??</code> 联用（如 <code>obj?.prop ?? 0</code>）</td>\n<td style=\"text-align:left\">可单独使用或与 <code>?.</code> 配合</td>\n</tr>\n</tbody>\n</table>\n<p><strong>四、联合使用示例</strong></p>\n<p><strong>场景</strong>：从 API 响应中安全取值并设置默认值。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 若 response 或 data 不存在，total 默认为 0  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> total</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">?.</span><span style=\"color:#B07D48\">total</span><span style=\"color:#AB5959\"> ??</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>解析</strong>：</p>\n<ol>\n<li><code>response?.data?.total</code>：\n<ul>\n<li>若 <code>response</code> 或 <code>data</code> 为 <code>null/undefined</code>，返回 <code>undefined</code>。</li>\n</ul>\n</li>\n<li><code>?? 0</code>：\n<ul>\n<li>若上一步结果为 <code>undefined</code>，则返回 <code>0</code>。</li>\n</ul>\n</li>\n</ol>\n<p><strong>五、对比 <code>||</code> 与 <code>??</code></strong></p>\n<p>| <strong>表达式</strong> | <code>0 ?? 5</code>                | <code>0 || 5</code>                              | <code>'' ?? 'default'</code> | <code>'' || 'default'</code> |\n| :--------- | :---------------------- | :------------------------------------ | :---------------- | :----------------</p>\n","answer":""},{"title":"Symbol 类型主要的用途是什么？","description":"","answer":"<p><strong>1. 创建唯一的对象属性键</strong></p>\n<ul>\n<li><strong>避免属性名冲突</strong>：Symbol 值作为属性名时，即使描述符（description）相同，值也唯一，适合在扩展对象时防止键名冲突。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> key1</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> Symbol</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">key</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> key2</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> Symbol</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">key</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key1</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">value1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key2</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">value2</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key1</span><span style=\"color:#999999\">],</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key2</span><span style=\"color:#999999\">]);</span><span style=\"color:#A0ADA0\"> // 输出 'value1', 'value2'（不冲突）  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 定义对象的内置行为（Well-Known Symbols）</strong></p>\n<ul>\n<li><strong>自定义对象的内置方法</strong>：通过预定义的 Symbol 值（如 <code>Symbol.iterator</code>）改变对象默认行为。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 实现可迭代对象  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> myIterable</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  [</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]:</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#1E754F\">*</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    yield</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    yield</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">([...</span><span style=\"color:#B07D48\">myIterable</span><span style=\"color:#999999\">]);</span><span style=\"color:#A0ADA0\"> // 输出 [1, 2]  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>其他内置 Symbol：</p>\n<ul>\n<li><code>Symbol.toStringTag</code>：自定义 <code>Object.prototype.toString()</code> 的返回值。</li>\n<li><code>Symbol.hasInstance</code>：重写 <code>instanceof</code> 的行为。</li>\n</ul>\n<p><strong>3. 模拟私有属性（非严格私有）</strong></p>\n<ul>\n<li><strong>隐藏对象属性</strong>：Symbol 属性无法通过常规方法（如 <code>Object.keys()</code>、<code>for...in</code>）遍历，需通过 <code>Object.getOwnPropertySymbols()</code> 获取。</li>\n</ul>\n"},{"title":"箭头函数和普通函数的区别是什么？","description":"","answer":"<p>主要区别有几点：</p>\n<ol>\n<li><strong><code>this</code>指向</strong>：\n<ul>\n<li>普通函数：<code>this</code>由调用方式决定（谁调用指向谁），可动态改变（如通过<code>bind/call/apply</code>）。</li>\n<li>箭头函数：<code>this</code>继承自外层作用域（词法作用域），且无法被修改（如<code>setTimeout</code>中不用再写<code>const _this = this</code>）。</li>\n</ul>\n</li>\n<li><strong><code>arguments</code>对象</strong>：\n<ul>\n<li>普通函数：内部可用<code>arguments</code>获取所有参数。</li>\n<li>箭头函数：没有<code>arguments</code>，需用剩余参数（<code>...args</code>）替代。</li>\n</ul>\n</li>\n<li><strong>构造函数能力</strong>：\n<ul>\n<li>普通函数：可作为构造函数，用<code>new</code>创建实例。</li>\n<li>箭头函数：不能用作构造函数，<code>new</code>调用会报错。</li>\n</ul>\n</li>\n<li><strong><code>prototype</code>属性</strong>：\n<ul>\n<li>普通函数：有<code>prototype</code>属性，用于原型继承。</li>\n<li>箭头函数：没有<code>prototype</code>。</li>\n</ul>\n</li>\n<li><strong>语法简洁性</strong>：\n<ul>\n<li>箭头函数更简洁（如<code>(a, b) =&gt; a + b</code>），适合简单函数或回调（如<code>map(() =&gt; {})</code>）。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"跨域的处理方案有哪些？","description":"","answer":"<p><strong>1. CORS（跨域资源共享）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：服务端设置响应头（如<code>Access-Control-Allow-Origin</code>），明确允许跨域请求。</p>\n</li>\n<li>\n<p><strong>实现</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// Node.js示例  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setHeader</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Access-Control-Allow-Origin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://前端域名</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setHeader</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Access-Control-Allow-Methods</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">GET,POST</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setHeader</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Access-Control-Allow-Headers</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Content-Type</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>适用场景</strong>：主流方案，需服务端配合，支持所有HTTP方法。</p>\n</li>\n</ul>\n<p><strong>2. JSONP（仅限GET请求）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：利用<code>&lt;script&gt;</code>标签无跨域限制的特性，通过回调函数接收数据。</p>\n</li>\n<li>\n<p><strong>实现</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 前端  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> jsonpCallback</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> script</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> document</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">createElement</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">script</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">src</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://后端接口?callback=jsonpCallback</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">document</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">body</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">appendChild</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">script</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>缺点</strong>：只支持GET，安全性低（需防范XSS）。</p>\n</li>\n</ul>\n<p><strong>3. 代理服务器</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：前端请求同域代理服务器，代理转发请求到目标服务器，绕过浏览器限制。</p>\n</li>\n<li>\n<p><strong>实现</strong>：</p>\n<ul>\n<li>\n<p><strong>开发环境</strong>：Vue/React脚手架配置代理（如<code>vue.config.js</code>）：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">devServer</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  proxy</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">    '</span><span style=\"color:#B56959\">/api</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\">: </span><span style=\"color:#999999\">{</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">      target</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://后端地址</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">      changeOrigin</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#998418\">      pathRewrite</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> {</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">^/api</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> ''</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>生产环境</strong>：Nginx反向代理：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">location</span><span style=\"color:#AB5959\"> /</span><span style=\"color:#B07D48\">api</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    proxy_pass</span><span style=\"color:#59873A\"> http</span><span style=\"color:#999999\">:</span><span style=\"color:#A0ADA0\">//后端地址;  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>4. WebSocket</strong></p>\n<ul>\n<li><strong>原理</strong>：WebSocket协议不受同源策略限制。</li>\n<li><strong>适用场景</strong>：实时通信（如聊天室）。</li>\n</ul>\n<p><strong>5. postMessage（窗口间通信）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：通过<code>window.postMessage</code>实现跨窗口（如iframe）通信。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 父窗口向子iframe发送消息  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">iframe</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">contentWindow</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">data</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://子窗口域名</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 子窗口监听  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">origin</span><span style=\"color:#AB5959\"> !==</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">http://父窗口域名</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>6. 修改浏览器安全策略（仅开发环境）</strong></p>\n<ul>\n<li>临时关闭浏览器跨域限制（如Chrome启动参数加<code>--disable-web-security</code>），<strong>不推荐生产使用</strong>。</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<ul>\n<li><strong>开发环境</strong>：优先用代理（如Vue/React脚手架配置）。</li>\n<li><strong>生产环境</strong>：服务端配置CORS或Nginx反向代理。</li>\n<li><strong>特殊场景</strong>：JSONP（老旧项目兼容）、WebSocket（实时通信）。</li>\n<li><strong>注意安全性</strong>：避免<code>Access-Control-Allow-Origin: *</code>，限制可信域名。</li>\n</ul>\n"},{"title":"谈谈你对正则表达式的理解","description":"","answer":"<p>正则表达式（Regex）在前端开发中是不可或缺的文本处理工具，通过模式匹配实现高效的数据验证、字符串操作和复杂逻辑处理。以下是其在前端的主要应用场景及示例：</p>\n<ol>\n<li><strong>表单验证</strong>:正则表达式常用于验证用户输入的数据格式，如邮箱、密码、手机号等，确保输入符合业务规则：\n<ul>\n<li><strong>邮箱验证</strong>：<code>/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/</code></li>\n<li><strong>手机号验证</strong>：<code>/^(13[0-9]|14[5-9]|15[0-3,5-9]|18[0-9])\\d{8}$/</code></li>\n<li><strong>密码强度</strong>：要求包含大小写字母和数字的组合，如 <code>^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></li>\n</ul>\n</li>\n<li><strong>字符串处理</strong>:通过正则表达式实现字符串的搜索、替换、分割和格式转换：\n<ul>\n<li><strong>敏感词过滤</strong>：替换敏感词汇为星号，如 <code>str.replace(/敏感词/g, '***')</code></li>\n<li><strong>驼峰命名转换</strong>：将 <code>foo-bar</code> 转为 <code>fooBar</code>，使用 <code>/-(\\w)/g</code> 匹配并替换首字母大写</li>\n<li><strong>千分位格式化</strong>：将 <code>1234567</code> 转为 <code>1,234,567</code>，正则模式为 <code>/(\\d)(?=(\\d{3})+(?!\\d))/g</code></li>\n</ul>\n</li>\n<li><strong>URL参数解析与操作</strong>:提取 URL 中的参数或处理路径信息：\n<ul>\n<li><strong>解析查询参数</strong>：从 <code>?id=123&amp;name=alice</code> 提取键值对</li>\n<li><strong>动态生成正则表达式</strong>：结合 <code>RegExp</code> 构造函数处理动态参数名</li>\n</ul>\n</li>\n<li><strong>HTML/DOM 处理</strong>:正则表达式用于处理 HTML 内容，但需谨慎避免误解析复杂标签结构：\n<ul>\n<li><strong>HTML 转义与反转义</strong>：防止 XSS 攻击，如将 <code>&lt;</code> 转为 <code>&lt;</code></li>\n<li><strong>提取标签内容</strong>：匹配特定标签内的文本，如 <code>&lt;div&gt;(.*?)&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li><strong>数据格式化与校验</strong>:处理日期、时间、金额等数据的格式转换与校验：\n<ul>\n<li><strong>日期格式校验</strong>：验证 <code>YYYY-MM-DD</code> 格式，支持闰年判断</li>\n<li><strong>金额千分位</strong>：如 <code>1234567</code> 转为 <code>1,234,567</code>，使用前瞻断言实现</li>\n</ul>\n</li>\n<li><strong>高级应用场景</strong>\n<ul>\n<li><strong>模板引擎解析</strong>：结合正则动态替换模板变量（如 <code>{{name}}</code>）</li>\n<li><strong>日志分析</strong>：从日志中提取特定错误码或时间戳</li>\n</ul>\n</li>\n</ol>\n"},{"title":"说说什么是精度丢失？","description":"","answer":"<p>精度丢失（Precision Loss）是指在使用二进制浮点数（如 JavaScript 的 <code>Number</code> 类型）表示或计算时，因无法精确存储某些十进制小数或大整数而导致的误差问题。</p>\n<p><strong>1. 常见场景</strong></p>\n<ul>\n<li>\n<p><strong>浮点数运算</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#2F798A\">0.1</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 0.2</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0.3</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // false → 实际结果为 0.30000000000000004  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>原因：十进制小数（如 0.1）转换为二进制时是无限循环小数，存储时被截断。</p>\n</li>\n<li>\n<p><strong>大整数处理</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 9007199254740993</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 超过 Number.MAX_SAFE_INTEGER (2^53 - 1)  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 9007199254740992 → 末位被舍入  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 底层原因</strong></p>\n<ul>\n<li><strong>IEEE 754 双精度浮点数标准</strong>：\n<ul>\n<li>使用 64 位存储（1 符号位 + 11 指数位 + 52 尾数位）。</li>\n<li>部分十进制小数无法精确转换为有限长度的二进制（如 0.1 → 0.0001100110011...）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. 解决方案</strong></p>\n<ul>\n<li>\n<p><strong>整数化处理</strong>：将小数转为整数运算后再还原。</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">0.1</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 0.2</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> /</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0.3</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // true  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>使用高精度库</strong>：如 <code>decimal.js</code>、<code>big.js</code>。</p>\n</li>\n<li>\n<p><strong>BigInt 类型</strong>：处理大整数（后缀加 <code>n</code>）。</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> bigNum</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 9007199254740993</span><span style=\"color:#AB5959\">n</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 精确存储  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>控制显示精度</strong>：用 <code>toFixed()</code> 四舍五入（返回字符串）。</p>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>精度丢失源于二进制浮点数的存储限制，<strong>关键场景需显式处理</strong>（如金融计算用高精度库），避免因微小误差引发逻辑错误。</p>\n"},{"title":"说说什么是尾递归？","description":"","answer":"<p>尾递归（Tail Recursion）是递归的一种特殊形式，<strong>函数在最后一步直接调用自身</strong>，且<strong>没有其他运算或操作</strong>。这种结构使得编译器/解释器可以优化递归，避免栈溢出，因为它不再依赖保留外层函数的调用栈。</p>\n<p><strong>核心特点</strong></p>\n<ol>\n<li><strong>最后一步是纯函数调用</strong>：递归调用后没有其他操作（比如<code>return n * func(n-1)</code>就不是尾递归，因为需要做乘法运算）。</li>\n<li><strong>可被优化为循环</strong>：尾递归的调用栈会被复用（类似迭代），空间复杂度从O(n)降为O(1)。</li>\n</ol>\n<p><strong>示例对比:</strong></p>\n<ul>\n<li>\n<p><strong>普通递归</strong>（栈溢出风险）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> factorial</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#59873A\"> factorial</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 递归后还需做乘法操作  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>（调用栈：<code>factorial(5)</code> → <code>5 * factorial(4)</code> → ... → 逐层返回计算）</p>\n</li>\n<li>\n<p><strong>尾递归</strong>（可优化为循环）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> factorial</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> total</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> total</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> factorial</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">n</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> n</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#B07D48\"> total</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 最后一步直接返回自身调用  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p>（调用栈：每次调用直接覆盖当前栈，无需保留外层状态）</p>\n</li>\n</ul>\n"},{"title":"解释 ES Module 和 CommonJS 的区别。","description":"","answer":"<ol>\n<li><strong>语法与加载方式</strong>\n<ul>\n<li><strong>ESM</strong>：使用 <code>import</code>/<code>export</code> 语法，<strong>静态加载</strong>（编译时确定依赖），支持异步加载。</li>\n<li><strong>CJS</strong>：使用 <code>require()</code>/<code>module.exports</code>，<strong>动态加载</strong>（运行时解析依赖），同步执行。</li>\n</ul>\n</li>\n<li><strong>运行环境</strong>\n<ul>\n<li><strong>ESM</strong>：浏览器原生支持，Node.js 需配置 <code>type: &quot;module&quot;</code> 或 <code>.mjs</code> 后缀。</li>\n<li><strong>CJS</strong>：Node.js 默认模块系统，浏览器不支持原生使用。</li>\n</ul>\n</li>\n<li><strong>静态分析与优化</strong>\n<ul>\n<li><strong>ESM</strong>：支持 <strong>Tree Shaking</strong>（静态分析移除未使用代码），利于打包优化。</li>\n<li><strong>CJS</strong>：动态特性导致难以静态分析，Tree Shaking 支持有限。</li>\n</ul>\n</li>\n<li><strong>模块行为</strong>\n<ul>\n<li><strong>ESM</strong>：模块输出的是<strong>值的引用</strong>，动态更新会影响所有导入方。</li>\n<li><strong>CJS</strong>：模块输出的是<strong>值的拷贝</strong>，后续修改不影响已导入的值。</li>\n</ul>\n</li>\n<li><strong>循环依赖处理</strong>\n<ul>\n<li><strong>ESM</strong>：通过引用传递解决循环依赖，支持未完全初始化的模块。</li>\n<li><strong>CJS</strong>：可能因执行顺序导致部分导出值为 <code>undefined</code>。</li>\n</ul>\n</li>\n</ol>\n<p><strong>使用场景</strong></p>\n<ul>\n<li><strong>ESM</strong>：现代前端项目（浏览器或构建工具链如 Vite/Webpack）。</li>\n<li><strong>CJS</strong>：Node.js 服务端开发或旧项目迁移。</li>\n</ul>\n"},{"title":"解释 Proxy 和 Reflect 的作用","description":"","answer":"<p><code>Proxy</code> 和 <code>Reflect</code> 是 ES6 中用于增强对象操作的 API，核心作用如下：</p>\n<ol>\n<li><strong>Proxy（代理）</strong>\n<ul>\n<li><strong>作用</strong>：创建一个对象的代理，通过定义“拦截器”<strong>监听并自定义对象的基本操作</strong>（如属性读取、赋值、函数调用等）。</li>\n<li><strong>典型场景</strong>：数据响应式（如 Vue3 的响应式系统）、属性校验、日志记录、权限控制等。</li>\n</ul>\n</li>\n<li><strong>Reflect（反射）</strong>\n<ul>\n<li><strong>作用</strong>：提供一组与 <code>Proxy</code> 拦截器<strong>一一对应的方法</strong>，用于<strong>直接调用对象的默认行为</strong>（如 <code>Reflect.get()</code> 对应 <code>obj[key]</code>）。</li>\n<li><strong>设计意义</strong>：标准化对象操作（替代 <code>Object.xxx</code> 方法），并提供更合理的返回值（如布尔值表示操作是否成功）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>关联性</strong></p>\n<ul>\n<li>\n<p><code>Proxy</code> 的拦截器方法（如 <code>get</code>、<code>set</code>）通常结合 <code>Reflect</code> 的方法实现默认行为，例如：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> proxy</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Proxy</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">读取属性:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> Reflect</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 调用原对象的默认行为  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>总结</strong> <code>Proxy</code> 用于<strong>拦截并扩展对象操作</strong>，<code>Reflect</code> 提供<strong>标准化且安全的默认行为</strong>，二者配合可实现更灵活的对象控制。</p>\n"},{"title":"你对 Set、Map 两种数据结构怎么理解?","description":"","answer":""},{"title":"Set 和 WeakSet 与 Map 和 WeakMap 之间的区别","description":"","answer":"<p><strong>1. 键与值的特性</strong></p>\n<ul>\n<li><strong>Set</strong>：存储唯一值的集合，<strong>值即键</strong>，成员可以是任意类型。</li>\n<li><strong>Map</strong>：存储键值对，<strong>键可以是任意类型</strong>（对象、基本类型等）。</li>\n<li><strong>WeakSet</strong>：成员<strong>只能是对象</strong>，且对对象是弱引用。</li>\n<li><strong>WeakMap</strong>：<strong>键只能是对象</strong>，值无限制，键是弱引用。</li>\n</ul>\n<p><strong>2. 可遍历性</strong></p>\n<ul>\n<li><strong>Set/Map</strong>：支持遍历（如 <code>forEach</code>、<code>for...of</code>），可通过 <code>size</code> 获取成员数量。</li>\n<li><strong>WeakSet/WeakMap</strong>：<strong>不可遍历</strong>，无 <code>size</code> 属性，无法直接获取成员数量。</li>\n</ul>\n<p><strong>3. 内存管理（弱引用特性）</strong></p>\n<ul>\n<li><strong>Set/Map</strong>：对成员的引用是<strong>强引用</strong>，即使对象在其他地方无引用，也不会被垃圾回收。</li>\n<li><strong>WeakSet/WeakMap</strong>：对键的引用是<strong>弱引用</strong>，若对象在其他地方无强引用，会被垃圾回收，对应成员自动消失。</li>\n</ul>\n<p><strong>4. 方法与用途</strong></p>\n<ul>\n<li><strong>Set</strong>：用于去重或集合运算（交集、并集），如 <code>new Set([1, 2, 1])</code> → <code>{1, 2}</code>。</li>\n<li><strong>Map</strong>：适合键类型复杂或需保持插入顺序的场景，如缓存数据。</li>\n<li><strong>WeakSet</strong>：临时跟踪对象存在性（如记录已处理过的 DOM 元素）。</li>\n<li><strong>WeakMap</strong>：关联对象与元数据且避免内存泄漏（如存储对象私有数据）。</li>\n</ul>\n"},{"title":"谈谈你对 requestanimationframe 和 requestidlecallback 的了解","description":"","answer":"<p><code>requestAnimationFrame</code>（rAF）和 <code>requestIdleCallback</code>（rIC）是浏览器提供的任务调度 API，核心区别如下：</p>\n<p><strong>1. 设计目的</strong></p>\n<ul>\n<li><strong>requestAnimationFrame</strong>：\n<ul>\n<li>专为<strong>动画渲染优化</strong>，在下一次浏览器重绘（通常是 60Hz 刷新率）前执行回调函数。</li>\n<li>确保动画流畅，避免掉帧或过度渲染。</li>\n</ul>\n</li>\n<li><strong>requestIdleCallback</strong>：\n<ul>\n<li>在浏览器**空闲时段（主线程无其他任务）**执行低优先级任务。</li>\n<li>避免阻塞用户交互或关键渲染流程。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. 触发时机</strong></p>\n<ul>\n<li><strong>rAF</strong>：\n<ul>\n<li><strong>与屏幕刷新率同步</strong>（如每秒 60 次），回调函数在重绘前的布局计算阶段执行。</li>\n</ul>\n</li>\n<li><strong>rIC</strong>：\n<ul>\n<li><strong>无固定频率</strong>，仅在浏览器空闲时触发，且每次执行时间可能被限制（通过 <code>timeout</code> 参数设置最长等待时间）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. 适用场景</strong></p>\n<ul>\n<li><strong>rAF</strong>：\n<ul>\n<li>动画、连续 UI 更新（如元素运动、滚动效果）。</li>\n<li>需要与渲染帧同步的操作（如读取布局属性后修改样式）。</li>\n</ul>\n</li>\n<li><strong>rIC</strong>：\n<ul>\n<li>非紧急任务（如日志上报、数据预加载、耗时计算）。</li>\n<li>避免在主线程繁忙时执行（如用户输入或动画期间）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>4. 使用示例</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// rAF：流畅动画  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> animate</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  element</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">style</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">left</span><span style=\"color:#999999\"> =</span><span style=\"color:#B5695977\"> `</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">pos</span><span style=\"color:#AB5959\">++</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\">px</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  requestAnimationFrame</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">animate</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">animate</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// rIC：空闲任务  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">requestIdleCallback</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">deadline</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  while</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">deadline</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">timeRemaining</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> ></span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">    processLowPriorityTask</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> timeout</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2000</span><span style=\"color:#999999\"> });</span><span style=\"color:#A0ADA0\"> // 最长等待 2 秒  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>5. 注意事项</strong></p>\n<ul>\n<li><strong>rAF</strong>：\n<ul>\n<li>避免在回调中执行耗时操作，否则会阻塞渲染。</li>\n<li>在不可见标签页中，rAF 可能暂停执行以节省资源。</li>\n</ul>\n</li>\n<li><strong>rIC</strong>：\n<ul>\n<li>任务应分割为小块（利用 <code>deadline.timeRemaining()</code> 判断剩余时间）。</li>\n<li>不保证一定会执行（如浏览器始终繁忙）。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？","description":"","answer":"<p><strong>1. <code>offsetWidth</code> 和 <code>offsetHeight</code></strong>:元素的<strong>总尺寸</strong>，包括 <strong>内容宽度/高度</strong> + <strong>内边距（padding）</strong> + <strong>边框（border）</strong> + <strong>垂直滚动条宽度</strong>（如果存在）。</p>\n<p><strong>2. <code>clientWidth</code> 和 <code>clientHeight</code></strong>:元素的<strong>可视区域尺寸</strong>，包括 <strong>内容宽度/高度</strong> + <strong>内边距（padding）</strong>，但 <strong>不包含边框</strong> 和 <strong>滚动条</strong>。</p>\n<p><strong>3. <code>scrollWidth</code> 和 <code>scrollHeight</code></strong>:元素的<strong>实际内容总尺寸</strong>（包括溢出部分） + <strong>内边距（padding）</strong>，但 <strong>不包含边框</strong> 和 <strong>滚动条</strong>。</p>\n"},{"title":"mouseover 和 mouseenter 的区别？","description":"","answer":"<ul>\n<li><strong><code>mouseenter</code></strong>：\n<ul>\n<li><strong>仅在鼠标首次进入绑定元素时触发一次</strong>。</li>\n<li><strong>不冒泡</strong>（子元素不会触发父元素的 <code>mouseenter</code>）。</li>\n</ul>\n</li>\n<li><strong><code>mouseover</code></strong>：\n<ul>\n<li><strong>每次进入绑定元素或其子元素时都会触发</strong>。</li>\n<li><strong>冒泡</strong>（子元素触发 <code>mouseover</code> 后，会向上冒泡到父元素）。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"currentTarget 与 target 的区别","description":"","answer":"<ul>\n<li><code>e.target</code>：<strong>触发</strong>事件的元素</li>\n<li><code>e.currentTarget</code>：<strong>绑定</strong>事件的元素</li>\n</ul>\n"},{"title":"说说 Web Worker","description":"","answer":"<p>Web Worker 是浏览器提供的<strong>多线程机制</strong>，允许在后台运行脚本而不阻塞主线程，核心特点如下：</p>\n<p><strong>1. 核心作用</strong></p>\n<ul>\n<li><strong>独立线程</strong>：在<strong>主线程外创建子线程</strong>，处理复杂计算或耗时任务（如大数据处理、加密解密）。</li>\n<li><strong>非阻塞 UI</strong>：避免主线程卡顿，保持页面响应性。</li>\n</ul>\n<p><strong>2. 通信机制</strong></p>\n<ul>\n<li><strong>消息传递</strong>：通过 <code>postMessage</code> 发送数据，<code>onmessage</code> 接收数据，数据需可序列化（如 JSON、ArrayBuffer）。</li>\n<li><strong>无 DOM 访问权限</strong>：Worker 内无法操作 DOM 或访问 <code>window</code> 对象。</li>\n</ul>\n<p><strong>3. 类型与使用</strong></p>\n<ul>\n<li>\n<p><strong>专用 Worker（Dedicated Worker）</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 主线程  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Worker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> data</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">任务</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// worker.js  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">处理结果</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>共享 Worker（Shared Worker）</strong>：可被多个页面共享，但兼容性较差。</p>\n</li>\n</ul>\n<p><strong>4. 适用场景</strong></p>\n<ul>\n<li>图像/视频处理（如滤镜、压缩）。</li>\n<li>实时数据分析（如日志统计、排序）。</li>\n<li>高频率计算（如物理模拟、游戏逻辑）。</li>\n</ul>\n<p><strong>5. 限制与注意事项</strong></p>\n<ul>\n<li><strong>同源策略</strong>：Worker 脚本必须与主线程同源。</li>\n<li><strong>全局对象不同</strong>：Worker 内使用 <code>self</code> 代替 <code>window</code>。</li>\n<li><strong>资源释放</strong>：通过 <code>worker.terminate()</code> 手动终止 Worker，防止内存泄漏。</li>\n</ul>\n"},{"title":"你知道哪些设计模式？","description":"","answer":"<p><strong>1. 单例模式（Singleton）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：确保一个类只有一个实例，并提供全局访问点。</p>\n</li>\n<li>\n<p><strong>场景</strong>：全局状态管理（如 Vuex/Redux 的 Store）、浏览器环境对象（如 window）。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Singleton</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  static</span><span style=\"color:#B07D48\"> instance</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">Singleton</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">instance</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> Singleton</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">instance</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> Singleton</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">instance</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Singleton</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Singleton</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // true  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 观察者模式（Observer）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：定义对象间的一对多依赖关系，当一个对象状态变化时，自动通知所有依赖者。</p>\n</li>\n<li>\n<p><strong>场景</strong>：事件监听（如 DOM 事件）、数据响应式更新（如 Vue 的依赖收集）。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Subject</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  observers</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  addObserver</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obs</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obs</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  notify</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">observers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">forEach</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obs</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> obs</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">update</span><span style=\"color:#999999\">());</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Observer</span><span style=\"color:#999999\"> {</span><span style=\"color:#59873A\"> update</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">收到通知</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>3. 工厂模式（Factory）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：通过工厂方法创建对象，隐藏具体实现逻辑。</p>\n</li>\n<li>\n<p><strong>场景</strong>：复杂对象的创建（如 UI 组件库）、多环境适配（如不同浏览器的 API 封装）。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> ButtonFactory</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  createButton</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">type</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">type</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">primary</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> PrimaryButton</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> DefaultButton</span><span style=\"color:#999999\">();</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>4. 装饰器模式（Decorator）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：动态扩展对象功能，不修改原有代码。</p>\n</li>\n<li>\n<p><strong>场景</strong>：高阶组件（React HOC）、日志/权限装饰、ES7 装饰器语法。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> withLogging</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">fn</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">函数被调用</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#59873A\"> fn</span><span style=\"color:#999999\">(...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> decoratedFn</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> withLogging</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* 业务逻辑 */</span><span style=\"color:#999999\"> });</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>5. 代理模式（Proxy）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：通过代理对象控制对原对象的访问，添加额外逻辑（如缓存、校验）。</p>\n</li>\n<li>\n<p><strong>场景</strong>：数据校验、缓存代理（如 HTTP 请求缓存）、ES6 的 <code>Proxy</code> 对象。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> target</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">John</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> };</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> proxy</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Proxy</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">target</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  get</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">读取属性：</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">key</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">];</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">proxy</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">name</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 输出 \"读取属性：name\"  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>6. 策略模式（Strategy）</strong></p>\n<ul>\n<li>\n<p><strong>作用</strong>：定义一组算法并封装，使它们可以互相替换。</p>\n</li>\n<li>\n<p><strong>场景</strong>：表单验证规则、动态计算逻辑（如促销折扣策略）。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> strategies</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  add</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">,</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  subtract</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> -</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> calculate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">strategy</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> strategies</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">strategy</span><span style=\"color:#999999\">](</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n"},{"title":"如何编写高性能的 JavaScript代码？","description":"","answer":"<ul>\n<li>将js脚本放在页面底部，加快渲染页面;</li>\n<li>使用非阻塞方式下载js脚本;</li>\n<li>避免循环引用，防止内存泄漏：</li>\n<li>尽量避免创建全局变量;</li>\n<li>尽量减少使用闭包</li>\n<li>尽量减少对象成员嵌套;</li>\n<li>缓存DOM节点的访问;</li>\n<li>通过避免使用eval和function()构造器;</li>\n<li>给setTimeout()和setInterval()传递函数而不是字符作为参数;</li>\n<li>尽量使用直接量创建对象和数组;</li>\n<li>最小化重绘(repaint)和回流(reflow);</li>\n</ul>\n"},{"title":"说说你对高阶函数的理解","description":"","answer":"<p>高阶函数（Higher-Order Function）是指<strong>接受函数作为参数或返回一个函数作为结果</strong>的函数。它是 JavaScript 函数式编程的核心概念之一，常见的高阶函数有 <code>map</code>、<code>filter</code>、<code>reduce</code>、<code>forEach</code> 等。</p>\n<p><strong>高阶函数的特点</strong></p>\n<ol>\n<li><strong>接受函数作为参数</strong>：高阶函数可以将其他函数作为参数传入，允许对行为进行参数化。</li>\n<li><strong>返回一个函数作为结果</strong>：高阶函数可以生成并返回新的函数，使得代码更加灵活和模块化。</li>\n</ol>\n<p><strong>常见的高阶函数示例</strong></p>\n<ol>\n<li>\n<p><strong>数组的 map、filter、reduce</strong></p>\n<ul>\n<li><code>map</code>：接收一个回调函数，将回调函数应用到数组的每个元素上，返回新数组。</li>\n<li><code>filter</code>：接收一个回调函数，筛选符合条件的元素，返回新数组。</li>\n<li><code>reduce</code>：接收一个回调函数，将数组元素逐步累计到一个结果中，返回最终结果。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> numbers</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 4</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> doubled</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> numbers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">map</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> num</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">    // [2, 4, 6, 8]</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> evens</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> numbers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">filter</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> num</span><span style=\"color:#AB5959\"> %</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // [2, 4]</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> sum</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> numbers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">total</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> total</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 10</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>函数柯里化（Currying）</strong></p>\n<ul>\n<li>通过返回一个新的函数，将参数拆分为多个独立调用的函数。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">y</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> y</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> add5</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> add</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\">   // add5 是一个新函数</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">add5</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\">  // 8</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>函数组合</strong></p>\n<ul>\n<li>组合多个函数，将一个函数的输出作为下一个函数的输入。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> compose</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">f</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> g</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#59873A\"> f</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">g</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> addOne</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> x</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> square</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> x</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> addOneThenSquare</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> compose</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">square</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> addOne</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">addOneThenSquare</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 9</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n<p><strong>高阶函数的优势</strong></p>\n<ol>\n<li><strong>代码简洁</strong>：通过复用高阶函数，可以减少冗余代码，提升可读性。</li>\n<li><strong>扩展性强</strong>：高阶函数可以轻松地扩展函数的功能，允许动态改变函数的行为。</li>\n<li><strong>灵活性</strong>：高阶函数可以动态生成新函数，提升函数的灵活性，适用于不同场景。</li>\n</ol>\n<p><strong>什么是纯函数</strong>？</p>\n<p>纯函数（Pure Function）是指满足以下两个核心条件的函数：</p>\n<p><strong>1. 核心特征</strong></p>\n<ul>\n<li><strong>确定性（相同输入 → 相同输出）</strong>：只要输入参数相同，返回值永远一致。</li>\n<li><strong>无副作用（No Side Effects）</strong>：不修改函数外部状态（如全局变量、DOM 操作、网络请求等）。</li>\n</ul>\n<p><strong>2. 示例对比</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 纯函数  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 非纯函数（有副作用 + 输出不确定）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> increment</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  count</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\">          // 修改外部变量（副作用）  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">random</span><span style=\"color:#999999\">()</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> count</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 输出不确定  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 优点</strong></p>\n<ul>\n<li><strong>可维护性</strong>：逻辑独立，易于理解和测试。</li>\n<li><strong>可缓存性</strong>：可对输入参数做缓存（如记忆化 Memoization）。</li>\n<li><strong>并发安全</strong>：无依赖外部状态，避免竞态条件。</li>\n</ul>\n<p><strong>4. 前端应用场景</strong></p>\n<ul>\n<li><strong>Redux 的 Reducer</strong>：要求必须是纯函数，根据旧状态和 Action 生成新状态。</li>\n<li><strong>React 函数组件</strong>：推荐使用纯函数编写，依赖 Props 渲染 UI。</li>\n<li><strong>工具函数</strong>：如数据格式化、计算逻辑等。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>纯函数通过隔离副作用和保证确定性，提升了代码的可预测性和可复用性，是函数式编程的核心概念，适用于需要高可靠性的场景。</p>\n"},{"title":"什么是函数柯里化？","description":"","answer":"<p>柯里化函数（Currying）是一种<strong>将多参数函数转换为嵌套的单参数函数链</strong>的技术，核心特性如下：</p>\n<p><strong>1. 核心概念</strong></p>\n<ul>\n<li><strong>分步传参</strong>：将 <code>fn(a, b, c)</code> 转换为 <code>fn(a)(b)(c)</code> 的调用形式，每次接收一个参数并返回新函数，直到参数收集完毕执行计算。</li>\n<li><strong>延迟执行</strong>：参数未完全传递时返回中间函数，便于复用或组合。</li>\n</ul>\n<p><strong>2. 实现原理</strong></p>\n<ul>\n<li><strong>闭包保存参数</strong>：通过闭包逐层缓存已传入的参数。</li>\n<li><strong>参数数量判断</strong>：当参数数量达到原函数要求时执行计算。</li>\n</ul>\n<p><strong>3. 示例</strong></p>\n<pre><code class=\"language-js\"><div class=\"language-js \"><span class=\"lang\">js</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 普通加法函数  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> sum</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> c</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#1E754F\"> return</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> c</span><span style=\"color:#999999\">;</span><span style=\"color:#999999\"> }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 柯里化后  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> curriedSum</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> c</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> c</span><span style=\"color:#999999\">;</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">curriedSum</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 6  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 分步调用（复用中间函数）  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> add2</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> curriedSum</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">)(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">add2</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 5  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>4. 应用场景</strong></p>\n<ul>\n<li><strong>参数复用</strong>：提前固定部分参数（如 API 请求的基础配置）。</li>\n<li><strong>函数组合</strong>：与高阶函数结合，创建灵活的功能模块。</li>\n<li><strong>延迟执行</strong>：按需触发计算（如事件处理函数）。</li>\n</ul>\n<p><strong>5. 与部分应用的区别</strong></p>\n<ul>\n<li><strong>柯里化</strong>：严格逐参数转换（如 <code>fn(a)(b)(c)</code>）。</li>\n<li><strong>部分应用</strong>：允许一次传递多个参数（如 <code>fn(a, b)</code> 返回接受 <code>c</code> 的函数）。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>柯里化通过分解参数提升函数的灵活性和复用性，是函数式编程的重要模式，适用于需要动态生成函数或组合逻辑的场景。</p>\n"},{"title":"如何实现链式调用？","description":"","answer":"<ol>\n<li><strong>返回对象自身（<code>return this</code>）</strong>：适用于需要连续修改同一对象的场景。</li>\n<li><strong>返回新实例</strong>：适用于不可变数据或切换操作上下文（如 <code>Promise.then</code>）。</li>\n<li><strong>混合模式</strong>：结合前两者，灵活适配不同需求。</li>\n</ol>\n"},{"title":"callee 和 caller 的作用","description":"","answer":"<p><strong>1. <code>arguments.callee</code></strong></p>\n<ul>\n<li><strong>作用</strong>：在函数内部，指向<strong>当前正在执行的函数本身</strong>。</li>\n<li><strong>经典场景</strong>：匿名函数递归（现在用命名函数表达式替代更好）</li>\n</ul>\n<p><strong>2. <code>function.caller</code></strong></p>\n<ul>\n<li><strong>作用</strong>：指向<strong>调用当前函数的函数</strong>（如果是全局调用则返回 <code>null</code>）。</li>\n</ul>\n"},{"title":"如何实现跨标签页通信？","description":"","answer":"<p><strong>1. <code>localStorage</code> 事件（同源）</strong></p>\n<ul>\n<li><strong>用法</strong>：A页面改<code>localStorage</code> → B页面监听<code>storage</code>事件</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// A页</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">localStorage</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">setItem</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">msg</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">stringify</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> data</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">hello</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// B页</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">storage</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">key</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">msg</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">parse</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">newValue</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>优点</strong>：简单兼容性好</li>\n<li><strong>缺点</strong>：只能传字符串，不能直接通信</li>\n</ul>\n<p><strong>2. <code>BroadcastChannel</code> API（同源）</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 创建同名频道</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> channel</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> BroadcastChannel</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">chat</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// A页发消息</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> text</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Hi</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// B页收消息</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>优点</strong>：现代API，支持复杂对象</li>\n<li><strong>缺点</strong>：IE/老安卓不支持</li>\n</ul>\n<p><strong>3. <code>SharedWorker</code>（同源）</strong></p>\n<ul>\n<li>创建共享Worker处理消息中转</li>\n<li>适合复杂场景（如多个页面共享数据）</li>\n</ul>\n<p><strong>4. <code>window.postMessage</code>（可跨域）</strong></p>\n<ul>\n<li>需先获取目标页面的<code>window</code>引用（如通过<code>window.open</code>）</li>\n<li>配合<code>window.opener</code>实现父子页通信</li>\n</ul>\n<p><strong>5. <code>Service Worker</code>（同源）</strong></p>\n<ul>\n<li>利用后台线程做消息中转</li>\n<li>可实现离线通信</li>\n</ul>\n<p><strong>6. Cookie轮询（不推荐）</strong></p>\n<ul>\n<li>定时读取Cookie变化</li>\n<li>性能差，已过时</li>\n</ul>\n<p><strong>总结选择</strong>：</p>\n<ul>\n<li>优先用<code>BroadcastChannel</code>（现代浏览器）</li>\n<li>兼容场景用<code>localStorage</code>事件</li>\n<li>跨域用<code>postMessage</code>（需控制目标窗口）</li>\n</ul>\n"},{"title":"你对 token 进行身份验证了解多少？","description":"","answer":"<p>Token 身份验证主要是用来替代传统的 Session 机制，让身份验证更灵活安全。大致流程是用户登录后，服务端生成一个 Token（比如 JWT）返回给前端，之后前端每次请求都在请求头里带上这个 Token，服务端验证通过后才响应数据。它的优势在于<strong>无状态</strong>（服务端不用存会话信息，适合分布式系统）、<strong>安全性高</strong>（Token 可以加密，配合 HTTPS 防泄露），而且<strong>跨域和移动端支持更好</strong>。常见的方案像 JWT 会把用户信息直接打包进 Token，而 Refresh Token 则是用长短效 Token 结合，避免频繁登录。简单来说，Token 就像一张加密的“通行证”，服务端解密验证合法后，才会允许访问资源。</p>\n"},{"title":"如何安全存储 JWT？","description":"<p>在 Web 应用中安全存储 JWT（JSON Web Token）是身份验证的关键环节，以下是行业最佳实践和常见解决方案：</p>\n<p><strong>1. 不要存储在以下位置</strong></p>\n<ul>\n<li><strong>❌ <code>localStorage/sessionStorage</code></strong> 易受 XSS 攻击（恶意脚本可读取）</li>\n<li><strong>❌ 普通 Cookie</strong> 未设置 <code>HttpOnly</code> 时仍可能被 JS 读取</li>\n</ul>\n<p><strong>2. 推荐方案：HttpOnly + Secure Cookie</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 服务端设置 Cookie 示例（Node.js）</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">cookie</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">token</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> jwt</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  httpOnly</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">     // 禁止 JS 访问</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  secure</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\">       // 仅 HTTPS 传输</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  sameSite</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Strict</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#A0ADA0\"> // 防御 CSRF</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  maxAge</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 15</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 60</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#2F798A\"> 1000</span><span style=\"color:#A0ADA0\"> // 短期有效期（如15分钟）</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>防御 XSS（JS 无法读取 Cookie）</li>\n<li>防御 CSRF（配合 <code>SameSite</code> 和 CSRF Token）</li>\n<li>自动随请求发送（浏览器默认行为）</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>需处理跨域 Cookie 配置</li>\n<li>旧版浏览器可能不支持 <code>SameSite</code></li>\n</ul>\n<p><strong>3. 替代方案：内存存储（适合 SPA）</strong></p>\n<ul>\n<li>登录后将 JWT 保存在内存变量中（例如 React 或 Vue 的全局状态、JS 变量）</li>\n<li>页面刷新时通过隐藏的 iframe 静默续期（OAuth 2.0 常用方案）</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 登录成功后存储到内存</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> authToken</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">/login</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  authToken</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">token</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>完全规避持久化存储风险</li>\n<li>适合敏感度高的场景</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>页面刷新后令牌丢失（需重新认证）</li>\n<li>需配合刷新令牌机制（Refresh Token）</li>\n</ul>\n<p><strong>4. 附加安全措施</strong></p>\n<ul>\n<li><strong>强制 HTTPS</strong>：防止中间人窃听</li>\n<li><strong>短期有效期</strong>：访问令牌（Access Token）有效期建议 ≤ 15 分钟</li>\n<li><strong>刷新令牌</strong>：通过独立的 Refresh Token 续期（存储于 HttpOnly Cookie 或服务端 Session）</li>\n<li><strong>黑名单机制</strong>：注销时使特定 JWT 失效（需服务端配合）</li>\n<li><strong>签名算法</strong>：使用强算法（如 RS256 而非 HS256）</li>\n</ul>\n<p><strong>不同场景推荐组合</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">场景</th>\n<th style=\"text-align:left\">存储方案</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"简述 JavaScript 的错误处理机制","description":"","answer":"<p>JavaScript 通过 <strong><code>try/catch</code> 语句</strong>、<strong>错误类型系统</strong>及<strong>事件循环错误传播机制</strong>处理运行时异常，支持主动抛出与异步错误捕获。</p>\n<p><strong>核心机制与用法</strong></p>\n<p><strong>1. 错误类型（内置 Error 子类）</strong></p>\n<ul>\n<li><strong><code>SyntaxError</code></strong>：语法错误（解析阶段抛出，无法捕获）；</li>\n<li><strong><code>ReferenceError</code></strong>：引用未声明变量；</li>\n<li><strong><code>TypeError</code></strong>：类型操作错误（如调用非函数）；</li>\n<li><strong><code>RangeError</code></strong>：数值越界（如数组负长度）；</li>\n<li><strong><code>URIError</code></strong> / <strong><code>EvalError</code></strong>：特定API使用错误；</li>\n<li><strong>自定义错误</strong>：继承 <code>Error</code> 类扩展业务错误。</li>\n</ul>\n<p><strong>2. 错误处理方式</strong></p>\n<ul>\n<li><strong><code>try/catch/finally</code></strong>：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">try</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">parse</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">invalid json</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">message</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 捕获异常  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#1E754F\"> finally</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">始终执行</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li><strong><code>throw</code> 主动抛出</strong>：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">if</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">!</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">)</span><span style=\"color:#1E754F\"> throw</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">数据为空</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>3. 异步错误处理</strong></p>\n<ul>\n<li><strong>Promise 链式捕获</strong>：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">json</span><span style=\"color:#999999\">())</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  .</span><span style=\"color:#59873A\">catch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">请求失败:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> err</span><span style=\"color:#999999\">));</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li><strong><code>async/await</code> + <code>try/catch</code></strong>：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> loadData</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  try</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    const</span><span style=\"color:#B07D48\"> res</span><span style=\"color:#999999\"> =</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">url</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">err</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li><strong>全局捕获</strong>：<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 未捕获的 Promise 错误  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">unhandledrejection</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Unhandled Rejection:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">reason</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 全局同步错误  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onerror</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">msg</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> url</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> line</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">error</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">Error: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">msg</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\"> at </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">url</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B56959\">:</span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">line</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 阻止默认错误提示  </span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>错误传播规则</strong></p>\n<ol>\n<li><strong>同步代码</strong>：错误逐层向上冒泡，直至被 <code>catch</code> 或全局 <code>onerror</code> 处理；</li>\n<li><strong>异步代码</strong>：\n<ul>\n<li><strong>宏任务（setTimeout等）</strong>：错误无法被外部 <code>try/catch</code> 捕获；</li>\n<li><strong>微任务（Promise）</strong>：通过 <code>.catch()</code> 或 <code>unhandledrejection</code> 捕获；</li>\n</ul>\n</li>\n<li><strong>模块系统</strong>：ES6 模块默认启用严格模式，未捕获错误直接终止脚本。</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><strong>无法捕获的异常</strong>：\n<ul>\n<li>语法错误（解析阶段抛出）；</li>\n<li>异步回调中的错误（如 <code>setTimeout</code> 内部未捕获的 <code>throw</code>）；</li>\n</ul>\n</li>\n<li><strong>错误对象属性</strong>：\n<ul>\n<li><code>message</code>：错误描述；</li>\n<li><code>stack</code>：调用栈信息（非标准但广泛支持）；</li>\n</ul>\n</li>\n<li><strong>生产环境监控</strong>：\n<ul>\n<li>使用 <code>window.onerror</code> 或 <code>Sentry</code>、<code>Bugsnag</code> 等工具收集日志；</li>\n</ul>\n</li>\n<li><strong>性能影响</strong>：避免在频繁执行的代码中过度使用 <code>try/catch</code>。</li>\n</ul>\n<p><strong>总结</strong>：掌握错误类型、同步/异步捕获方式及全局监控，是构建健壮 JavaScript 应用的关键。优先使用 <code>try/catch</code> 处理预期内的错误，结合全局监听兜底未知异常。</p>\n"},{"title":"Array.prototype.reduce的高级用法有哪些？","description":"","answer":"<p><strong>1. 生成哈希映射（对象）</strong></p>\n<p>将数组转换为按特定属性分组的对象：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> users</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Alice</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> role</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">admin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Bob</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> role</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">user</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#998418\"> id</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> name</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">Charlie</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> role</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">admin</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> roleMap</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> users</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> user</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  acc</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">role</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">role</span><span style=\"color:#999999\">]</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#999999\"> [];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  acc</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">role</span><span style=\"color:#999999\">].</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">user</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> {});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 输出：{ admin: [Alice对象, Charlie对象], user: [Bob对象] }</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 链式异步操作</strong></p>\n<p>顺序执行异步任务（类似 Promise 链）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> asyncTasks</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">fetchUser</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> fetchPosts</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> fetchComments</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">asyncTasks</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">async</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">prevPromise</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> task</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  await</span><span style=\"color:#B07D48\"> prevPromise</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> task</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">resolve</span><span style=\"color:#999999\">());</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 实现函数管道（Compose）</strong></p>\n<p>组合多个函数形成处理流水线：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> compose</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">fns</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> fns</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> fn</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> fn</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">v</span><span style=\"color:#999999\">),</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 示例：先加10，再平方</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> process</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> compose</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">x</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> x</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#2F798A\"> 10</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> x</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> x</span><span style=\"color:#AB5959\"> **</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">process</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // (5+10)^2 = 225</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>4. 生成 Map/Set 结构</strong></p>\n<p>直接构造复杂数据结构：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 生成 Map</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> map</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  (</span><span style=\"color:#B07D48\">m</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> m</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">id</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  new</span><span style=\"color:#59873A\"> Map</span><span style=\"color:#999999\">()</span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 生成去重数组（替代 new Set）</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> unique</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  (</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">includes</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">cur</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> cur</span><span style=\"color:#999999\">],</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  []</span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>5. 多维数据分析</strong></p>\n<p>复杂统计场景（优于多次遍历）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> orders</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#998418\"> product</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">A</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> price</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 100</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> quantity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\"> },</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  {</span><span style=\"color:#998418\"> product</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">B</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> price</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 200</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> quantity</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> report</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> orders</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> order</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  total</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">total</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> order</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">price</span><span style=\"color:#AB5959\"> *</span><span style=\"color:#B07D48\"> order</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">quantity</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  maxPrice</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> Math</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">max</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">maxPrice</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> order</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">price</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#998418\">  products</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">products</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> order</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">product</span><span style=\"color:#999999\">]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}),</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> total</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> maxPrice</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> products</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> []</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>6. 状态机实现</strong></p>\n<p>处理需要依赖前序状态的场景：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> input</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">a</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">b</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> numbers</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> strings</span><span style=\"color:#999999\"> }</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> input</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  typeof</span><span style=\"color:#B07D48\"> val</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">number</span><span style=\"color:#B5695977\">'</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    ?</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">numbers</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">)</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    :</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">strings</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">push</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">val</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">},</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> numbers</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> [],</span><span style=\"color:#998418\"> strings</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> []</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>7. 递归展开嵌套数组</strong></p>\n<p>替代 <code>flat</code> 方法的实现：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> deepFlatten</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  (</span><span style=\"color:#B07D48\">acc</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> item</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> acc</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">concat</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    Array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">isArray</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> ?</span><span style=\"color:#59873A\"> deepFlatten</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">item</span><span style=\"color:#999999\">)</span><span style=\"color:#AB5959\"> :</span><span style=\"color:#B07D48\"> item</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  ),</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#999999\">  []</span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#59873A\">deepFlatten</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">]]]);</span><span style=\"color:#A0ADA0\"> // [1, 2, 3]</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>8. 实现中间件机制（类似 Koa/Express）</strong></p>\n<p>模拟洋葱模型中间件:</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> middlewares</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">logger</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> auth</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> handler</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> requestHandler</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> middlewares</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">reduce</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  (</span><span style=\"color:#B07D48\">next</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> middleware</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> req</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> middleware</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">req</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> next</span><span style=\"color:#999999\">),</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  req</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> req</span><span style=\"color:#A0ADA0\"> // 最后的默认处理</span></span>\n<span class=\"line\"><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 执行请求</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">requestHandler</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> url</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">/api</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>9.更多</strong></p>\n<p><a href=\"https://segmentfault.com/a/1190000021737914\" target=\"_blank\" rel=\"noopener noreferrer\">25个你不得不知道的数组reduce高级用法</a></p>\n"},{"title":"谈谈你对迭代器(Iterator)的认识","description":"<p>迭代器（Iterator）是 JavaScript 中用于<strong>统一遍历数据结构</strong>的机制。以下是关键点整理：</p>\n<p><strong>1. 核心概念</strong></p>\n<ul>\n<li>\n<p><strong>迭代器对象</strong>：必须实现 <code>next()</code> 方法，返回 <code>{ value: any, done: boolean }</code> 示例：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> iterator</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  next</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> value</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> done</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>可迭代对象</strong>：实现 <code>[Symbol.iterator]()</code> 方法的对象，返回迭代器 示例：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> iterable</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  [</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#B07D48\"> iterator</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 返回上述迭代器对象</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 内置可迭代对象</strong></p>\n<ul>\n<li>\n<p><strong>数组</strong>、<strong>字符串</strong>、<strong>Map/Set</strong>、<strong>NodeList</strong></p>\n</li>\n<li>\n<p><strong>生成器对象</strong>（Generator）：既是迭代器又是可迭代对象</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#1E754F\">*</span><span style=\"color:#59873A\"> gen</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#1E754F\"> yield</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span><span style=\"color:#1E754F\"> yield</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> g</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> gen</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">g</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]()</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B07D48\"> g</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // true（可迭代）</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>3. 使用场景</strong></p>\n<ul>\n<li>\n<p><strong><code>for...of</code> 循环</strong>：自动调用迭代器</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#999999\"> [</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">])</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 1,2,3</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>解构赋值</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">([</span><span style=\"color:#2F798A\">10</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 20</span><span style=\"color:#999999\">]);</span><span style=\"color:#A0ADA0\"> // a=10, b=20</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>扩展运算符</strong></p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">hello</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">];</span><span style=\"color:#A0ADA0\"> // ['h','e','l','l','o']</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>异步迭代</strong>：<code>for await...of</code> 遍历异步数据源</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#1E754F\">for</span><span style=\"color:#1E754F\"> await</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> chunk</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> asyncStream</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">chunk</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>4. 自定义迭代器</strong></p>\n<p><strong>实现一个数字范围迭代器</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">class</span><span style=\"color:#2E8F82\"> Range</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  constructor</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> start</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#A65E2B\">    this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">end</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> end</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#999999\">  [</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">    let</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#999999\"> =</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">start</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">      next</span><span style=\"color:#999999\">:</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">current</span><span style=\"color:#999999\"> &#x3C;=</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">end</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> value</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> current</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\"> done</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span><span style=\"color:#1E754F\"> else</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> done</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 使用</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> num</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Range</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">,</span><span style=\"color:#2F798A\"> 7</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">num</span><span style=\"color:#999999\">);</span><span style=\"color:#A0ADA0\"> // 5,6,7</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>5. 迭代器 vs 生成器</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">迭代器</th>\n<th style=\"text-align:left\">生成器</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"谈谈你对生成器(Generator)的认识","description":"<p>生成器（Generator）是 JavaScript 中用于<strong>控制函数执行流程</strong>的特殊函数，能够暂停和恢复代码执行。以下是关键点总结：</p>\n<p><strong>1. 核心特性</strong></p>\n<ul>\n<li><strong>定义方式</strong>：通过 <code>function*</code> 声明生成器函数</li>\n<li><strong>执行控制</strong>：使用 <code>yield</code> 暂停执行，<code>next()</code> 恢复执行</li>\n<li><strong>返回对象</strong>：生成器实例（同时是<strong>迭代器</strong>，可直接用于 <code>for...of</code>）</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#1E754F\">*</span><span style=\"color:#59873A\"> gen</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  yield</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  yield</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> g</span><span style=\"color:#999999\"> =</span><span style=\"color:#59873A\"> gen</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">g</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">next</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // { value: 1, done: false }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">g</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">next</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // { value: 2, done: false }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">g</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">next</span><span style=\"color:#999999\">());</span><span style=\"color:#A0ADA0\"> // { value: 3, done: true }</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. 核心应用场景</strong></p>\n<p><strong>① 惰性求值（按需生成数据）</strong></p>\n<ul>\n<li>处理大数据集时逐项生成，节省内存</li>\n</ul>\n<pre><code class=\"language-JavaScript\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function* generateSequence(max) {</span></span>\n<span class=\"line\"><span>  let n = 0;</span></span>\n<span class=\"line\"><span>  while (n &#x3C; max) {</span></span>\n<span class=\"line\"><span>    yield n++;</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>for (const num of generateSequence(1000000)) {</span></span>\n<span class=\"line\"><span>  if (num > 10) break; // 不会生成全部100万个数</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>② 简化迭代器实现</strong></p>\n<ul>\n<li>替代手动编写迭代器对象</li>\n</ul>\n<pre><code class=\"language-JavaScript\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>const obj = {</span></span>\n<span class=\"line\"><span>  *[Symbol.iterator]() {</span></span>\n<span class=\"line\"><span>    yield 'a';</span></span>\n<span class=\"line\"><span>    yield 'b';</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>};</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>console.log([...obj]); // ['a', 'b']</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>③ 异步流程控制（协程）</strong></p>\n<ul>\n<li>配合 <code>yield</code> 实现类似 <code>async/await</code> 的效果</li>\n</ul>\n<pre><code class=\"language-JavaScript\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function* fetchUser() {</span></span>\n<span class=\"line\"><span>  const user = yield fetch('/user'); // 等待Promise解决</span></span>\n<span class=\"line\"><span>  const posts = yield fetch(`/posts/${user.id}`);</span></span>\n<span class=\"line\"><span>  return posts;</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>// 执行器函数（类似co库）</span></span>\n<span class=\"line\"><span>function run(generator) {</span></span>\n<span class=\"line\"><span>  const g = generator();</span></span>\n<span class=\"line\"><span>  function handle(result) {</span></span>\n<span class=\"line\"><span>    if (result.done) return result.value;</span></span>\n<span class=\"line\"><span>    return result.value.then(data => handle(g.next(data)));</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>  return handle(g.next());</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>run(fetchUser).then(posts => console.log(posts));</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>3. 双向通信能力</strong></p>\n<ul>\n<li><strong>向外传值</strong>：<code>yield</code> 右侧表达式结果作为 <code>next()</code> 返回的 <code>value</code></li>\n<li><strong>向内传值</strong>：<code>next(arg)</code> 的参数会成为当前 <code>yield</code> 表达式的返回值</li>\n</ul>\n<pre><code class=\"language-JavaScript\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function* dialog() {</span></span>\n<span class=\"line\"><span>  const name = yield 'What is your name?'; // 接收next('Alice')传入的值</span></span>\n<span class=\"line\"><span>  yield `Hello, ${name}!`;</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>const d = dialog();</span></span>\n<span class=\"line\"><span>console.log(d.next().value); // \"What is your name?\"</span></span>\n<span class=\"line\"><span>console.log(d.next('Alice').value); // \"Hello, Alice!\"</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>4. 错误处理</strong></p>\n<ul>\n<li><strong>外部抛出错误</strong>：通过 <code>generator.throw()</code></li>\n<li><strong>内部捕获错误</strong>：使用 <code>try...catch</code> 包裹 <code>yield</code></li>\n</ul>\n<pre><code class=\"language-JavaScript\"><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function* errorHandling() {</span></span>\n<span class=\"line\"><span>  try {</span></span>\n<span class=\"line\"><span>    yield '正常执行';</span></span>\n<span class=\"line\"><span>  } catch (e) {</span></span>\n<span class=\"line\"><span>    yield `捕获错误：${e.message}`;</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>const eh = errorHandling();</span></span>\n<span class=\"line\"><span>eh.next(); // { value: '正常执行', done: false }</span></span>\n<span class=\"line\"><span>eh.throw(new Error('出错啦!')); // { value: '捕获错误：出错啦!', done: false }</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>5. 与异步函数的对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">生成器 (Generator)</th>\n<th style=\"text-align:left\">异步函数 (Async/Await)</th>\n</tr>\n</thead>\n</table>\n","answer":""},{"title":"谈谈你对V8引擎的理解","description":"","answer":"<p><strong>1. 基础定位</strong></p>\n<p><strong>V8 是 Google 开发的 JavaScript 引擎</strong>，负责将 JavaScript 代码转换为机器码并执行。它不仅是 Chrome 浏览器的核心组件，也支撑了 Node.js 的运行，是连接高级语言和底层硬件的桥梁。</p>\n<p><strong>2. 核心特点</strong></p>\n<ul>\n<li><strong>高性能</strong>： 通过 <strong>即时编译（JIT）</strong> 技术，先快速解释执行代码，再对高频执行的“热点代码”进行优化编译（比如循环或递归），平衡启动速度和执行效率。</li>\n<li><strong>内存管理</strong>： 使用 <strong>分代垃圾回收机制</strong>，分为“新生代”和“老生代”，针对短期存活和长期存活的对象采用不同回收策略，减少内存占用。</li>\n<li><strong>优化机制</strong>： 通过 <strong>隐藏类（Hidden Class）</strong> 等技术优化对象属性访问（类似给对象属性贴“固定标签”），避免动态类型语言频繁的类型检查开销。</li>\n</ul>\n<p><strong>3. 实际影响（关联开发者视角）</strong></p>\n<ul>\n<li><strong>对前端开发的意义</strong>： V8 的性能直接影响 JavaScript 的执行速度，现代框架（如 React/Vue）和复杂 Web 应用的流畅运行都依赖其优化能力。</li>\n<li><strong>对 Node.js 的意义</strong>： V8 让 JavaScript 突破了浏览器的限制，能够处理服务器端的高并发 I/O 操作，推动了全栈开发的可能性。</li>\n</ul>\n<p><strong>4. 如何写出对 V8 友好的代码（加分项）</strong></p>\n<ul>\n<li><strong>保持类型稳定</strong>：避免同一变量频繁切换类型（如 <code>let a = 1; a = 'str'</code>）。</li>\n<li><strong>避免动态增删对象属性</strong>：初始化时尽量固定对象结构，减少隐藏类的重建。</li>\n<li><strong>及时释放内存</strong>：手动解除无用引用（如置为 <code>null</code>），减轻垃圾回收压力。</li>\n</ul>\n"},{"title":"谈谈Javascript的垃圾回收机制","description":"","answer":"<p><strong>1. 标记-清除（Mark-and-Sweep）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：</p>\n<ul>\n<li><strong>标记阶段</strong>：从根对象（如全局对象、当前函数调用栈、活跃的闭包等）出发，递归遍历所有可达对象，并标记为“活动”。</li>\n<li><strong>清除阶段</strong>：遍历堆内存，回收所有未被标记的对象，释放其内存。</li>\n</ul>\n</li>\n<li>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>有效处理循环引用（不可达的循环引用对象会被回收）。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> obj1</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> prop</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> obj2</span><span style=\"color:#999999\"> };</span><span style=\"color:#A0ADA0\"> // obj1引用obj2</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">let</span><span style=\"color:#B07D48\"> obj2</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> prop</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> obj1</span><span style=\"color:#999999\"> };</span><span style=\"color:#A0ADA0\"> // obj2引用obj1（循环引用）</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">obj1</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#B07D48\"> obj2</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\">  // 切断根引用，循环引用对象将被回收</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n<p><strong>2. 引用计数（已基本弃用）</strong></p>\n<ul>\n<li>\n<p><strong>原理</strong>：跟踪每个对象被引用的次数，当引用数为零时立即回收。</p>\n</li>\n<li>\n<p><strong>缺陷</strong>：无法处理循环引用，易导致内存泄漏。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> createCycle</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> ref</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  let</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> ref</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\"> null</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // a引用b</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  b</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ref</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // b引用a（循环引用）</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">createCycle</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // 函数执行后，a和b的引用数仍为1，无法回收</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ul>\n"},{"title":"WebWorker、SharedWorker 和 ServiceWorker 有哪些区别？","description":"","answer":"<p><code>WebWorker</code>、<code>SharedWorker</code> 和 <code>ServiceWorker</code> 都是 Web API 提供的用于在后台线程执行 JavaScript 代码的机制，但它们有不同的用途和特性。下面是它们的主要区别：</p>\n<p><strong>1. WebWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：用于在后台线程中执行 JavaScript 代码，避免阻塞主线程（UI线程）。</li>\n<li><strong>生命周期</strong>：与页面的生命周期关联，当页面关闭时，WebWorker 也会终止。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 进行通信，只能与创建它的页面进行通信，不能与其他页面或 Worker 进行直接通信。</li>\n<li><strong>共享数据</strong>：不能直接与其他 WebWorkers 或页面共享数据。</li>\n<li><strong>应用场景</strong>：适用于需要在后台执行计算密集型任务的场景，如数据处理、图像处理等。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// main.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Worker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello, worker!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">Received: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">data</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. SharedWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：允许多个浏览器上下文（如不同的页面或 iframe）共享一个 Worker 实例。</li>\n<li><strong>生命周期</strong>：与浏览器会话关联，不会随页面关闭而销毁，只要有一个页面或 iframe 仍在使用 SharedWorker，它就会保持活跃。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 进行通信，但可以在不同的页面或 iframe 之间进行通信。</li>\n<li><strong>共享数据</strong>：可以在多个页面或 iframe 之间共享数据。</li>\n<li><strong>应用场景</strong>：适用于需要在多个页面或 iframe 之间共享数据或状态的场景，如实时应用、共享缓存等。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// main1.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> SharedWorker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">shared-worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello from page 1!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// main2.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> SharedWorker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">shared-worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello from page 2!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// shared-worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onconnect</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ports</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">Received: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">data</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. ServiceWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：主要用于拦截和处理网络请求，缓存资源，实现离线功能和推送通知等功能。</li>\n<li><strong>生命周期</strong>：与页面的生命周期无关，可以在后台长时间运行，不会随页面的关闭而结束。可以在浏览器关闭时继续运行，用于处理推送通知等。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 与页面进行通信，但不能直接访问 DOM。</li>\n<li><strong>共享数据</strong>：通过缓存机制（Cache API）和 IndexedDB 进行数据存储和共享。</li>\n<li><strong>应用场景</strong>：适用于实现离线支持、缓存优化、后台同步、推送通知等功能。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// service-worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">install</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // Perform install steps</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  event</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">waitUntil</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    caches</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">open</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">my-cache</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">cache</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addAll</span><span style=\"color:#999999\">([</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/styles/main.css</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/script/main.js</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      ]);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">fetch</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  event</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">respondWith</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    caches</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">match</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">request</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">request</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"fetch 与 ajax 的区别是什么？","description":"","answer":"<p>Fetch 和 Ajax（基于 XMLHttpRequest）都是用来做异步请求的，主要区别有几点：</p>\n<ol>\n<li><strong>语法差异</strong>：Fetch 基于 Promise，写法更简洁，避免回调嵌套；Ajax 使用 XHR 对象，需要通过事件回调处理响应。</li>\n<li><strong>错误处理</strong>：Fetch 只有在网络故障时才会 reject，HTTP 错误（如 404）需手动判断 <code>response.ok</code>；Ajax 直接在回调里通过状态码处理。</li>\n<li><strong>功能配置</strong>：Fetch 默认不发送 cookie，需设置 <code>credentials: 'include'</code>；Ajax 在同源下自动携带。</li>\n<li><strong>取消请求</strong>：Ajax 可用 <code>xhr.abort()</code>，Fetch 需要结合 <code>AbortController</code>。</li>\n<li><strong>兼容性</strong>：XHR 兼容性更好，Fetch 需考虑旧浏览器支持。</li>\n</ol>\n"},{"title":"escape、encodeURI、encodeURIComponent 区别","description":"","answer":"<p>这三个方法用于 URL 编码，但适用场景和编码规则不同：</p>\n<ol>\n<li>\n<p><strong><code>escape</code>（已废弃）</strong></p>\n<ul>\n<li>对非 ASCII 字符（如中文）编码为 <code>%uxxxx</code> 格式，对部分符号（如 <code>@*_+-./</code>）不编码。</li>\n<li><strong>不推荐使用</strong>，无法替代 <code>encodeURI</code> 或 <code>encodeURIComponent</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>encodeURI</code></strong></p>\n<ul>\n<li><strong>编码整个 URL</strong>，保留 URI 合法字符（如 <code>:/?#[]@</code> 等），只转义空格和中文等非法字符。</li>\n<li>适用场景：直接编码完整 URL，确保 URL 整体有效。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">encodeURI</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">https://example.com/测试?name=张三</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 输出：https://example.com/%E6%B5%8B%E8%AF%95?name=%E5%BC%A0%E4%B8%89</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong><code>encodeURIComponent</code></strong></p>\n<ul>\n<li><strong>编码 URL 的某一部分</strong>（如参数值），转义所有非标准字符（包括 <code>:/?#</code> 等保留字符）。</li>\n<li>适用场景：单独编码查询参数、哈希值等，避免破坏 URL 结构。</li>\n</ul>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#59873A\">encodeURIComponent</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">name=张三&#x26;age=20</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\"> </span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 输出：name%3D%E5%BC%A0%E4%B8%89%26age%3D20</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>处理完整 URL → <code>encodeURI</code>（保留关键符号）。</li>\n<li>处理 URL 片段（如参数）→ <code>encodeURIComponent</code>（严格转义）。</li>\n<li><code>escape</code> 已过时，不要用。</li>\n</ul>\n"},{"title":"什么是伪数组？如何转换成数组？","description":"","answer":"<p><strong>伪数组（类数组对象）</strong> 是有 <code>length</code> 属性、数字索引属性，但<strong>不具备数组方法</strong>（如 <code>push</code>、<code>slice</code>）的对象。常见如 <code>arguments</code>、DOM 元素集合（如 <code>document.getElementsByTagName</code> 返回的结果）。</p>\n<p><strong>转成真数组的常用方法</strong>：</p>\n<ol>\n<li>\n<p><strong><code>Array.from()</code></strong>（ES6）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Array</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">from</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">伪数组</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong><code>slice</code> + <code>call</code></strong>（ES5）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [].</span><span style=\"color:#B07D48\">slice</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">call</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">伪数组</span><span style=\"color:#999999\">);</span><span style=\"color:#393A34\">  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>扩展运算符</strong>（要求对象可迭代）：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> arr</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> [...</span><span style=\"color:#B07D48\">伪数组</span><span style=\"color:#999999\">];</span><span style=\"color:#A0ADA0\">  // 如 arguments 或 NodeList  </span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"谈谈你对 JSON 的理解","description":"","answer":"<ol>\n<li><strong>是什么</strong>： JSON（JavaScript Object Notation）是一种<strong>轻量级的数据交换格式</strong>，本质是字符串，但结构像JS对象（键值对）。</li>\n<li><strong>核心特点</strong>：\n<ul>\n<li><strong>易读</strong>：<code>{ &quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18 }</code> 这种结构对人友好。</li>\n<li><strong>通用</strong>：几乎所有语言都支持（前端传数据给Java/Python等毫无压力）。</li>\n<li><strong>轻量</strong>：比XML更简洁，传输速度快。</li>\n</ul>\n</li>\n<li><strong>前端常用方法</strong>：\n<ul>\n<li><code>JSON.stringify(obj)</code>：把JS对象转成JSON字符串（比如传给后端）。</li>\n<li><code>JSON.parse(jsonStr)</code>：把JSON字符串转回JS对象（比如接后端数据）。</li>\n</ul>\n</li>\n<li><strong>注意事项</strong>：\n<ul>\n<li>JSON键必须用<strong>双引号</strong>包裹。</li>\n<li>不支持函数、undefined等类型（会被忽略或转成null）。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"谈谈你对 Base64 的理解","description":"","answer":"<ol>\n<li><strong>是什么</strong>： Base64 是一种<strong>二进制转文本的编码方式</strong>，将任意二进制数据（如图片、文件）转换为由64个字符（A-Z, a-z, 0-9, +/）组成的字符串。</li>\n<li><strong>核心用途</strong>：\n<ul>\n<li><strong>跨文本协议传输二进制</strong>：比如在HTML/CSS中直接嵌入图片（Data URL）、API传输文件。</li>\n<li><strong>简单混淆</strong>：避免特殊字符引发解析问题（如JSON中传二进制）。</li>\n</ul>\n</li>\n<li><strong>前端常用方法</strong>：\n<ul>\n<li><strong>编码</strong>：<code>btoa(二进制数据)</code>（如 <code>btoa('Hello')</code> → &quot;SGVsbG8=&quot;）。</li>\n<li><strong>解码</strong>：<code>atob(Base64字符串)</code>。</li>\n</ul>\n</li>\n<li><strong>注意事项</strong>：\n<ul>\n<li><strong>体积增大</strong>：编码后数据体积比原始二进制大<strong>约1/3</strong>。</li>\n<li><strong>非加密</strong>：只是编码，<strong>明文可见</strong>，敏感数据需额外加密。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Object.is() 与比较操作符 “\\===”、“\\==” 有什么区别","description":"","answer":"<ol>\n<li><strong>类型转换</strong>\n<ul>\n<li><code>==</code> 会做隐式类型转换（如 <code>'5' == 5</code> → <code>true</code>）。</li>\n<li><code>===</code> 和 <code>Object.is()</code> <strong>不会转换类型</strong>，类型不同直接返回 <code>false</code>。</li>\n</ul>\n</li>\n<li><strong>特殊值 <code>NaN</code> 的比较</strong>\n<ul>\n<li><code>NaN === NaN</code> → <code>false</code>（NaN 不等于自身）。</li>\n<li><code>Object.is(NaN, NaN)</code> → <code>true</code>（唯一能正确判断 NaN 相等的场景）。</li>\n</ul>\n</li>\n<li><strong><code>+0</code> 和 <code>-0</code> 的区分</strong>\n<ul>\n<li><code>+0 === -0</code> → <code>true</code>。</li>\n<li><code>Object.is(+0, -0)</code> → <code>false</code>（能区分正负零）。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong>：</p>\n<ul>\n<li><strong>用 <code>===</code></strong>：日常大多数场景，性能更好，兼容性更广。</li>\n<li><strong>用 <code>Object.is()</code></strong>：需精确处理 <code>NaN</code> 或区分 <code>+0/-0</code> 的特殊情况（如框架底层逻辑）。</li>\n</ul>\n"},{"title":"如何检测对象是否循环引用？","description":"","answer":"<p><strong>1. 使用 <code>Set</code> 进行检测</strong></p>\n<p>一种常见的方法是使用 <code>Set</code> 数据结构来跟踪已经访问过的对象。如果在遍历对象时发现某个对象已经在 <code>Set</code> 中存在，就可以确定存在循环引用。</p>\n<p><strong>示例代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> hasCircularReference</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> seen</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Set</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">object</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">seen</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 循环引用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      seen</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">add</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">keys</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\"> (</span><span style=\"color:#59873A\">detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 测试循环引用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">hasCircularReference</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 输出：true**2. 使用 `WeakMap` 进行检测**</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><code>WeakMap</code> 也可以用来检测循环引用，它与 <code>Set</code> 类似，但使用 <code>WeakMap</code> 可以避免内存泄漏，因为 <code>WeakMap</code> 的键是弱引用的。</p>\n<p><strong>示例代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> hasCircularReference</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> seen</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> WeakMap</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  function</span><span style=\"color:#59873A\"> detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#AB5959\"> &#x26;&#x26;</span><span style=\"color:#AB5959\"> typeof</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#AB5959\"> ===</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">object</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">seen</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">has</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span><span style=\"color:#A0ADA0\"> // 循环引用</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">      seen</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">set</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">,</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      for</span><span style=\"color:#999999\"> (</span><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> key</span><span style=\"color:#AB5959\"> of</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">keys</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        if</span><span style=\"color:#999999\"> (</span><span style=\"color:#59873A\">detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">key</span><span style=\"color:#999999\">]))</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">          return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#59873A\"> detect</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 测试循环引用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">hasCircularReference</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 输出：true</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. 使用 JSON 序列化</strong></p>\n<p>一种简单的检测方法是尝试将对象序列化为 JSON 字符串，如果对象中存在循环引用，则会抛出错误。这种方法的缺点是会丢失对象中无法序列化的部分。</p>\n<p><strong>示例代码</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> isCircular</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  try</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    JSON</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">stringify</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span><span style=\"color:#1E754F\"> catch</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">    return</span><span style=\"color:#1E754F\"> true</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 测试循环引用</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {};</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> a</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#59873A\">isCircular</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">));</span><span style=\"color:#A0ADA0\"> // 输出：true</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"WebWorker、SharedWorker 和 ServiceWorker 有哪些区别？","description":"","answer":"<p><strong>1. WebWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：用于在后台线程中执行 JavaScript 代码，避免阻塞主线程（UI线程）。</li>\n<li><strong>生命周期</strong>：与页面的生命周期关联，当页面关闭时，WebWorker 也会终止。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 进行通信，只能与创建它的页面进行通信，不能与其他页面或 Worker 进行直接通信。</li>\n<li><strong>共享数据</strong>：不能直接与其他 WebWorkers 或页面共享数据。</li>\n<li><strong>应用场景</strong>：适用于需要在后台执行计算密集型任务的场景，如数据处理、图像处理等。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// main.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Worker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello, worker!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">Received: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">data</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>2. SharedWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：允许多个浏览器上下文（如不同的页面或 iframe）共享一个 Worker 实例。</li>\n<li><strong>生命周期</strong>：与浏览器会话关联，不会随页面关闭而销毁，只要有一个页面或 iframe 仍在使用 SharedWorker，它就会保持活跃。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 进行通信，但可以在不同的页面或 iframe 之间进行通信。</li>\n<li><strong>共享数据</strong>：可以在多个页面或 iframe 之间共享数据。</li>\n<li><strong>应用场景</strong>：适用于需要在多个页面或 iframe 之间共享数据或状态的场景，如实时应用、共享缓存等。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// main1.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> SharedWorker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">shared-worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello from page 1!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// main2.js</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> SharedWorker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">shared-worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello from page 2!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// shared-worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onconnect</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ports</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">`</span><span style=\"color:#B56959\">Received: </span><span style=\"color:#1E754F\">${</span><span style=\"color:#B56959\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B56959\">data</span><span style=\"color:#1E754F\">}</span><span style=\"color:#B5695977\">`</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>3. ServiceWorker</strong></p>\n<ul>\n<li><strong>作用</strong>：主要用于拦截和处理网络请求，缓存资源，实现离线功能和推送通知等功能。</li>\n<li><strong>生命周期</strong>：与页面的生命周期无关，可以在后台长时间运行，不会随页面的关闭而结束。可以在浏览器关闭时继续运行，用于处理推送通知等。</li>\n<li><strong>通信</strong>：通过 <code>postMessage</code> 和 <code>onmessage</code> 与页面进行通信，但不能直接访问 DOM。</li>\n<li><strong>共享数据</strong>：通过缓存机制（Cache API）和 IndexedDB 进行数据存储和共享。</li>\n<li><strong>应用场景</strong>：适用于实现离线支持、缓存优化、后台同步、推送通知等功能。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// service-worker.js</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">install</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">  // Perform install steps</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  event</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">waitUntil</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    caches</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">open</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">my-cache</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">cache</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> cache</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addAll</span><span style=\"color:#999999\">([</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/styles/main.css</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#B5695977\">        '</span><span style=\"color:#B56959\">/script/main.js</span><span style=\"color:#B5695977\">'</span></span>\n<span class=\"line\"><span style=\"color:#999999\">      ]);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">fetch</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  event</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">respondWith</span><span style=\"color:#999999\">(</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    caches</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">match</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">request</span><span style=\"color:#999999\">).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">response</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">      return</span><span style=\"color:#B07D48\"> response</span><span style=\"color:#AB5959\"> ||</span><span style=\"color:#59873A\"> fetch</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">request</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    })</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  );</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"一直在 window 上面挂内容（数据，方法等等），是否有什么风险？","description":"","answer":"<p><strong>1. 全局命名冲突</strong></p>\n<p><code>window</code> 对象是全局对象，将内容挂载到 <code>window</code> 上可能会导致命名冲突。不同的脚本或库可能会使用相同的全局变量名，导致冲突和意外的行为。</p>\n<p><strong>2.性能问题</strong></p>\n<p>频繁地在 <code>window</code> 对象上添加和修改属性可能会影响性能，特别是当这些操作涉及大量数据时。<code>window</code> 对象的复杂度增加可能会导致浏览器的内存使用和处理速度下降。</p>\n<p><strong>3. 内存泄漏</strong></p>\n<p>如果在 <code>window</code> 对象上挂载了大量数据或引用，而这些数据不再使用但没有被正确清理，会导致内存泄漏。这会导致应用的内存占用逐渐增加，最终可能导致浏览器崩溃或变得不响应。</p>\n<p><strong>4. 安全性问题</strong></p>\n<p>将敏感数据或功能暴露在 <code>window</code> 对象上可能会带来安全风险。如果恶意脚本能够访问或修改这些全局属性，可能会导致安全漏洞，例如数据泄露或功能被篡改。</p>\n<p><strong>5. 难以维护</strong></p>\n<p>全局对象上的数据和功能可能会使代码变得难以维护。全局状态的管理变得复杂，特别是在大型应用或团队开发环境中，调试和追踪全局变量的来源可能会变得困难。</p>\n"},{"title":"原生 js 如何进行监听路由的变化？","description":"","answer":"<p>在原生 JavaScript 中，可以通过监听 <code>hashchange</code> 事件和 <code>popstate</code> 事件来监听路由变化。以下是常见的方法：</p>\n<ol>\n<li>监听 <code>hashchange</code> 事件</li>\n</ol>\n<p><code>hashchange</code> 事件适用于基于哈希的路由（即 <code>#</code> 形式的路由，如 <code>example.com/#/home</code>）。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">hashchange</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hash changed to:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">hash</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>原理</strong>：当 URL 中的 <code>#</code> 部分发生变化时，会触发 <code>hashchange</code> 事件。</li>\n<li><strong>优点</strong>：简单、兼容性好。</li>\n<li><strong>缺点</strong>：只能监听 <code>#</code> 部分的变化，不适用于 <code>history</code> API 模式的路由。</li>\n</ul>\n<ol>\n<li>监听 <code>popstate</code> 事件</li>\n</ol>\n<p><code>popstate</code> 事件适用于 <code>history</code> API（例如 <code>pushState</code>、<code>replaceState</code>）实现的前端路由。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">popstate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Location changed to:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">State data:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">state</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ul>\n<li><strong>原理</strong>：当 <code>history</code> 堆栈发生变化（例如使用 <code>back</code>、<code>forward</code>、<code>go</code> 等方法）时，会触发 <code>popstate</code> 事件。</li>\n<li><strong>优点</strong>：适用于 <code>history</code> API，能更好地支持现代路由方案。</li>\n<li><strong>缺点</strong>：不包括直接调用 <code>pushState</code> 和 <code>replaceState</code> 的情况，需要手动触发。</li>\n</ul>\n<ol>\n<li>重写 <code>pushState</code> 和 <code>replaceState</code> 以触发自定义事件</li>\n</ol>\n<p><code>pushState</code> 和 <code>replaceState</code> 本身不会触发 <code>popstate</code>，可以重写它们并手动触发事件。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> originalPushState</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> history</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pushState</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">pushState</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    originalPushState</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">apply</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">dispatchEvent</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Event</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">pushstate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> originalReplaceState</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> history</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">replaceState</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">history</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">replaceState</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\"> (...</span><span style=\"color:#B07D48\">args</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    originalReplaceState</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">apply</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> args</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">dispatchEvent</span><span style=\"color:#999999\">(</span><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Event</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">replacestate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 监听自定义的 pushstate 和 replacestate 事件</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">pushstate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">URL changed (pushState):</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">replacestate</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> ()</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">URL changed (replaceState):</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> location</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">pathname</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"MessageChannel 是什么，有什么使用场景？","description":"","answer":"<p>MessageChannel 是浏览器提供的一种用于在不同上下文间建立直接通信通道的 API，属于 Channel Messaging API。它允许独立的代码块（如窗口、iframe、Web Workers 等）通过端口（MessagePort）进行双向数据传输。</p>\n<p><strong>核心概念：</strong></p>\n<ul>\n<li><strong>组成</strong>：每个 <code>MessageChannel</code> 实例包含两个相互关联的 <code>MessagePort</code>（<code>port1</code> 和 <code>port2</code>）。</li>\n<li><strong>通信机制</strong>：一端通过 <code>port.postMessage()</code> 发送消息，另一端通过监听 <code>message</code> 事件接收消息。</li>\n<li><strong>所有权转移</strong>：端口可通过 <code>postMessage</code> 的 <code>transfer</code> 参数传递给其他上下文，实现安全通信。</li>\n</ul>\n<p><strong>主要使用场景：</strong></p>\n<ol>\n<li>\n<p><strong>跨文档通信</strong> <strong>示例</strong>：主页面与 iframe 直接通信，避免通过 <code>window.postMessage</code> 广播消息。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 主页面</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> channel</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> MessageChannel</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">iframe</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">contentWindow</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">init</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">*</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Received:</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// iframe 内部</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">window</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ports</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Hello from iframe!</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>Web Workers 高效通信</strong> 主线程与 Worker 间建立专用通道，减少全局消息干扰。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 主线程</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> worker</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> Worker</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">worker.js</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> channel</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> MessageChannel</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">worker</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> port</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port2</span><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* 处理消息 */</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// Worker 内部</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">Data from Worker</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">};</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>Service Worker 双向交互</strong> Service Worker 与客户端页面实时同步状态。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 页面</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">navigator</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">serviceWorker</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">controller</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> type</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">SYNC</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> },</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port2</span><span style=\"color:#999999\">]);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* 更新状态 */</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// Service Worker</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">self</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">addEventListener</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">message</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">event</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">  const</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> event</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">ports</span><span style=\"color:#999999\">[</span><span style=\"color:#2F798A\">0</span><span style=\"color:#999999\">];</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">({</span><span style=\"color:#998418\"> status</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">updated</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\"> });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">});</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>模块间解耦通信</strong> 复杂应用中使用私有通道替代全局事件，防止命名冲突。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#A0ADA0\">// 模块A</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> channel</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#59873A\"> MessageChannel</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">moduleB</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">init</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">channel</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">port1</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">'</span><span style=\"color:#B56959\">ModuleA ready</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 模块B</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> init</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">port</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#A0ADA0\"> /* 处理消息 */</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n<li>\n<p><strong>异步任务协调</strong> 结合 Promise 实现等待响应模式。</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> request</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> port</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#AB5959\"> new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">((</span><span style=\"color:#B07D48\">resolve</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">postMessage</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">    port</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">onmessage</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#59873A\"> resolve</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">e</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">data</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">  });</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n</li>\n</ol>\n"},{"title":"setTimeout 延时写成0，一般可以什么场景下使用？","description":"","answer":"<p>将<code>setTimeout</code>的延时参数设置为0通常用于创建一个宏任务，使用0延时仍然会导致一些延迟，但它比较接近于立即执行。</p>\n<p>以下是一些通常会使用0延时的情况：</p>\n<ol>\n<li><strong>延迟执行到当前代码块之后</strong></li>\n</ol>\n<p>当需要确保某段代码在<strong>当前同步代码执行完毕后再运行</strong>时，可以使用 <code>setTimeout(fn, 0)</code>。 <strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Start</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">Delayed</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">),</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#B56959\">End</span><span style=\"color:#B5695977\">\"</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#A0ADA0\">// 输出顺序：Start → End → Delayed</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<ol>\n<li><strong>解决浏览器渲染阻塞问题</strong></li>\n</ol>\n<p>在密集的同步代码中插入 <code>setTimeout(fn, 0)</code>，可以<strong>避免阻塞浏览器渲染</strong>（如 DOM 更新、样式计算等），提升页面响应性。 <strong>场景</strong>： 批量操作 DOM 时，拆分任务避免页面卡顿：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>function processChunk(data, index) {</span></span>\n<span class=\"line\"><span>  if (index >= data.length) return;</span></span>\n<span class=\"line\"><span>  // 处理一部分数据</span></span>\n<span class=\"line\"><span>  setTimeout(() => processChunk(data, index + 1), 0);</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>processChunk(largeDataArray, 0);</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol>\n<li><strong>确保 DOM 更新后执行代码</strong></li>\n</ol>\n<p>在修改 DOM 后，若需立即获取更新后的布局信息（如元素尺寸、位置），需等待浏览器完成重排（Reflow）和重绘（Repaint）。 <strong>示例</strong>：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>element.style.display = \"none\";</span></span>\n<span class=\"line\"><span>setTimeout(() => {</span></span>\n<span class=\"line\"><span>  // 此时浏览器已完成渲染，可安全操作</span></span>\n<span class=\"line\"><span>  element.style.display = \"block\";</span></span>\n<span class=\"line\"><span>}, 0);</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol>\n<li><strong>调整事件触发顺序</strong></li>\n</ol>\n<p>在某些事件处理中，强制让代码在事件冒泡/捕获完成后执行。 <strong>场景</strong>： 父元素和子元素均有点击事件，若需父元素优先处理后再触发子元素逻辑：cript</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>parent.addEventListener(\"click\", () => {</span></span>\n<span class=\"line\"><span>  setTimeout(() => {</span></span>\n<span class=\"line\"><span>    // 在父元素事件冒泡完成后执行</span></span>\n<span class=\"line\"><span>    console.log(\"父元素事件处理完成\");</span></span>\n<span class=\"line\"><span>  }, 0);</span></span>\n<span class=\"line\"><span>});</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>child.addEventListener(\"click\", () => {</span></span>\n<span class=\"line\"><span>  console.log(\"子元素事件触发\");</span></span>\n<span class=\"line\"><span>});</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol>\n<li><strong>解决异步代码的竞态条件</strong></li>\n</ol>\n<p>在异步操作（如 Promise）中，通过 <code>setTimeout(fn, 0)</code> 确保某些逻辑在微任务队列清空后执行。 <strong>示例</strong>：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>Promise.resolve().then(() => console.log(\"微任务\"));</span></span>\n<span class=\"line\"><span>setTimeout(() => console.log(\"宏任务\"), 0);</span></span>\n<span class=\"line\"><span>// 输出顺序：微任务 → 宏任务</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<ol>\n<li><strong>兼容旧浏览器的 <code>requestAnimationFrame</code></strong></li>\n</ol>\n<p>在需要与浏览器渲染帧同步但缺乏 <code>requestAnimationFrame</code> 支持时，可用 <code>setTimeout(fn, 0)</code> 模拟（现代代码应优先使用 <code>requestAnimationFrame</code>）。</p>\n"},{"title":"[\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？","description":"","answer":"<p><strong>答案</strong>：<code>[1, NaN, NaN]</code> <strong>解析</strong>：<code>map</code> 的回调会传递 <code>(value, index, array)</code>，而 <code>parseInt</code> 接受 <code>(string, radix)</code>。实际调用为：</p>\n<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>parseInt(\"1\", 0); // radix=0 视为十进制 → 1</span></span>\n<span class=\"line\"><span>parseInt(\"2\", 1); // radix=1 非法 → NaN</span></span>\n<span class=\"line\"><span>parseInt(\"3\", 2); // 二进制不允许数字 3 → NaN</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n"},{"title":"如何使判断式(a\\==1&&a\\==2&&a\\==3)成立","description":"","answer":"<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>let a = {</span></span>\n<span class=\"line\"><span>  _a: 0,</span></span>\n<span class=\"line\"><span>  toString: function() {</span></span>\n<span class=\"line\"><span>    return ++a._a</span></span>\n<span class=\"line\"><span>  }</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span>console.log(a == 1 &#x26;&#x26; a == 2 &#x26;&#x26; a == 3)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n"},{"title":"0.1 + 0.2 === 0.3 的结果是？为什么？","description":"","answer":"<p><strong>答案</strong>：<code>false</code> <strong>解析</strong>：浮点数精度问题。二进制无法精确表示 0.1 和 0.2，相加后会有微小误差。</p>\n"},{"title":"以下代码的输出是什么？","description":"","answer":"<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>let a = {};</span></span>\n<span class=\"line\"><span>let b = { key: \"b\" };</span></span>\n<span class=\"line\"><span>let c = { key: \"c\" };</span></span>\n<span class=\"line\"><span>a[b] = 123;</span></span>\n<span class=\"line\"><span>a[c] = 456;</span></span>\n<span class=\"line\"><span>console.log(a[b]);</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>456</code> <strong>解析</strong>：对象作为键时会被转换为字符串 <code>[object Object]</code>，两次赋值会覆盖同一个键。</p>\n"},{"title":"\"5\" + 3 和 \"5\" - 3 的结果是什么？","description":"","answer":"<p><strong>答案</strong>：<code>&quot;53&quot;</code> 和 <code>2</code> <strong>解析</strong>：<code>+</code> 优先字符串拼接，<code>-</code> 触发隐式转换为数字。</p>\n"},{"title":"以下代码的输出是什么？","description":"","answer":"<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>for (var i = 0; i &#x3C; 3; i++) {</span></span>\n<span class=\"line\"><span>  setTimeout(() => console.log(i), 0);</span></span>\n<span class=\"line\"><span>}</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>3, 3, 3</code> <strong>解析</strong>：<code>var</code> 无块级作用域，循环结束后 <code>i=3</code>，所有回调共享同一变量。</p>\n"},{"title":"如何实现 add(2)(3)(4) 返回 9？","description":"","answer":"<p><strong>答案</strong>：函数柯里化：</p>\n<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#59873A\"> add</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">b</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">c</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> a</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#AB5959\"> +</span><span style=\"color:#B07D48\"> c</span><span style=\"color:#393A34\">)</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"},{"title":"以下代码的输出是什么？","description":"","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> a</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 1</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> mutate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  obj</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 2</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\"> a</span><span style=\"color:#999999\">:</span><span style=\"color:#2F798A\"> 3</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">mutate</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">obj</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>2</code> <strong>解析</strong>：<code>obj = { a: 3 }</code>修改的是<code>mutate</code>形参的地址，使得形参指向另外一个对象，而obj的地址并未改变。</p>\n"},{"title":"{} + [] 返回 0？为什么？","description":"","answer":"<p><strong>答案</strong>：在控制台中直接输入 <code>{} + []</code>，结果为 <code>0</code>。 <strong>解析</strong>：<code>{}</code> 被解析为空代码块，<code>+[]</code> 将空数组转换为数字 <code>0</code>。</p>\n"},{"title":"以下代码的输出顺序是什么？为什么？","description":"","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> async1</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  await</span><span style=\"color:#59873A\"> async2</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">async</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#59873A\"> async2</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">  console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">setTimeout</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">),</span><span style=\"color:#2F798A\"> 0</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">async1</span><span style=\"color:#999999\">();</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">new</span><span style=\"color:#998418\"> Promise</span><span style=\"color:#999999\">(</span><span style=\"color:#B07D48\">res</span><span style=\"color:#999999\"> =></span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">6</span><span style=\"color:#999999\">);</span><span style=\"color:#59873A\"> res</span><span style=\"color:#999999\">();</span><span style=\"color:#999999\"> }).</span><span style=\"color:#59873A\">then</span><span style=\"color:#999999\">(()</span><span style=\"color:#999999\"> =></span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">7</span><span style=\"color:#999999\">));</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">8</span><span style=\"color:#999999\">);</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>4,1,3,6,8,2,7,5</code> <strong>解析</strong>：</p>\n<ul>\n<li>同步代码顺序执行：<code>4</code>, <code>1</code>, <code>3</code>, <code>6</code>, <code>8</code></li>\n<li>微任务队列：<code>await async2()</code> 后的 <code>2</code> 进入微任务，Promise 的 <code>7</code> 紧随其后</li>\n<li>宏任务队列：<code>5</code> 最后执行</li>\n</ul>\n"},{"title":"以下代码的输出是什么？","description":"","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> Foo</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">  getName</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">1</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">  return</span><span style=\"color:#A65E2B\"> this</span><span style=\"color:#999999\">;</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#B07D48\">Foo</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">2</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#998418\">Foo</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">prototype</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">3</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">var</span><span style=\"color:#59873A\"> getName</span><span style=\"color:#999999\"> =</span><span style=\"color:#AB5959\"> function</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">4</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> };</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">function</span><span style=\"color:#59873A\"> getName</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span><span style=\"color:#B07D48\"> console</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">log</span><span style=\"color:#999999\">(</span><span style=\"color:#2F798A\">5</span><span style=\"color:#999999\">);</span><span style=\"color:#999999\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B07D48\">Foo</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">       // A</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">           // B</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">Foo</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">     // C</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">           // D</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">new</span><span style=\"color:#B07D48\"> Foo</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\">   // E</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">new</span><span style=\"color:#59873A\"> Foo</span><span style=\"color:#999999\">().</span><span style=\"color:#59873A\">getName</span><span style=\"color:#999999\">();</span><span style=\"color:#A0ADA0\"> // F</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>2,4,1,1,2,3</code> <strong>解析</strong>：</p>\n<ul>\n<li>A：调用静态方法 <code>Foo.getName</code> → 2</li>\n<li>B：变量 <code>getName</code> 覆盖函数声明 → 4</li>\n<li>C：<code>Foo()</code> 返回 <code>window</code>，全局 <code>getName</code> 被覆盖 → 1</li>\n<li>D：全局 <code>getName</code> 已是修改后的函数 → 1</li>\n<li>E：<code>new (Foo.getName)()</code> → 静态方法作为构造函数 → 2</li>\n<li>F：实例调用原型方法 → 3</li>\n</ul>\n"},{"title":"以下代码的执行结果是什么，并解释原因","description":"","answer":"<pre><code><div class=\"language-text \"><span class=\"lang\">text</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span>var b = a;</span></span>\n<span class=\"line\"><span>a.x = a = {n: 2};</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>console.log(a.x)    </span></span>\n<span class=\"line\"><span>console.log(b.x)</span></span>\n<span class=\"line\"><span></span></span></code></pre></div></code></pre>\n<p><strong>答案</strong>：<code>undefined</code> 和 <code>{n: 2}</code></p>\n<p><strong>解析</strong>：这段代码可以分解为以下步骤：</p>\n<ol>\n<li>创建一个对象 <code>a</code>，属性 <code>n</code> 的值为 <code>1</code>。</li>\n<li>将变量 <code>b</code> 指向 <code>a</code>，<code>b</code> 现在也引用了这个对象。</li>\n<li>执行赋值语句 <code>a.x = a = {n: 2}</code>，其中 <code>a.x</code> 引用的是对象 <code>a</code> 的 <code>x</code> 属性，但是此时 <code>a</code> 的值被重新赋值为一个新的对象 <code>{n: 2}</code>。</li>\n<li>所以现在 <code>a</code> 引用的是 <code>{n: 2}</code>，而 <code>b</code> 仍然引用原始的对象 <code>{n: 1}</code>，且其 <code>x</code> 属性被赋值为 <code>{n: 2}</code>。</li>\n<li>所以 <code>console.log(a.x)</code> 结果为 <code>undefined</code>，因为 <code>a</code> 引用的对象没有 <code>x</code> 属性；而 <code>console.log(b.x)</code> 结果为 <code>{n: 2}</code>，因为 <code>b</code> 引用的对象的 <code>x</code> 属性被赋值为 <code>{n: 2}</code>。</li>\n</ol>\n"},{"title":"[3, 15, 8, 29, 102, 22].sort()，结果是多少，为什么？","description":"","answer":"<p><strong>答案：</strong><code>[102, 15, 22, 29, 3, 8]</code></p>\n<p><strong>解析</strong>：<code>Array.prototype.sort()</code> 方法默认是按字典顺序（即字符串的顺序）对数组元素进行排序的。它会将数组中的元素转换为字符串，然后按字典顺序比较这些字符串。</p>\n"},{"title":"[] == ![]结果是什么？","description":"","answer":"<p><strong>答案：</strong><code>true</code></p>\n<p><strong>解析</strong>:[]转换为数字为<code>0</code>,<code>![]</code> 首先是转换为<strong>布尔值</strong>，由于[]作为一个引用类型转换为布尔值为<code>true</code>, 因此<code>![]</code>为<code>false</code>，进而在转换成数字，变为<code>0</code>, <code>0 == 0</code> ， 结果为<code>true</code></p>\n"},{"title":"如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？","description":"","answer":"<pre><code class=\"language-javascript\"><div class=\"language-javascript \"><span class=\"lang\">javascript</span><pre class=\"shiki vitesse-light\" style=\"background-color:#ffffff;color:#393a34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\"> =</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    a</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">1</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">    b</span><span style=\"color:#999999\">:</span><span style=\"color:#B5695977\"> '</span><span style=\"color:#B56959\">2</span><span style=\"color:#B5695977\">'</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    [</span><span style=\"color:#B07D48\">Symbol</span><span style=\"color:#999999\">.</span><span style=\"color:#B07D48\">iterator</span><span style=\"color:#999999\">]()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        let</span><span style=\"color:#B07D48\"> index</span><span style=\"color:#999999\"> =</span><span style=\"color:#2F798A\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#AB5959\">        const</span><span style=\"color:#B07D48\"> keys</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> Object</span><span style=\"color:#999999\">.</span><span style=\"color:#59873A\">keys</span><span style=\"color:#999999\">(</span><span style=\"color:#A65E2B\">this</span><span style=\"color:#999999\">)</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">        return</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#59873A\">            next</span><span style=\"color:#999999\">()</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">                if</span><span style=\"color:#999999\"> (</span><span style=\"color:#B07D48\">index</span><span style=\"color:#999999\"> &#x3C;</span><span style=\"color:#B07D48\"> keys</span><span style=\"color:#999999\">.</span><span style=\"color:#998418\">length</span><span style=\"color:#999999\">)</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">                    return</span><span style=\"color:#999999\"> {</span></span>\n<span class=\"line\"><span style=\"color:#998418\">                        done</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\"> false</span><span style=\"color:#999999\">,</span></span>\n<span class=\"line\"><span style=\"color:#998418\">                        value</span><span style=\"color:#999999\">:</span><span style=\"color:#B07D48\"> obj</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">keys</span><span style=\"color:#999999\">[</span><span style=\"color:#B07D48\">index</span><span style=\"color:#AB5959\">++</span><span style=\"color:#999999\">]]</span></span>\n<span class=\"line\"><span style=\"color:#999999\">                    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">                }</span></span>\n<span class=\"line\"><span style=\"color:#1E754F\">                return</span><span style=\"color:#999999\"> {</span><span style=\"color:#998418\">done</span><span style=\"color:#999999\">:</span><span style=\"color:#1E754F\">true</span><span style=\"color:#999999\">,</span><span style=\"color:#998418\">value</span><span style=\"color:#999999\">:</span><span style=\"color:#AB5959\">undefined</span><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"><span style=\"color:#999999\">            }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">        }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">    }</span></span>\n<span class=\"line\"><span style=\"color:#999999\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#AB5959\">const</span><span style=\"color:#999999\"> [</span><span style=\"color:#B07D48\">a</span><span style=\"color:#999999\">,</span><span style=\"color:#B07D48\"> b</span><span style=\"color:#999999\">]</span><span style=\"color:#999999\"> =</span><span style=\"color:#B07D48\"> obj</span></span>\n<span class=\"line\"></span></code></pre></div></code></pre>\n"}]
